= render 'breadcrumbs', subtitle: 'Metadata', post: @post

%table#stats
  %thead
    %tr
      %th.table-title{colspan: 2}
        Metadata:
        = link_to @post.subject, @post
        - if @post.metadata_editable_by?(current_user)
          = link_to edit_post_path(@post) do
            .link-box.action-edit
              = image_tag "icons/pencil.png", alt: ''
              Edit Post
    - if @post.description.present?
      %tr
        %td.post-subheader{colspan: 2, style: 'width: unset;'}= sanitize_simple_link_text(@post.description)
  %tbody
    %tr
      %th.sub.width-150 Status
      %td{class: cycle('odd', 'even')}
        - if @post.on_hiatus?
          = image_tag "icons/hourglass.png", class: 'vmid', title: 'On Hiatus', alt: ''
          On Hiatus
        - elsif @post.active?
          = image_tag "icons/book_open.png", class: 'vmid', title: 'In Progress', alt: ''
          In Progress
        - elsif @post.complete?
          = image_tag "icons/book.png", class: 'vmid', title: 'Complete', alt: ''
          Complete
        - elsif @post.abandoned?
          = image_tag "icons/book_grey.png", class: 'vmid', title: 'Abandoned', alt: ''
          Abandoned
    %tr
      %th.sub.width-150 Audience
      %td{class: cycle('odd', 'even')}
        = privacy_state(@post.privacy)
        - if @post.privacy_access_list?
          \-
          = safe_join(@post.post_viewers.map(&:user).map { |u| user_link(u) }, ', ')
    %tr
      %th.sub.width-150 Authors
      %td{class: cycle('odd', 'even')}
        - post_authors = @post.post_authors.joins(:user).includes(:user).order(Arel.sql('LOWER(users.username) asc'))
        %ul
          - post_authors.each do |post_author|
            %li
              = user_link(post_author.user)
              - unless post_author.joined?
                (invited)
    %tr
      %th.sub.width-150.vtop Characters
      %td{class: cycle('odd', 'even')}
        %ul
          - @post.character_appearance_counts.each do |character, count|
            %li
              = link_to character.name, character_path(character)
              = surround '(', ')' do
                = link_to "#{count} times", search_replies_path(post_id: @post.id, character_id: character.id, commit: true, sort: :created_new)

    - if @post.settings.present?
      %tr
        %th.sub.width-150 Setting
        - setting_links = @post.settings.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }
        %td{class: cycle('odd', 'even')}= safe_join(setting_links, ', ')
    - if @post.content_warnings.present?
      %tr
        %th.sub.width-150 Content Warnings
        - warning_links = @post.content_warnings.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }
        %td{class: cycle('odd', 'even')}= safe_join(warning_links, ', ')
    - if @post.labels.present?
      %tr
        %th.sub.width-150 Labels
        - label_links = @post.labels.ordered_by_post_tag.map { |tag| link_to tag.name, tag_path(tag) }
        %td{class: cycle('odd', 'even')}= safe_join(label_links, ', ')
    %tr
      %th.sub.width-150.vtop Word Count
      %td{class: cycle('odd', 'even')}
        = number_with_delimiter(@post.total_word_count)
        - if @post.joined_authors.count > 1
          %ul
            - @post.author_word_counts.each do |username, count|
              %li
                = username + ':'
                = number_with_delimiter(count)
    %tr
      %th.sub.width-150 Time Begun
      %td{class: cycle('odd', 'even')}= pretty_time(@post.created_at)
    %tr
      %th.sub.width-150 Time Last Updated
      %td{class: cycle('odd', 'even')}= pretty_time(@post.tagged_at)
