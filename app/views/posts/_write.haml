= form_for post, html: { id: 'post_form' } do |f|
  - content_for :form do
    - unless post.id.present? && !post.editable_by?(current_user)
      .view-button#rtf{class: ('selected' if current_user.default_editor == 'rtf')} Rich Text
      .view-button#html{class: ('selected' if current_user.default_editor == 'html')} HTML
      .view-button#editor-help{title: 'Help'} ?
    = f.label :subject, 'Subject:'
    = f.text_field :subject, placeholder: 'Subject'
    %br
    = f.label :description, 'Description:'
    = f.text_field :description, placeholder: 'Description'
    .details (Optional: describe the post's setting and major players, e.g. A Bell and Vorkosigans in Chronicle)
    - unless post.id.present? && !post.editable_by?(current_user)
      %br
      #post-form-wrapper
        = f.text_area :content, class: 'tinymce'
        - unless current_user.id == post.user_id
          %b= f.label :audit_comment, 'Moderator note'
          %br
          = f.text_area :audit_comment, placeholder: 'Explain reason for moderation here', class: 'mod'
          %br
        = f.hidden_field :character_id, id: 'reply_character_id'
        = f.hidden_field :icon_id, id: 'reply_icon_id'
        = f.hidden_field :character_alias_id, id: 'reply_character_alias_id'
      = render 'posts/editor_help'
  - content_for :buttons do
    - if post.id.present? && !post.editable_by?(current_user)
      = submit_tag 'Save', class: 'button', id: 'submit_button', data: { disable_with: 'Saving...' }
    - else
      = submit_tag (post.new_record? ? 'Post' : 'Save'), class: 'button', id: 'submit_button', data: { disable_with: 'Saving...' }
      = submit_tag "Preview", class: 'button', id: 'preview_button', name: 'button_preview', data: { disable_with: 'Previewing...' }


  .subber Metadata
  .even
    = f.label :board_id, 'Continuity:'
    = f.select :board_id, options_from_collection_for_select(allowed_boards(post, current_user), :id, :name, post.board_id)
    %br
    #section{class: ('hidden' unless post.board&.board_sections&.exists?)}
      = f.label :section_id, 'Continuity section:'
      = f.select :section_id, options_from_collection_for_select(BoardSection.where(board_id: post.board_id).ordered, :id, :name, post.section_id), include_blank: '— Choose Section —'
    = f.label :privacy, 'Privacy:'
    = f.select :privacy, options_from_collection_for_select(post_privacy_settings.to_a, :second, :first, post.privacy)
    #access_list
      = f.label :viewer_ids, '&#8627; Who can view this post? '.html_safe
      = f.collection_select(:viewer_ids, User.active.where.not(id: post.user_id).ordered,
        :id, :username, { selected: @viewer_ids.nil? ? post.viewer_ids : @viewer_ids }, { multiple: true })

    #current_authors
      = f.label :joined_author_ids, 'Current authors:'
      - if post.persisted?
        - authors = post.joined_authors.ordered
        = safe_join(authors.map { |author| user_link(author) }, ', ')
      - else
        = user_link(current_user)


    %div{title: 'Invite users to be authors in this post. Once they post, they will be removed from this section and moved to a Current Authors section. Invited authors will have this post show on their Replies Owed page, even if they have not yet joined the post. If the post is locked, invited users will have permission to reply. This field will not override privacy settings. You are automatically added as an author when you create a new post.'}
      = f.label :unjoined_author_ids, 'Invite coauthors:'
      = f.collection_select(:unjoined_author_ids, @permitted_authors, :id, :username, { selected: @author_ids }, { multiple: true })

    %div{title: 'If a post is locked, it doesn\'t accept new authors. Current or invited authors can still reply.'}
      = f.label :authors_locked, 'Lock post to authors?'
      = f.check_box :authors_locked, class: 'vmid', checked: @authors_from_board || @post.authors_locked
      = f.label :authors_locked, 'Only allow current or invited authors to reply to this post', class: 'no-margin'

    = f.label :setting_ids, 'Setting:'
    = tag_select(post, f, :settings)
    %br
    = f.label :content_warning_ids, 'Content Warnings:'
    = tag_select(post, f, :content_warnings)
    %br
    = f.label :label_ids, 'Labels:'
    = tag_select(post, f, :labels)

  - if !post.persisted? || post.author_ids.include?(current_user.id)
    #post-notes.subber Notes
    .even
      .details Notes written here are visible only to you. They will be displayed by the New Reply form.
      %br
      = f.text_area :private_note, value: params[:post].try(:[], :private_note) || post.author_for(current_user)&.private_note

  .subber Content
  - if post.id.present? && !post.editable_by?(current_user)
    #post-editor.padding-10= yield :form
    .subber.centered= yield :buttons
  - else
    = render 'editor', item: post
