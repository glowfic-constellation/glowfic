-# locals: ( reply: )

- content_for :form do
  = form_with model: reply, html: { id: 'post_form' } do |f|
    %b Reply
    %button.view-button#rtf{type: 'button', class: ('selected' if reply.editor_mode == 'rtf')} Rich Text
    %button.view-button#md{type: 'button', class: ('selected' if reply.editor_mode == 'md')} Markdown
    %button.view-button#html{type: 'button', class: ('selected' if reply.editor_mode == 'html')} HTML
    %button.view-button#editor-help{type: 'button', title: 'Help'} ?
    %br
    = unread_warning.try(:html_safe)
    %br
    = f.hidden_field :post_id
    = f.hidden_field :character_id
    = f.hidden_field :icon_id
    = f.hidden_field :character_alias_id
    = f.hidden_field :editor_mode, value: params[:editor_mode] || current_user.default_editor, id: 'editor_mode'
    = f.fields_for :character, reply.character do |cf|
      = cf.hidden_field :name
      = cf.hidden_field :npc
    = f.hidden_field :allow_dupe, value: @allow_dupe
    - if params[:per_page]
      = f.hidden_field :per_page, value: params[:per_page]
    #post-form-wrapper
      = f.text_area :content, class: 'tinymce'
      - unless current_user.id == reply.user_id
        %b= f.label :audit_comment, 'Moderator note'
        %br
        = f.text_area :audit_comment, placeholder: 'Explain reason for moderation here', class: 'mod'
        %br
      = f.submit (reply.new_record? ? 'Post' : 'Save'), class: 'button', id: 'submit_button', data: { disable_with: 'Saving...' }
      = f.submit "Preview", class: 'button', id: 'preview_button', name: 'button_preview', data: { disable_with: 'Previewing...' }
      - if reply.new_record?
        = f.submit "Save Draft", class: 'button', id: 'draft_button', data: { disable_with: 'Drafting...' }, name: 'button_draft'
      - if @draft.present?
        = f.submit "Delete Draft", class: 'button', id: 'delete_draft_button', data: { disable_with: 'Deleting...', confirm: "Delete draft?" }, name: 'button_delete_draft'
    - if reply.post.author_for(current_user).present?
      %hr.clear
      .post-note-editor
        .loading.float-right.hidden
          = image_tag 'icons/loading.gif', title: 'Loading...', class: 'vmid', alt: 'Loading...'
        .saveerror.float-right.hidden
          = image_tag "icons/exclamation.png", title: 'Error', class: 'vmid', alt: ''
          Error, please try again
        .saveconf.float-right.hidden
          = image_tag "icons/accept.png", title: 'Saved', class: 'vmid', alt: ''
          Saved
        %b Your Author Notes
        = image_tag "icons/pencil.png".freeze, title: 'Edit', alt: 'Edit', class: 'edit-private-notes pointer'
        %br
        .private-note
          - if (note = reply.post.author_for(current_user).private_note).present?
            = sanitize_written_content(note)
          - else
            %em (You haven't written a note yet!)
        .private-note-editor.hidden
          = f.text_area :private_note, value: params[:private_note] || reply.post.author_for(current_user).private_note, id: 'post_private_note'
          = f.submit 'Save', class: 'save-private-note button'
          = f.submit 'Discard Changes', class: 'discard-private-note button'
        #dialog-confirm{title: "Your author note has unsaved changes!"}
          %p What would you like to do with your unsaved changes?
    - else
      %br
    = render 'posts/editor_help', editor_location: 'reply'

= render 'posts/editor', item: reply
