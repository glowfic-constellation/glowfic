%tbody
  - col_count = 7
  - col_count += 1 if local_assigns[:show_template]
  - characters = name.characters.ordered unless local_assigns[:characters]
  - characters = characters.where(retired: false) if params[:retired] == 'false'

  - if @template.nil? && name.present?
    %tr
      %td.subber.character-list-template{colspan: col_count}
        - if name.is_a? String
          %b= name
          - if local_assigns[:show_new_character_button]
            = link_to new_character_path do
              .link-box.action-new{style: 'font-size: 14px'} + New Character
        - else
          %b
            Template:
            = link_to name.name, template_path(name)
          - if current_user.try(:id) == name.user_id
            = link_to new_character_path(template_id: name.id) do
              .link-box.action-new{style: 'font-size: 14px'} + New Instance
            = link_to edit_template_path(name) do
              .link-box.action-edit{style: 'font-size: 14px'}
                = image_tag "icons/pencil.png", class: 'vmid', alt: ''
                Edit
            = link_to template_path(name), method: :delete, data: { confirm: 'Are you sure you want to delete this template?' } do
              .link-box.action-delete{style: 'font-size: 14px'} x Delete
  - if @template && @template.description.present?
    %tr
      %td.single-description.written-content{colspan: col_count}= sanitize_written_content(@template.description)
  - elsif @template.nil? && name.present? && name.is_a?(::Template) && name.description.present?
    %tr
      %td.single-description.written-content{colspan: col_count}= sanitize_written_content(name.description)
  - if characters.empty?
    %tr
      %td.centered.padding-5{class: cycle('even', 'odd'), colspan: col_count} â€” No characters yet â€”
  - else
    %tr
      %td.padding-5
        %b Name
      - if local_assigns[:show_template]
        %td.padding-5
          %b Template
      %td.padding-5
        %b Cluster
      %td.padding-5
        %b Nickname
      %td.padding-5
        %b Screenname
      %td.padding-5
        %b Facecast
      %td.padding-5
        - if local_assigns[:show_user]
          %b User
        - else
          %b Setting
      %td.padding-5
    - pluck = characters_list(characters.ordered, local_assigns[:show_template])
    - params = { show_template: local_assigns[:show_template], show_user: local_assigns[:show_user], hide_buttons: local_assigns[:hide_buttons] }
    - params[:settings] = settings_info(characters) unless local_assigns[:show_user]
    = render partial: 'characters/list_item', collection: pluck, as: :character, locals: params
    - if characters.methods.include?(:total_pages) && characters.total_pages > 1
      %tfoot
      %tr
        %td.padding-5
          = link_to character.name, character_path(character)
        - if local_assigns[:show_template]
          %td.padding-5
            - if character.template_id?
              = link_to character.template.name, character.template
        %td.padding-5{style: 'width:15%'}= character.template_name
        %td.padding-5{style: 'width:15%'}= breakable_text(character.screenname)
        %td.padding-5{style: 'width:20%'}= character.pb
        %td.padding-5{style: 'width:15%'}
          - if local_assigns[:show_user]
            = user_link(character.user)
          - else
            = safe_join(character.settings.map { |setting| link_to(setting.name, tag_path(setting)) }, ', ')
        %td.width-70.right-align
          - unless local_assigns[:hide_buttons]
            - if character.editable_by?(current_user)
              = link_to edit_character_path(character) do
                = image_tag "icons/pencil.png"
            - if character.deletable_by?(current_user)
              = link_to character_path(character), :method => :delete, data: { confirm: 'Are you sure you want to delete '+character.name+'?' } do
                = image_tag "icons/cross.png"
              &nbsp;
- if characters.methods.include?(:total_pages) && characters.total_pages > 1
  %tfoot
    %tr
      %td{colspan: col_count}= render 'posts/paginator', paginated: characters
