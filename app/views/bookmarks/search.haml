= render 'search/breadcrumbs'

%table.search-collapsible
  %thead
    %tr
      %th.search-params-header
        Search Bookmarks
        - if @search_results
          = "- #{@search_results.total_entries} results"
      %th.search-results-header
        - if @search_results
          = render 'posts/paginator', paginated: @search_results, no_per: true
  %tbody
    %tr
      %td.search-box
        = form_tag search_bookmarks_path, method: :get do
          %table.search-form
            %tr
              %td{ style: 'width: 80px;' }= label_tag :user_id, 'User'
              %td= select_tag :user_id, options_from_collection_for_select([@user].compact || [], :id, :username, params[:user_id]),
                { class: 'chosen-select', prompt: '— Choose User —' }
            %tr
              %td= label_tag :post_id, 'Posts'
              %td= select_tag :post_id, options_from_collection_for_select(@posts || [], :id, :subject, params[:post_id]),
                { class: 'chosen-select', prompt: '— Choose Post —', multiple: true }
            %tr
              %td= label_tag :condensed, 'Condensed'
              %td
                = check_box_tag :condensed, nil, (params[:commit].nil? || params[:condensed].present?), class: 'vmid'
                = label_tag :condensed, 'Hide screennames and icons'
            %tr
              %td.centered{ colspan: 2 }= submit_tag "Search", class: 'button'
      %td.vtop
        - if @search_results.present?
          %table
            %tbody
              - user_is_owner = @user && @user.id == current_user.try(:id)
              - current_post_subject = nil
              - @search_results.each do |reply|
                - if reply.post.subject != current_post_subject
                  - current_post_subject = reply.post.subject
                  %tr
                    %th.subber= link_to current_post_subject, post_path(reply.post)
                %tr
                  %td.vtop{ class: cycle('even'.freeze, 'odd'.freeze) }
                    .bookmark-name{ data: { bookmark_id: reply.bookmark_id } }
                      %span
                        - if reply.bookmark_name.present?
                          %b= reply.bookmark_name
                        - else
                          %em (Unnamed)
                      %span.saveconf.float-right.hidden{ data: { bookmark_id: reply.bookmark_id } }
                        = image_tag "icons/accept.png", title: 'Saved', class: 'vmid', alt: ''
                        Saved
                    - if user_is_owner
                      .bookmark-editor.hidden{ data: { bookmark_id: reply.bookmark_id } }
                        %span.bookmark-editor-fields
                          = text_field_tag nil, reply.bookmark_name, placeholder: "Bookmark Name", class: "bookmark-name-text-field vmid", data: { bookmark_id: reply.bookmark_id }
                          &nbsp;&nbsp;&nbsp;
                          = check_box_tag "public_#{reply.bookmark_id}", true, reply.bookmark_public, class: "bookmark-public-checkbox vmid", data: { bookmark_id: reply.bookmark_id }
                          = label_tag "public_#{reply.bookmark_id}", 'Public', class: "vmid"
                        %span.bookmark-editor-buttons
                          = submit_tag 'Save', class: 'save-bookmark button vmid', data: { bookmark_id: reply.bookmark_id }
                          = submit_tag 'Discard Changes', class: 'discard-bookmark-changes button vmid', data: { bookmark_id: reply.bookmark_id }
                          .loading.float-right.margin-top-7.hidden
                            = image_tag 'icons/loading.gif', title: 'Loading...', class: 'vmid', alt: 'Loading...'
                          .saveerror.float-right.margin-top-7.hidden{ data: { bookmark_id: reply.bookmark_id } }
                            = image_tag "icons/exclamation.png", title: 'Error', class: 'vmid', alt: ''
                            Error, please try again
                %tr
                  %td.vtop{ class: cycle('even'.freeze, 'odd'.freeze) }
                    = render 'replies/single', reply: reply, condensed: params[:condensed]
  - if @search_results && @search_results.total_pages > 1
    %tfoot
      %tr
        %th.search-params-header.empty
        %th.search-results-header= render 'posts/paginator', paginated: @search_results, no_per: true
