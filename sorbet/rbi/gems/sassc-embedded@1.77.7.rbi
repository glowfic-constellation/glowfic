# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sassc-embedded` gem.
# Please instead update this file by running `bin/tapioca gem sassc-embedded`.


# source://sassc-embedded//lib/sassc/embedded/version.rb#3
module SassC
  class << self
    # The global load paths for Sass files. This is meant for plugins and
    # libraries to register the paths to their Sass stylesheets to that they may
    # be `@imported`. This load path is used by every instance of {Sass::Engine}.
    # They are lower-precedence than any load paths passed in via the
    # {file:SASS_REFERENCE.md#load_paths-option `:load_paths` option}.
    #
    # If the `SASS_PATH` environment variable is set,
    # the initial value of `load_paths` will be initialized based on that.
    # The variable should be a colon-separated list of path names
    # (semicolon-separated on Windows).
    #
    # Note that files on the global load path are never compiled to CSS
    # themselves, even if they aren't partials. They exist only to be imported.
    #
    # @example
    #   SassC.load_paths << File.dirname(__FILE__ + '/sass')
    # @return [Array<String, Pathname, Sass::Importers::Base>]
    #
    # source://sassc/2.4.0/lib/sassc.rb#21
    def load_paths; end
  end
end

# source://sassc-embedded//lib/sassc/embedded/version.rb#4
module SassC::Embedded; end

# source://sassc-embedded//lib/sassc/embedded/version.rb#5
SassC::Embedded::VERSION = T.let(T.unsafe(nil), String)

# source://sassc-embedded//lib/sassc/embedded.rb#12
class SassC::Engine
  # @return [Engine] a new instance of Engine
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#16
  def initialize(template, options = T.unsafe(nil)); end

  # @raise [NotRenderedError]
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#71
  def dependencies; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#76
  def filename; end

  # Returns the value of attribute options.
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#14
  def options; end

  # source://sassc-embedded//lib/sassc/embedded.rb#15
  def render; end

  # @raise [NotRenderedError]
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#81
  def source_map; end

  # Returns the value of attribute template.
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#14
  def template; end

  private

  # source://sassc-embedded//lib/sassc/embedded.rb#99
  def file_url; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#118
  def functions_handler; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#114
  def import_handler; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#94
  def line_comments?; end

  # source://sassc-embedded//lib/sassc/embedded.rb#135
  def load_paths; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#106
  def omit_source_map_url?; end

  # source://sassc-embedded//lib/sassc/embedded.rb#112
  def output_style; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#122
  def output_style_enum; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#86
  def precision; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#82
  def quiet?; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#90
  def sass?; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#102
  def source_map_contents?; end

  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/engine.rb#98
  def source_map_embed?; end

  # source://sassc/2.4.0/lib/sassc/engine.rb#110
  def source_map_file; end

  # source://sassc-embedded//lib/sassc/embedded.rb#103
  def source_map_file_url; end

  # source://sassc-embedded//lib/sassc/embedded.rb#127
  def syntax; end
end

# source://sassc-embedded//lib/sassc/embedded.rb#140
class SassC::FunctionsHandler
  # @return [FunctionsHandler] a new instance of FunctionsHandler
  #
  # source://sassc/2.4.0/lib/sassc/functions_handler.rb#5
  def initialize(options); end

  # source://sassc-embedded//lib/sassc/embedded.rb#143
  def setup(_native_options, functions: T.unsafe(nil)); end

  private

  # source://sassc-embedded//lib/sassc/embedded.rb#177
  def arguments_from_native_list(native_argument_list); end

  # source://sassc/2.4.0/lib/sassc/functions_handler.rb#68
  def error(message); end

  # source://sassc/2.4.0/lib/sassc/functions_handler.rb#60
  def to_native_value(sass_value); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#194
class SassC::ImportHandler
  # @return [ImportHandler] a new instance of ImportHandler
  #
  # source://sassc/2.4.0/lib/sassc/import_handler.rb#5
  def initialize(options); end

  # source://sassc-embedded//lib/sassc/embedded.rb#197
  def setup(_native_options); end

  private

  # source://sassc/2.4.0/lib/sassc/import_handler.rb#26
  def import_function; end

  # source://sassc/2.4.0/lib/sassc/import_handler.rb#36
  def imports_to_native(imports); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#222
class SassC::ImportHandler::FileImporter
  # @return [FileImporter] a new instance of FileImporter
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#223
  def initialize(import_cache); end

  # source://sassc-embedded//lib/sassc/embedded.rb#227
  def find_file_url(*_arg0, **_arg1, &_arg2); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#234
module SassC::ImportHandler::FileSystemImporter
  class << self
    # source://sassc-embedded//lib/sassc/embedded.rb#236
    def resolve_path(path, from_import); end

    private

    # @return [Boolean]
    #
    # source://sassc-embedded//lib/sassc/embedded.rb#294
    def dir_exist?(path); end

    # source://sassc-embedded//lib/sassc/embedded.rb#283
    def exactly_one(paths); end

    # @return [Boolean]
    #
    # source://sassc-embedded//lib/sassc/embedded.rb#290
    def file_exist?(path); end

    # source://sassc-embedded//lib/sassc/embedded.rb#264
    def try_path(path); end

    # source://sassc-embedded//lib/sassc/embedded.rb#272
    def try_path_as_dir(path, from_import); end

    # source://sassc-embedded//lib/sassc/embedded.rb#259
    def try_path_with_ext(path); end

    # source://sassc-embedded//lib/sassc/embedded.rb#298
    def without_ext(path); end
  end
end

# source://sassc-embedded//lib/sassc/embedded.rb#307
class SassC::ImportHandler::ImportCache
  # @return [ImportCache] a new instance of ImportCache
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#308
  def initialize(importer); end

  # source://sassc-embedded//lib/sassc/embedded.rb#315
  def canonicalize(url, context); end

  # source://sassc-embedded//lib/sassc/embedded.rb#351
  def find_file_url(_url, context); end

  # source://sassc-embedded//lib/sassc/embedded.rb#345
  def load(_canonical_url); end

  private

  # source://sassc-embedded//lib/sassc/embedded.rb#377
  def import_to_native(import, parent_dir, from_import, canonicalize); end

  # source://sassc-embedded//lib/sassc/embedded.rb#401
  def imports_to_native(imports, parent_dir, from_import, url, containing_url); end

  # source://sassc-embedded//lib/sassc/embedded.rb#361
  def resolve_file_url(path, parent_dir, from_import); end

  # source://sassc-embedded//lib/sassc/embedded.rb#366
  def syntax(path); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#206
class SassC::ImportHandler::Importer
  # @return [Importer] a new instance of Importer
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#207
  def initialize(import_cache); end

  # source://sassc-embedded//lib/sassc/embedded.rb#211
  def canonicalize(*_arg0, **_arg1, &_arg2); end

  # source://sassc-embedded//lib/sassc/embedded.rb#215
  def load(*_arg0, **_arg1, &_arg2); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#184
module SassC::NoopImporter
  private

  # source://sassc-embedded//lib/sassc/embedded.rb#187
  def canonicalize(*_arg0, **_arg1, &_arg2); end

  # source://sassc-embedded//lib/sassc/embedded.rb#189
  def load(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://sassc-embedded//lib/sassc/embedded.rb#187
    def canonicalize(*_arg0, **_arg1, &_arg2); end

    # source://sassc-embedded//lib/sassc/embedded.rb#189
    def load(*_arg0, **_arg1, &_arg2); end
  end
end

# source://sassc-embedded//lib/sassc/embedded.rb#421
class SassC::Sass2Scss
  class << self
    # source://sassc-embedded//lib/sassc/embedded.rb#426
    def convert(sass); end
  end
end

# source://sassc-embedded//lib/sassc/embedded.rb#434
module SassC::Script
  class << self
    # source://sassc/2.4.0/lib/sassc/script.rb#6
    def custom_functions(functions: T.unsafe(nil)); end

    # source://sassc/2.4.0/lib/sassc/script.rb#10
    def formatted_function_name(function_name, functions: T.unsafe(nil)); end
  end
end

# The abstract superclass for SassScript objects.
# Many of these methods, especially the ones that correspond to SassScript operations,
# are designed to be overridden by subclasses which may change the semantics somewhat.
# The operations listed here are just the defaults.
#
# source://sassc-embedded//lib/sassc/embedded.rb#435
class SassC::Script::Value
  # Creates a new value.
  #
  # @return [Value] a new instance of Value
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#18
  def initialize(value = T.unsafe(nil)); end

  # Compares this object to `other`
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#59
  def ==(other); end

  # @raise [SassC::SyntaxError] if this value isn't an integer
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#70
  def assert_int!; end

  # Whether the value is surrounded by square brackets. For non-list values,
  # this will be `false`.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#80
  def bracketed; end

  # True if this Value is the same as `other`
  #
  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#44
  def eql?(other); end

  # Returns the hash code of this value. Two objects' hash codes should be
  # equal if the objects are equal.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#39
  def hash; end

  # Returns a system inspect value for this object
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#49
  def inspect; end

  # Returns `false` (all Values are truthy)
  #
  # @return [Boolean]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#112
  def null?; end

  # Returns the options hash for this node.
  # Raises SassC::SyntaxError if the value was created
  # outside of the parser and \{#to\_s} was called on it
  #
  # @raise [SassC::SyntaxError]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#32
  def options; end

  # Sets the options hash for this node,
  # as well as for all child nodes.
  # See the official Sass reference for options.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#27
  def options=(_arg0); end

  # Returns the separator for this value. For non-list-like values or the
  # empty list, this will be `nil`. For lists or maps, it will be `:space` or `:comma`.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#74
  def separator; end

  # The source range in the document on which this node appeared.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#15
  def source_range; end

  # The source range in the document on which this node appeared.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#15
  def source_range=(_arg0); end

  # Returns the value of this Value as an array.
  # Single Values are considered the same as single-element arrays.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#86
  def to_a; end

  # Returns `true` (all Values are truthy)
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#54
  def to_bool; end

  # Returns the value of this value as a hash. Most values don't have hash
  # representations, but [Map]s and empty [List]s do.
  #
  # @raise [SassC::SyntaxError] if this value doesn't have a hash representation
  # @return [Hash<Value, Value>] This value as a hash
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#95
  def to_h; end

  # Returns the integer value of this value.
  # Raises SassC::SyntaxError if this value doesn’t implment integer conversion.
  #
  # @raise [SassC::SyntaxError]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#65
  def to_i; end

  # Returns the string representation of this value
  # as it would be output to the CSS document.
  #
  # @return [String]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#106
  def to_s(opts = T.unsafe(nil)); end

  # Returns the string representation of this value
  # as it would be output to the CSS document.
  #
  # @return [String]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#106
  def to_sass(opts = T.unsafe(nil)); end

  # Returns the pure Ruby value of the value.
  # The type of this value varies based on the subclass.
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#12
  def value; end

  # Creates a new list containing `contents` but with the same brackets and
  # separators as this object, when interpreted as a list.
  #
  # @param contents [Array<Value>] The contents of the new list.
  # @param separator [Symbol] The separator of the new list. Defaults to \{#separator}.
  # @param bracketed [Boolean] Whether the new list is bracketed. Defaults to \{#bracketed}.
  # @return [Sass::Script::Value::List]
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#123
  def with_contents(contents, separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end

  protected

  # Evaluates the value.
  #
  # @param environment [Sass::Environment] The environment in which to evaluate the SassScript
  # @return [Value] This value
  #
  # source://sassc/2.4.0/lib/sassc/script/value.rb#133
  def _perform(environment); end
end

# source://sassc-embedded//lib/sassc/embedded.rb#436
class SassC::Script::Value::String < ::SassC::Script::Value
  # Creates a new string.
  #
  # @param value [String] See \{#value}
  # @param type [Symbol] See \{#type}
  # @param deprecated_interp_equivalent [String?] If this was created via a potentially-deprecated string interpolation,
  #   this is the replacement expression that should be suggested to the user.
  # @return [String] a new instance of String
  #
  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#66
  def initialize(value, type = T.unsafe(nil)); end

  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#92
  def inspect; end

  # @see Value#plus
  #
  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#72
  def plus(other); end

  # @see Value#to_s
  #
  # source://sassc-embedded//lib/sassc/embedded.rb#455
  def to_s(opts = T.unsafe(nil)); end

  # @see Value#to_sass
  #
  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#88
  def to_sass(opts = T.unsafe(nil)); end

  # Whether this is a CSS string or a CSS identifier.
  # The difference is that strings are written with double-quotes,
  # while identifiers aren't.
  #
  # @return [Symbol] `:string` or `:identifier`
  #
  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#13
  def type; end

  # The Ruby value of the string.
  #
  # source://sassc/2.4.0/lib/sassc/script/value/string.rb#6
  def value; end

  class << self
    # Returns the quoted string representation of `contents`.
    #
    # source://sassc-embedded//lib/sassc/embedded.rb#448
    def quote(contents, opts = T.unsafe(nil)); end
  end
end

# source://sassc-embedded//lib/sassc/embedded.rb#462
module SassC::Script::ValueConversion
  class << self
    # source://sassc-embedded//lib/sassc/embedded.rb#467
    def from_native(value, options); end

    # source://sassc-embedded//lib/sassc/embedded.rb#526
    def to_native(value); end
  end
end

# source://sassc-embedded//lib/sassc/embedded.rb#586
module SassC::Uri
  private

  # source://sassc-embedded//lib/sassc/embedded.rb#636
  def decode_uri(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#636
  def decode_uri_component(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#621
  def encode_uri(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#621
  def encode_uri_component(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#621
  def encode_uri_path_component(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#621
  def encode_uri_query_component(str); end

  # source://sassc-embedded//lib/sassc/embedded.rb#649
  def file_url_to_path(url); end

  # source://sassc-embedded//lib/sassc/embedded.rb#645
  def file_urls_to_relative_path(url, from_url); end

  # source://sassc-embedded//lib/sassc/embedded.rb#641
  def file_urls_to_relative_url(url, from_url); end

  # source://sassc-embedded//lib/sassc/embedded.rb#589
  def parse(*_arg0, **_arg1, &_arg2); end

  # source://sassc-embedded//lib/sassc/embedded.rb#658
  def path_to_file_url(path); end

  class << self
    # source://sassc-embedded//lib/sassc/embedded.rb#636
    def decode_uri(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#636
    def decode_uri_component(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#621
    def encode_uri(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#621
    def encode_uri_component(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#621
    def encode_uri_path_component(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#621
    def encode_uri_query_component(str); end

    # source://sassc-embedded//lib/sassc/embedded.rb#649
    def file_url_to_path(url); end

    # source://sassc-embedded//lib/sassc/embedded.rb#645
    def file_urls_to_relative_path(url, from_url); end

    # source://sassc-embedded//lib/sassc/embedded.rb#641
    def file_urls_to_relative_url(url, from_url); end

    # source://sassc-embedded//lib/sassc/embedded.rb#589
    def parse(*_arg0, **_arg1, &_arg2); end

    # source://sassc-embedded//lib/sassc/embedded.rb#658
    def path_to_file_url(path); end
  end
end
