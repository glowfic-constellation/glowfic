# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `barnes` gem.
# Please instead update this file by running `bin/tapioca gem barnes`.

# source://barnes/lib/barnes.rb#24
module Barnes
  class << self
    # Starts the reporting client
    #
    # Arguments:
    #
    #   - interval: How often, in seconds, to instrument and report
    #   - aggregation_period: The minimal aggregation period in use, in seconds.
    #   - statsd: The statsd reporter. This should be an instance of statsd-ruby
    #   - panels: The instrumentation "panels" in use. See `resource_usage.rb` for
    #     an example panel, which is the default if none are provided.
    #
    # source://barnes/lib/barnes.rb#40
    def start(interval: T.unsafe(nil), aggregation_period: T.unsafe(nil), statsd: T.unsafe(nil), panels: T.unsafe(nil)); end
  end
end

# source://barnes/lib/barnes/consts.rb#25
Barnes::COUNTERS = T.let(T.unsafe(nil), String)

# source://barnes/lib/barnes.rb#26
Barnes::DEFAULT_AGGREGATION_PERIOD = T.let(T.unsafe(nil), Integer)

# source://barnes/lib/barnes.rb#25
Barnes::DEFAULT_INTERVAL = T.let(T.unsafe(nil), Integer)

# source://barnes/lib/barnes.rb#28
Barnes::DEFAULT_PANELS = T.let(T.unsafe(nil), Array)

# source://barnes/lib/barnes.rb#27
Barnes::DEFAULT_STATSD = T.let(T.unsafe(nil), Symbol)

# source://barnes/lib/barnes/consts.rb#25
Barnes::GAUGES = T.let(T.unsafe(nil), String)

# source://barnes/lib/barnes/panel.rb#25
class Barnes::Panel
  # @return [Panel] a new instance of Panel
  #
  # source://barnes/lib/barnes/panel.rb#26
  def initialize; end

  # Add an instrument to the Panel
  #
  # source://barnes/lib/barnes/panel.rb#31
  def instrument(instrument); end

  # Read the values of each instrument into counter_readings,
  # and gauge_readings. May have side effects on all arguments.
  #
  # source://barnes/lib/barnes/panel.rb#44
  def instrument!(state, counter_readings, gauge_readings); end

  # Initialize the state of each instrument in the panel.
  #
  # source://barnes/lib/barnes/panel.rb#36
  def start!(state); end
end

# The periodic class is used to send occasional metrics
# to a reporting instance of `Barnes::Reporter` at a semi-regular
# rate.
#
# source://barnes/lib/barnes/periodic.rb#30
class Barnes::Periodic
  # @return [Periodic] a new instance of Periodic
  #
  # source://barnes/lib/barnes/periodic.rb#31
  def initialize(reporter:, sample_rate: T.unsafe(nil), debug: T.unsafe(nil), panels: T.unsafe(nil)); end

  # source://barnes/lib/barnes/periodic.rb#69
  def stop; end
end

# Automatically configures barnes to run with
# rails 3, 4, and 5. Configuration can be changed
# in the application.rb. For example
#
#   module YourApp
#     class Application < Rails::Application
#     config.barnes[:interval] = 20
#
# source://barnes/lib/barnes/railtie.rb#35
class Barnes::Railtie < ::Rails::Railtie; end

# The reporter is used to send stats to the server.
#
# Example:
#
#   statsd   = Statsd.new('127.0.0.1', "8125")
#   reporter = Reporter.new(statsd: , sample_rate: 10)
#   reporter.report_statsd('barnes.counters' => {"hello" => 2})
#
# source://barnes/lib/barnes/reporter.rb#32
class Barnes::Reporter
  # @return [Reporter] a new instance of Reporter
  #
  # source://barnes/lib/barnes/reporter.rb#35
  def initialize(statsd:, sample_rate:); end

  # source://barnes/lib/barnes/reporter.rb#46
  def report(env); end

  # source://barnes/lib/barnes/reporter.rb#50
  def report_statsd(env); end

  # Returns the value of attribute sample_rate.
  #
  # source://barnes/lib/barnes/reporter.rb#33
  def sample_rate; end

  # Sets the attribute sample_rate
  #
  # @param value the value to set the attribute sample_rate to.
  #
  # source://barnes/lib/barnes/reporter.rb#33
  def sample_rate=(_arg0); end

  # Returns the value of attribute statsd.
  #
  # source://barnes/lib/barnes/reporter.rb#33
  def statsd; end

  # Sets the attribute statsd
  #
  # @param value the value to set the attribute statsd to.
  #
  # source://barnes/lib/barnes/reporter.rb#33
  def statsd=(_arg0); end
end

# source://barnes/lib/barnes/resource_usage.rb#27
class Barnes::ResourceUsage < ::Barnes::Panel
  # @return [ResourceUsage] a new instance of ResourceUsage
  #
  # source://barnes/lib/barnes/resource_usage.rb#28
  def initialize(sample_rate); end
end

# source://barnes/lib/barnes/consts.rb#25
Barnes::STATE = T.let(T.unsafe(nil), String)
