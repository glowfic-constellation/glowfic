# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `apipie-rails` gem.
# Please instead update this file by running `bin/tapioca gem apipie-rails`.

# source://apipie-rails/lib/apipie/core_ext/route.rb#7
class ActionDispatch::Journey::Route
  include ::Apipie::BaseUrlExtension

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#56
  def initialize(name:, path:, app: T.unsafe(nil), constraints: T.unsafe(nil), required_defaults: T.unsafe(nil), defaults: T.unsafe(nil), request_method_match: T.unsafe(nil), precedence: T.unsafe(nil), scope_options: T.unsafe(nil), internal: T.unsafe(nil)); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def app; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def ast; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def conditions; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def constraints; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def defaults; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#141
  def dispatcher?; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#77
  def eager_load!; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#119
  def format(path_options); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#137
  def glob?; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def internal; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#163
  def ip; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#145
  def matches?(request); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def name; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#114
  def parts; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def path; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def precedence; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#127
  def required_default?(key); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#131
  def required_defaults; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#102
  def required_keys; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#123
  def required_parts; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#92
  def requirements; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#167
  def requires_matching_verb?; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#7
  def scope_options; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#106
  def score(supplied_keys); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#114
  def segment_keys; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#98
  def segments; end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#171
  def verb; end

  private

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#180
  def match_verb(request); end

  # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#176
  def verbs; end

  class << self
    # source://actionpack/7.0.8lib/action_dispatch/journey/route.rb#47
    def verb_matcher(verb); end
  end
end

class ActionDispatch::Routing::Mapper
  include ::Apipie::Routing::MapperExtensions
end

# Middleware for rails app that adds checksum of JSON in the response headers
# which can help client to realize when JSON has changed
#
# Add the following to your application.rb
#   require 'apipie/middleware/checksum_in_headers'
#   # Add JSON checksum in headers for smarter caching
#   config.middleware.use "Apipie::Middleware::ChecksumInHeaders"
#
# And in your apipie initializer allow checksum calculation
#   Apipie.configuration.update_checksum = true
# and reload documentation
#   Apipie.reload_documentation
#
# By default the header is added to requests on /api and /apipie only
# It can be changed with
#   Apipie.configuration.checksum_path = ['/prefix/api']
# If set to nil the header is added always
#
# source://apipie-rails/lib/apipie/core_ext/route.rb#1
module Apipie
  extend ::Apipie::Helpers

  class << self
    # source://apipie-rails/lib/apipie/response_description_adapter.rb#7
    def additional_properties(yesno); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#62
    def api_base_url(version = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://apipie-rails/lib/apipie/apipie_module.rb#76
    def api_base_url_version_valid?(version); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#7
    def app; end

    # get application description for given or default version
    #
    # source://apipie-rails/lib/apipie/apipie_module.rb#50
    def app_info(version = T.unsafe(nil), lang = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://apipie-rails/lib/apipie/apipie_module.rb#72
    def app_info_version_valid?(version); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#41
    def configuration; end

    # @yield [configuration]
    #
    # source://apipie-rails/lib/apipie/apipie_module.rb#37
    def configure; end

    # source://apipie-rails/lib/apipie/apipie_module.rb#45
    def debug(message); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#21
    def json_schema_for_method_response(controller_name, method_name, return_code, allow_nulls); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#27
    def json_schema_for_self_describing_class(cls, allow_nulls = T.unsafe(nil)); end

    # all calls delegated to Apipie::Application instance
    #
    # source://apipie-rails/lib/apipie/apipie_module.rb#33
    def method_missing(method, *args, &block); end

    # source://apipie-rails/lib/apipie/response_description_adapter.rb#3
    def prop(name, expected_type, options = T.unsafe(nil), sub_properties = T.unsafe(nil)); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#80
    def record(record); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#11
    def to_json(version = T.unsafe(nil), resource_id = T.unsafe(nil), method_name = T.unsafe(nil), lang = T.unsafe(nil)); end

    # source://apipie-rails/lib/apipie/apipie_module.rb#16
    def to_swagger_json(version = T.unsafe(nil), resource_id = T.unsafe(nil), method_name = T.unsafe(nil), lang = T.unsafe(nil), clear_warnings = T.unsafe(nil)); end
  end
end

class Apipie::ApipiesController < ::ActionController::Base
  include ::ActionView::Context
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ApipieHelper

  def apipie_checksum; end
  def authenticate; end
  def index; end

  private

  # source://actionview/7.0.8lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  def authorize_resource(resource); end
  def authorized_doc; end
  def get_format; end
  def get_language; end
  def render_from_cache; end
  def set_script_name; end

  class << self
    # source://activesupport/7.0.8lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.8lib/abstract_controller/helpers.rb#11
    def _helper_methods; end

    # source://actionview/7.0.8lib/action_view/layouts.rb#209
    def _layout; end

    # source://actionview/7.0.8lib/action_view/layouts.rb#210
    def _layout_conditions; end

    # source://actionpack/7.0.8lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

module Apipie::ApipiesController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::ActionController::Base::HelperMethods

  def heading(*args, **_arg1, &block); end
end

# source://apipie-rails/lib/apipie/application.rb#9
class Apipie::Application
  # @return [Application] a new instance of Application
  #
  # source://apipie-rails/lib/apipie/application.rb#19
  def initialize; end

  # get api for given method
  #
  # There are two ways how this method can be used:
  # 1) Specify both parameters
  #   resource_id:
  #       controller class - UsersController
  #       string with resource name (plural) and version - "v1#users"
  #   method_name: name of the method (string or symbol)
  #
  # 2) Specify only first parameter:
  #   resource_id: string containing both resource and method name joined
  #   with '#' symbol.
  #   - "users#create" get default version
  #   - "v2#users#create" get specific version
  #
  # source://apipie-rails/lib/apipie/application.rb#177
  def [](resource_id, method_name = T.unsafe(nil)); end

  # Is there a reason to interpret the DSL for this run?
  # with specific setting for some environment there is no reason the dsl
  # should be interpreted (e.g. no validations and doc from cache)
  #
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/application.rb#377
  def active_dsl?; end

  # source://apipie-rails/lib/apipie/application.rb#149
  def add_param_group(controller, name, &block); end

  # source://apipie-rails/lib/apipie/application.rb#328
  def api_controllers_paths; end

  # source://apipie-rails/lib/apipie/application.rb#24
  def available_versions; end

  # source://apipie-rails/lib/apipie/application.rb#370
  def checksum; end

  # source://apipie-rails/lib/apipie/application.rb#61
  def clear_cached_routes!; end

  # source://apipie-rails/lib/apipie/application.rb#354
  def compute_checksum; end

  # recursively searches what versions has the controller specified in
  # resource_description? It's used to derivate the default value of
  # versions for methods.
  #
  # source://apipie-rails/lib/apipie/application.rb#124
  def controller_versions(controller); end

  # create new method api description
  #
  # source://apipie-rails/lib/apipie/application.rb#73
  def define_method_description(controller, method_name, dsl_data); end

  # create new resource api description
  #
  # source://apipie-rails/lib/apipie/application.rb#102
  def define_resource_description(controller, version, dsl_data = T.unsafe(nil)); end

  # get api for given method
  #
  # There are two ways how this method can be used:
  # 1) Specify both parameters
  #   resource_id:
  #       controller class - UsersController
  #       string with resource name (plural) and version - "v1#users"
  #   method_name: name of the method (string or symbol)
  #
  # 2) Specify only first parameter:
  #   resource_id: string containing both resource and method name joined
  #   with '#' symbol.
  #   - "users#create" get default version
  #   - "v2#users#create" get specific version
  #
  # source://apipie-rails/lib/apipie/application.rb#177
  def get_method_description(resource_id, method_name = T.unsafe(nil)); end

  # get all versions of method description
  #
  # source://apipie-rails/lib/apipie/application.rb#232
  def get_method_descriptions(resource, method); end

  # source://apipie-rails/lib/apipie/application.rb#154
  def get_param_group(controller, name); end

  # options:
  # => "users"
  # => "v2#users"
  # =>  V2::UsersController
  #
  # source://apipie-rails/lib/apipie/application.rb#198
  def get_resource_description(resource, version = T.unsafe(nil)); end

  # get all versions of resource description
  #
  # source://apipie-rails/lib/apipie/application.rb#225
  def get_resource_descriptions(resource); end

  # source://apipie-rails/lib/apipie/application.rb#397
  def get_resource_id(klass); end

  # @deprecated Use {#get_resource_id} instead
  #
  # source://apipie-rails/lib/apipie/application.rb#382
  def get_resource_name(klass); end

  # initialize variables for gathering dsl data
  #
  # source://apipie-rails/lib/apipie/application.rb#248
  def init_env; end

  # @raise [NoDocumentedMethod]
  #
  # source://apipie-rails/lib/apipie/application.rb#266
  def json_schema_for_method_response(version, controller_name, method_name, return_code, allow_nulls); end

  # source://apipie-rails/lib/apipie/application.rb#274
  def json_schema_for_self_describing_class(cls, allow_nulls); end

  # source://apipie-rails/lib/apipie/application.rb#347
  def load_documentation; end

  # source://apipie-rails/lib/apipie/application.rb#422
  def locale; end

  # source://apipie-rails/lib/apipie/application.rb#426
  def locale=(locale); end

  # source://apipie-rails/lib/apipie/application.rb#28
  def rails_routes(route_set = T.unsafe(nil), base_url = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/application.rb#54
  def rails_routes_by_controller_and_action; end

  # source://apipie-rails/lib/apipie/application.rb#257
  def recorded_examples; end

  # source://apipie-rails/lib/apipie/application.rb#332
  def reload_documentation; end

  # source://apipie-rails/lib/apipie/application.rb#262
  def reload_examples; end

  # source://apipie-rails/lib/apipie/application.rb#238
  def remove_method_description(resource, versions, method_name); end

  # Returns the value of attribute resource_descriptions.
  #
  # source://apipie-rails/lib/apipie/application.rb#17
  def resource_descriptions; end

  # source://apipie-rails/lib/apipie/application.rb#66
  def routes_for_action(controller, method, args); end

  # source://apipie-rails/lib/apipie/application.rb#145
  def set_controller_versions(controller, versions); end

  # source://apipie-rails/lib/apipie/application.rb#393
  def set_resource_id(controller, resource_id); end

  # source://apipie-rails/lib/apipie/application.rb#299
  def to_json(version, resource_id, method_name, lang); end

  # source://apipie-rails/lib/apipie/application.rb#279
  def to_swagger_json(version, resource_id, method_name, language, clear_warnings = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/application.rb#430
  def translate(str, locale); end

  # Recursively walks up the controller hierarchy looking for a value
  # from the block.
  # Stops at ActionController::Base.
  #
  # @param controller [Class] controller to start from
  # @param args [Array] arguments passed to the block
  # @param default [Object] default value to return if no value is found
  # @param block [Proc] block to call with controller and args
  #
  # source://apipie-rails/lib/apipie/application.rb#138
  def value_from_parents(controller, *args, default: T.unsafe(nil), &block); end

  private

  # source://apipie-rails/lib/apipie/application.rb#461
  def get_base_url(version); end

  # source://apipie-rails/lib/apipie/application.rb#465
  def get_resource_version(resource_description); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/application.rb#477
  def ignored?(controller, method = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/application.rb#473
  def load_controller_from_file(controller_file); end

  # Since Rails 3.2, the classes are reloaded only on file change.
  # We need to reload all the controller classes to rebuild the
  # docs, therefore we just force to reload all the code. This
  # happens only when reload_controllers is set to true and only
  # when showing the documentation.
  #
  # If cache_classes is set to false, it does nothing,
  # as this would break loading of the controllers.
  #
  # source://apipie-rails/lib/apipie/application.rb#491
  def rails_mark_classes_for_reload; end

  # Make sure that the version/resource_id/method_name are valid combination
  # resource_id and method_name can be nil
  #
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/application.rb#442
  def valid_search_args?(version, resource_id, method_name); end

  # source://apipie-rails/lib/apipie/application.rb#454
  def version_prefix(klass); end
end

# we need engine just for serving static assets
#
# source://apipie-rails/lib/apipie/application.rb#11
class Apipie::Application::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://apipie-rails/lib/apipie/core_ext/route.rb#2
module Apipie::BaseUrlExtension
  # Returns the value of attribute base_url.
  #
  # source://apipie-rails/lib/apipie/core_ext/route.rb#3
  def base_url; end

  # Sets the attribute base_url
  #
  # @param value the value to set the attribute base_url to.
  #
  # source://apipie-rails/lib/apipie/core_ext/route.rb#3
  def base_url=(_arg0); end
end

# source://apipie-rails/lib/apipie/configuration.rb#2
class Apipie::Configuration
  extend ::Forwardable

  # @return [Configuration] a new instance of Configuration
  #
  # source://apipie-rails/lib/apipie/configuration.rb#161
  def initialize; end

  # Returns the value of attribute action_on_non_validated_keys.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def action_on_non_validated_keys; end

  # Sets the attribute action_on_non_validated_keys
  #
  # @param value the value to set the attribute action_on_non_validated_keys to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def action_on_non_validated_keys=(_arg0); end

  # An object that responds to a `.call(controller)` method responsible for
  # matching the correct controller action
  #
  # source://apipie-rails/lib/apipie/configuration.rb#35
  def api_action_matcher; end

  # source://apipie-rails/lib/apipie/configuration.rb#37
  def api_action_matcher=(callable); end

  # Returns the value of attribute api_base_url.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def api_base_url; end

  # set base url for default version of API
  # to set it for specific version use
  # config.api_base_url[version] = url
  #
  # source://apipie-rails/lib/apipie/configuration.rb#152
  def api_base_url=(url); end

  # matcher to be used in Dir.glob to find controllers to be reloaded e.g.
  #
  #   "#{Rails.root}/app/controllers/api/*.rb"
  #
  # source://apipie-rails/lib/apipie/configuration.rb#31
  def api_controllers_matcher; end

  # matcher to be used in Dir.glob to find controllers to be reloaded e.g.
  #
  #   "#{Rails.root}/app/controllers/api/*.rb"
  #
  # source://apipie-rails/lib/apipie/configuration.rb#31
  def api_controllers_matcher=(_arg0); end

  # specify routes if used router differ from default e.g.
  #
  # Api::Engine.routes
  #
  # source://apipie-rails/lib/apipie/configuration.rb#157
  def api_routes; end

  # specify routes if used router differ from default e.g.
  #
  # Api::Engine.routes
  #
  # source://apipie-rails/lib/apipie/configuration.rb#51
  def api_routes=(_arg0); end

  # Returns the value of attribute app_info.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def app_info; end

  # set app description for default version
  # to maintain backward compatibility
  # new way: config.app_info[version] = description
  #
  # source://apipie-rails/lib/apipie/configuration.rb#144
  def app_info=(description); end

  # Returns the value of attribute app_name.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def app_name; end

  # Sets the attribute app_name
  #
  # @param value the value to set the attribute app_name to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def app_name=(_arg0); end

  # Returns the value of attribute authenticate.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def authenticate; end

  # Sets the attribute authenticate
  #
  # @param value the value to set the attribute authenticate to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def authenticate=(_arg0); end

  # Returns the value of attribute authorize.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def authorize; end

  # Sets the attribute authorize
  #
  # @param value the value to set the attribute authorize to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def authorize=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#93
  def cache_dir; end

  # Sets the attribute cache_dir
  #
  # @param value the value to set the attribute cache_dir to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#92
  def cache_dir=(_arg0); end

  # Returns the value of attribute checksum_path.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def checksum_path; end

  # Sets the attribute checksum_path
  #
  # @param value the value to set the attribute checksum_path to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def checksum_path=(_arg0); end

  # Returns the value of attribute compress_examples.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def compress_examples; end

  # Sets the attribute compress_examples
  #
  # @param value the value to set the attribute compress_examples to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def compress_examples=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#5
  def copyright; end

  # source://apipie-rails/lib/apipie/configuration.rb#5
  def copyright=(_arg0); end

  # Returns the value of attribute debug.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def debug; end

  # Sets the attribute debug
  #
  # @param value the value to set the attribute debug to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def debug=(_arg0); end

  # Returns the value of attribute default_locale.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def default_locale; end

  # Sets the attribute default_locale
  #
  # @param value the value to set the attribute default_locale to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def default_locale=(_arg0); end

  # Returns the value of attribute default_version.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def default_version; end

  # Sets the attribute default_version
  #
  # @param value the value to set the attribute default_version to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def default_version=(_arg0); end

  # Returns the value of attribute disqus_shortname.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def disqus_shortname; end

  # Sets the attribute disqus_shortname
  #
  # @param value the value to set the attribute disqus_shortname to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def disqus_shortname=(_arg0); end

  # Returns the value of attribute doc_base_url.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def doc_base_url; end

  # Sets the attribute doc_base_url
  #
  # @param value the value to set the attribute doc_base_url to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def doc_base_url=(_arg0); end

  # Returns the value of attribute doc_path.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def doc_path; end

  # Sets the attribute doc_path
  #
  # @param value the value to set the attribute doc_path to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def doc_path=(_arg0); end

  # if there is not obvious reason why the DSL should be turned on (no
  # validations, cache turned on etc.), it's disabled to avoid unneeded
  # allocation. It you need the DSL for other reasons, you can force the
  # activation.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#101
  def force_dsl=(_arg0); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#102
  def force_dsl?; end

  # source://apipie-rails/lib/apipie/configuration.rb#133
  def generated_doc_disclaimer; end

  # comment to put before docs that was generated automatically. It's used to
  # determine if the description should be overwritten next recording.
  # If you want to keep the documentation (prevent from overriding), remove
  # the line above the docs.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#132
  def generated_doc_disclaimer=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#20
  def generator; end

  # Returns the value of attribute ignore_allow_blank_false.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def ignore_allow_blank_false; end

  # Sets the attribute ignore_allow_blank_false
  #
  # @param value the value to set the attribute ignore_allow_blank_false to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def ignore_allow_blank_false=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#119
  def ignored; end

  # array of controller names (strings) (might include actions as well)
  # to be ignored # when generating the documentation
  # e.g. %w[Api::CommentsController Api::PostsController#post]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#118
  def ignored=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#110
  def ignored_by_recorder; end

  # array of controller names (strings) (might include actions as well)
  # to be ignored # when extracting description form calls.
  # e.g. %w[Api::CommentsController Api::PostsController#post]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#109
  def ignored_by_recorder=(_arg0); end

  # Returns the value of attribute languages.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def languages; end

  # Sets the attribute languages
  #
  # @param value the value to set the attribute languages to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def languages=(_arg0); end

  # Returns the value of attribute layout.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def layout; end

  # Sets the attribute layout
  #
  # @param value the value to set the attribute layout to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def layout=(_arg0); end

  # Returns the value of attribute link_extension.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def link_extension; end

  # Sets the attribute link_extension
  #
  # @param value the value to set the attribute link_extension to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def link_extension=(_arg0); end

  # Returns the value of attribute locale.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def locale; end

  # Sets the attribute locale
  #
  # @param value the value to set the attribute locale to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def locale=(_arg0); end

  # Returns the value of attribute markup.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def markup; end

  # Sets the attribute markup
  #
  # @param value the value to set the attribute markup to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def markup=(_arg0); end

  # Returns the value of attribute namespaced_resources.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def namespaced_resources; end

  # Sets the attribute namespaced_resources
  #
  # @param value the value to set the attribute namespaced_resources to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def namespaced_resources=(_arg0); end

  # Returns the value of attribute namespaced_resources.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def namespaced_resources?; end

  # Returns the value of attribute persist_show_in_doc.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def persist_show_in_doc; end

  # Persist the show_in_doc value in the examples if true. Use this if you
  # cannot set the flag in the tests themselves (no rspec for example).
  #
  # source://apipie-rails/lib/apipie/configuration.rb#126
  def persist_show_in_doc=(_arg0); end

  # Returns the value of attribute process_params.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def process_params; end

  # Sets the attribute process_params
  #
  # @param value the value to set the attribute process_params to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def process_params=(_arg0); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#80
  def process_value?; end

  # Returns the value of attribute record.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def record; end

  # Sets the attribute record
  #
  # @param value the value to set the attribute record to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def record=(_arg0); end

  # set to true if you want to reload the controllers at each refresh of the
  # documentation. It requires +:api_controllers_matcher+ to be set to work
  # properly.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#46
  def reload_controllers=(_arg0); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#59
  def reload_controllers?; end

  # Returns the value of attribute required_by_default.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def required_by_default; end

  # Sets the attribute required_by_default
  #
  # @param value the value to set the attribute required_by_default to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def required_by_default=(_arg0); end

  # Returns the value of attribute required_by_default.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def required_by_default?; end

  # a object responsible for transforming the routes loaded from Rails to a form
  # to be used in the documentation, when using the `api!` keyword. By default,
  # it's Apipie::RoutesFormatter. To customize the behaviour, one can inherit from
  # from this class and override the methods as needed.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#57
  def routes_formatter; end

  # a object responsible for transforming the routes loaded from Rails to a form
  # to be used in the documentation, when using the `api!` keyword. By default,
  # it's Apipie::RoutesFormatter. To customize the behaviour, one can inherit from
  # from this class and override the methods as needed.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#57
  def routes_formatter=(_arg0); end

  # Returns the value of attribute show_all_examples.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def show_all_examples; end

  # Sets the attribute show_all_examples
  #
  # @param value the value to set the attribute show_all_examples to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def show_all_examples=(_arg0); end

  # source://apipie-rails/lib/apipie/configuration.rb#16
  def swagger; end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_allow_additional_properties_in_response(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_allow_additional_properties_in_response=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_allow_additional_properties_in_response?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_api_host(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_api_host=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_api_host?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_content_type_input(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_content_type_input=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_content_type_input?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_generate_x_computed_id_field(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_generate_x_computed_id_field=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_generate_x_computed_id_field?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_global_security(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_global_security=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_global_security?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_include_warning_tags(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_include_warning_tags=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_include_warning_tags?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_json_input_uses_refs(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_json_input_uses_refs=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_json_input_uses_refs?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_responses_use_refs(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_responses_use_refs=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_responses_use_refs?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_schemes(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_schemes=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_schemes?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_security_definitions(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_security_definitions=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_security_definitions?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_skip_default_tags(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_skip_default_tags=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_skip_default_tags?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_suppress_warnings(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_suppress_warnings=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3forwardable.rb#231
  def swagger_suppress_warnings?(*args, **_arg1, &block); end

  # Returns the value of attribute translate.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def translate; end

  # Sets the attribute translate
  #
  # @param value the value to set the attribute translate to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def translate=(_arg0); end

  # Returns the value of attribute update_checksum.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def update_checksum; end

  # Sets the attribute update_checksum
  #
  # @param value the value to set the attribute update_checksum to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def update_checksum=(_arg0); end

  # set to true if you want to use pregenerated documentation cache and avoid
  # generating the documentation on runtime (useful for production
  # environment).
  # You can generate the cache by running
  #
  #     rake apipie:cache
  #
  # source://apipie-rails/lib/apipie/configuration.rb#89
  def use_cache; end

  # set to true if you want to use pregenerated documentation cache and avoid
  # generating the documentation on runtime (useful for production
  # environment).
  # You can generate the cache by running
  #
  #     rake apipie:cache
  #
  # source://apipie-rails/lib/apipie/configuration.rb#89
  def use_cache=(_arg0); end

  # set to true if you want to use pregenerated documentation cache and avoid
  # generating the documentation on runtime (useful for production
  # environment).
  # You can generate the cache by running
  #
  #     rake apipie:cache
  #
  # source://apipie-rails/lib/apipie/configuration.rb#89
  def use_cache?; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/configuration.rb#137
  def use_disqus?; end

  # Returns the value of attribute validate.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate; end

  # Sets the attribute validate
  #
  # @param value the value to set the attribute validate to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate=(_arg0); end

  # Returns the value of attribute validate.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate?; end

  # Returns the value of attribute validate_key.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#75
  def validate_key; end

  # Sets the attribute validate_key
  #
  # @param value the value to set the attribute validate_key to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate_key=(_arg0); end

  # Returns the value of attribute validate_key.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#75
  def validate_key?; end

  # Returns the value of attribute validate_presence.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#70
  def validate_presence; end

  # Sets the attribute validate_presence
  #
  # @param value the value to set the attribute validate_presence to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate_presence=(_arg0); end

  # Returns the value of attribute validate_presence.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#70
  def validate_presence?; end

  # Returns the value of attribute validate_value.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#65
  def validate_value; end

  # Sets the attribute validate_value
  #
  # @param value the value to set the attribute validate_value to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def validate_value=(_arg0); end

  # Returns the value of attribute validate_value.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#65
  def validate_value?; end

  # Returns the value of attribute version_in_url.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def version_in_url; end

  # Sets the attribute version_in_url
  #
  # @param value the value to set the attribute version_in_url to.
  #
  # source://apipie-rails/lib/apipie/configuration.rb#5
  def version_in_url=(_arg0); end
end

# DSL is a module that provides #api, #error, #param, #returns.
#
# source://apipie-rails/lib/apipie/dsl_definition.rb#6
module Apipie::DSL; end

# source://apipie-rails/lib/apipie/dsl_definition.rb#86
module Apipie::DSL::Action
  # # load paths from routes and don't provide description
  #   api
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#96
  def api(method, path, desc = T.unsafe(nil), options = T.unsafe(nil)); end

  # # load paths from routes
  #   api! "short description",
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#105
  def api!(desc = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#88
  def def_param_group(name, &block); end

  # Show some example of what does the described
  # method return.
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#123
  def example(example); end

  # Describe whole resource
  #
  # Example:
  # api :desc => "Show user profile", :path => "/users/", :version => '1.0 - 3.4.2012'
  # param :id, Integer, :desc => "User ID", :required => true
  # desc <<-EOS
  #   Long description...
  # EOS
  #
  # @raise [ArgumentError]
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#143
  def resource_description(options = T.unsafe(nil), &block); end

  # Reference other similar method
  #
  #   api :PUT, '/articles/:id'
  #   see "articles#create"
  #   def update; end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#116
  def see(*args); end

  # Determine if the method should be included
  # in the documentation
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#130
  def show(show); end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#8
module Apipie::DSL::Base
  # source://apipie-rails/lib/apipie/dsl_definition.rb#11
  def _apipie_eval_dsl(*args, &block); end

  # Returns the value of attribute api_params.
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#9
  def api_params; end

  # Returns the value of attribute apipie_resource_descriptions.
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#9
  def apipie_resource_descriptions; end

  private

  # source://apipie-rails/lib/apipie/dsl_definition.rb#21
  def _apipie_dsl_data; end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#25
  def _apipie_dsl_data_clear; end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#29
  def _apipie_dsl_data_init; end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#156
module Apipie::DSL::Common
  # source://apipie-rails/lib/apipie/dsl_definition.rb#230
  def _apipie_define_validators(description); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#308
  def _apipie_get_method_params(method); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#293
  def _apipie_handle_validate_key_error(params, param); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#303
  def _apipie_save_method_params(method, params); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#157
  def api_version(*versions); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#157
  def api_versions(*versions); end

  # Describe the next method.
  #
  # Example:
  #   desc "print hello world"
  #   def hello_world
  #     puts "hello world"
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#170
  def desc(description); end

  # Describe the next method.
  #
  # Example:
  #   desc "print hello world"
  #   def hello_world
  #     puts "hello world"
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#170
  def description(description); end

  # describe next method with document in given path
  # in convension, these doc located under "#{Rails.root}/doc"
  # Example:
  # document "hello_world.md"
  # def hello_world
  #   puts "hello world"
  # end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#187
  def document(path); end

  # Describe possible errors
  #
  # Example:
  #   error :desc => "speaker is sleeping", :code => 500, :meta => [:some, :more, :data]
  #   error 500, "speaker is sleeping"
  #   def hello_world
  #     return 500 if self.speaker.sleeping?
  #     puts "hello world"
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#218
  def error(code_or_options, desc = T.unsafe(nil), options = T.unsafe(nil)); end

  # Describe available request/response formats
  #
  #   formats ['json', 'jsonp', 'xml']
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#195
  def formats(formats); end

  # Describe the next method.
  #
  # Example:
  #   desc "print hello world"
  #   def hello_world
  #     puts "hello world"
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#170
  def full_description(description); end

  # Describe request header.
  #  Headers can't be validated with config.validate_presence = true
  #
  # Example:
  #   header 'ClientId', "client-id"
  #   def show
  #     render :text => headers['HTTP_CLIENT_ID']
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#321
  def header(header_name, description, options = T.unsafe(nil)); end

  # Describe additional metadata
  #
  #   meta :author => { :name => 'John', :surname => 'Doe' }
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#203
  def meta(meta); end

  # Add tags to resources and actions group operations together.
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#224
  def tags(*args); end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#564
module Apipie::DSL::Concern
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Common
  include ::Apipie::DSL::Action
  include ::Apipie::DSL::Param

  # source://apipie-rails/lib/apipie/dsl_definition.rb#583
  def _apipie_concern_data; end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#587
  def _apipie_concern_update_api_blocks; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#591
  def apipie_concern?; end

  # the concern was included into a controller
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#571
  def included(controller); end

  # create method api and redefine newly added method
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#596
  def method_added(method_name); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#606
  def update_api(*methods, &block); end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#450
module Apipie::DSL::Controller
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Common
  include ::Apipie::DSL::Action
  include ::Apipie::DSL::Param

  # source://apipie-rails/lib/apipie/dsl_definition.rb#529
  def _apipie_concern_subst; end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#536
  def _apipie_perform_concern_subst(string); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#508
  def _apipie_update_meta(method_desc, dsl_data); end

  # Allows to update existing params after definition was made (usually needed
  # when extending the API form plugins).
  #
  #     UsersController.apipie_update_params([:create, :update]) do
  #       param :user, Hash do
  #         param :oauth, String
  #       end
  #      end
  #
  # The block is evaluated in scope of the controller. Ohe can pass some additional
  # objects via additional arguments like this:
  #
  #     UsersController.apipie_update_params([:create, :update], [:name, :secret]) do |param_names|
  #       param :user, Hash do
  #         param_names.each { |p| param p, String }
  #       end
  #      end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#501
  def _apipie_update_params(method_desc, dsl_data); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#542
  def apipie_concern?; end

  # defines the substitutions to be made in the API paths deifned
  # in concerns included. For example:
  #
  # There is this method defined in concern:
  #
  #    api GET ':controller_path/:id'
  #    def show
  #      # ...
  #    end
  #
  # If you include the concern into some controller, you can
  # specify the value for :controller_path like this:
  #
  #      apipie_concern_subst(:controller_path => '/users')
  #      include ::Concerns::SampleController
  #
  # The resulting path will be '/users/:id'.
  #
  # It has to be specified before the concern is included.
  #
  # If not specified, the default predefined substitions are
  #
  #    {:conroller_path => controller.controller_path,
  #     :resource_id  => `resource_id_from_apipie` }
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#480
  def apipie_concern_subst(subst_hash); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#515
  def apipie_update_methods(methods, *args, &block); end

  # backwards compatibility
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#515
  def apipie_update_params(methods, *args, &block); end

  # create method api and redefine newly added method
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#547
  def method_added(method_name); end
end

# this describes the params, it's in separate module because it's
# used in Validators as well
#
# source://apipie-rails/lib/apipie/dsl_definition.rb#334
module Apipie::DSL::Param
  # where the group definition should be looked up when no scope
  # given. This is expected to return a controller.
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#445
  def _default_param_group_scope; end

  # Describe method's parameter
  #
  # Example:
  #   param :greeting, String, :desc => "arbitrary text", :required => true
  #   def hello_world(greeting)
  #     puts greeting
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#343
  def param(param_name, validator, desc_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Reuses param group for this method. The definition is looked up
  # in scope of this controller. If the group was defined in
  # different controller, the second param can be used to specify it.
  # when using action_aware params, you can specify :as =>
  # :create or :update to explicitly say how it should behave
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#364
  def param_group(name, scope_or_options = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#352
  def property(param_name, validator, desc_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Describe possible responses
  #
  # Example:
  #     def_param_group :user do
  #       param :user, Hash do
  #         param :name, String
  #       end
  #     end
  #
  #   returns :user, "the speaker"
  #   returns "the speaker" do
  #        param_group: :user
  #   end
  #   returns :param_group => :user, "the speaker"
  #   returns :user, :code => 201, :desc => "the created speaker record"
  #   returns :array_of => :user, "many speakers"
  #   def hello_world
  #     render json: {user: {name: "Alfred"}}
  #   end
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#404
  def returns(pgroup_or_options, desc_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#53
module Apipie::DSL::Resource
  # source://apipie-rails/lib/apipie/dsl_definition.rb#63
  def api_base_url(url); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#76
  def app_info(app_info); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#80
  def deprecated(value); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#59
  def name(name); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#72
  def path(path); end

  # resource_id "my_own_resource_id"
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#55
  def resource_id(resource_id); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#67
  def short(short); end

  # source://apipie-rails/lib/apipie/dsl_definition.rb#67
  def short_description(short); end
end

# source://apipie-rails/lib/apipie/dsl_definition.rb#612
class Apipie::DSL::ResourceDescriptionDsl
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Common
  include ::Apipie::DSL::Resource
  include ::Apipie::DSL::Param

  # @return [ResourceDescriptionDsl] a new instance of ResourceDescriptionDsl
  #
  # source://apipie-rails/lib/apipie/dsl_definition.rb#618
  def initialize(controller); end

  class << self
    # evaluates resource description DSL and returns results
    #
    # source://apipie-rails/lib/apipie/dsl_definition.rb#623
    def eval_dsl(controller, &block); end
  end
end

# abstract
#
# source://apipie-rails/lib/apipie/errors.rb#19
class Apipie::DefinedParamError < ::Apipie::ParamError
  # @return [DefinedParamError] a new instance of DefinedParamError
  #
  # source://apipie-rails/lib/apipie/errors.rb#22
  def initialize(param); end

  # Returns the value of attribute param.
  #
  # source://apipie-rails/lib/apipie/errors.rb#20
  def param; end

  # Sets the attribute param
  #
  # @param value the value to set the attribute param to.
  #
  # source://apipie-rails/lib/apipie/errors.rb#20
  def param=(_arg0); end
end

# source://apipie-rails/lib/apipie/errors.rb#3
class Apipie::Error < ::StandardError; end

# source://apipie-rails/lib/apipie/error_description.rb#3
class Apipie::ErrorDescription
  # @return [ErrorDescription] a new instance of ErrorDescription
  #
  # source://apipie-rails/lib/apipie/error_description.rb#13
  def initialize(code_or_options, desc = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://apipie-rails/lib/apipie/error_description.rb#4
  def code; end

  # Returns the value of attribute description.
  #
  # source://apipie-rails/lib/apipie/error_description.rb#4
  def description; end

  # Returns the value of attribute metadata.
  #
  # source://apipie-rails/lib/apipie/error_description.rb#4
  def metadata; end

  # source://apipie-rails/lib/apipie/error_description.rb#34
  def to_json(lang); end

  class << self
    # source://apipie-rails/lib/apipie/error_description.rb#6
    def from_dsl_data(args); end
  end
end

# source://apipie-rails/lib/apipie/extractor/recorder.rb#2
module Apipie::Extractor
  class << self
    # source://apipie-rails/lib/apipie/extractor.rb#84
    def apis_from_routes; end

    # source://apipie-rails/lib/apipie/extractor.rb#65
    def call_finished; end

    # source://apipie-rails/lib/apipie/extractor.rb#61
    def call_recorder; end

    # source://apipie-rails/lib/apipie/extractor.rb#72
    def clean_call_recorder; end

    # source://apipie-rails/lib/apipie/extractor.rb#94
    def controller_path(name); end

    # source://apipie-rails/lib/apipie/extractor.rb#39
    def finish; end

    # source://apipie-rails/lib/apipie/extractor.rb#57
    def logger; end

    # source://apipie-rails/lib/apipie/extractor.rb#34
    def start(record); end

    # source://apipie-rails/lib/apipie/extractor.rb#76
    def write_docs; end

    # source://apipie-rails/lib/apipie/extractor.rb#80
    def write_examples; end

    private

    # source://apipie-rails/lib/apipie/extractor.rb#100
    def all_api_routes; end

    # source://apipie-rails/lib/apipie/extractor.rb#143
    def all_apis_from_docs; end

    # source://apipie-rails/lib/apipie/extractor.rb#121
    def populate_api_routes; end

    # source://apipie-rails/lib/apipie/extractor.rb#157
    def update_api_descriptions; end
  end
end

# source://apipie-rails/lib/apipie/extractor/writer.rb#230
class Apipie::Extractor::ActionDescriptionUpdater
  # @return [ActionDescriptionUpdater] a new instance of ActionDescriptionUpdater
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#236
  def initialize(controller, action); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#241
  def generated?; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#267
  def old_header; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#263
  def update(new_header); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#245
  def update_apis(apis); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#256
  def update_generated_description(desc); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#276
  def write!; end

  protected

  # @raise [ActionNotFound]
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#287
  def action_line; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#375
  def align_indented(text); end

  # @raise [ControllerNotFound]
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#298
  def controller_content; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#303
  def controller_content=(new_content); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#294
  def controller_path; end

  # this method would be totally useless unless some clever guy
  # desided that it would be great idea to change a behavior of
  # "".lines method to not include end of lines.
  #
  # For more details:
  #   https://github.com/puppetlabs/puppet/blob/0dc44695/lib/puppet/util/monkey_patches.rb
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#427
  def ensure_line_breaks(lines); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#319
  def generate_apis_code(apis); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#311
  def generate_code(desc); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#367
  def generate_errors_code(errors); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#339
  def generate_params_code(params, indent = T.unsafe(nil)); end

  # returns all the lines before the method that might contain the restpi descriptions
  # not bulletproof but working for conventional Ruby code
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#395
  def lines_above_method; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#283
  def logger; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#380
  def overwrite_header(new_header); end
end

# source://apipie-rails/lib/apipie/extractor/writer.rb#234
class Apipie::Extractor::ActionDescriptionUpdater::ActionNotFound < ::StandardError; end

# source://apipie-rails/lib/apipie/extractor/writer.rb#232
class Apipie::Extractor::ActionDescriptionUpdater::ControllerNotFound < ::StandardError; end

# source://apipie-rails/lib/apipie/extractor/collector.rb#3
class Apipie::Extractor::Collector
  # @return [Collector] a new instance of Collector
  #
  # source://apipie-rails/lib/apipie/extractor/collector.rb#6
  def initialize; end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#98
  def add_routes_info(desc); end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#35
  def add_to_records(record); end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#15
  def controller_full_path(controller); end

  # Returns the value of attribute descriptions.
  #
  # source://apipie-rails/lib/apipie/extractor/collector.rb#4
  def descriptions; end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#91
  def finalize_descriptions; end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#26
  def handle_record(record); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/extractor/collector.rb#19
  def ignore_call?(record); end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#110
  def record_to_s(record); end

  # Returns the value of attribute records.
  #
  # source://apipie-rails/lib/apipie/extractor/collector.rb#4
  def records; end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#40
  def refine_description(record); end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#49
  def refine_errors_description(description, record); end

  # source://apipie-rails/lib/apipie/extractor/collector.rb#55
  def refine_params_description(params_desc, recorded_params); end
end

# Used to keep apipie_examples.yml params in order
#
# source://apipie-rails/lib/apipie/extractor/writer.rb#437
class Apipie::Extractor::OrderedHash < ::ActiveSupport::OrderedHash
  # source://apipie-rails/lib/apipie/extractor/writer.rb#443
  def to_yaml(opts = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#439
  def to_yaml_type; end
end

# source://apipie-rails/lib/apipie/extractor/recorder.rb#3
class Apipie::Extractor::Recorder
  # @return [Recorder] a new instance of Recorder
  #
  # source://apipie-rails/lib/apipie/extractor/recorder.rb#6
  def initialize; end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#25
  def analyse_controller(controller); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#10
  def analyse_env(env); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#30
  def analyse_response(response); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#41
  def analyze_functional_test(test_context); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#115
  def content_disposition(name); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#57
  def parse_data(data); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#131
  def record; end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#102
  def reformat_array(boundary, attrs, key, lines); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#97
  def reformat_boolean(boundary, attrs, key, lines); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#119
  def reformat_data(data); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#85
  def reformat_hash(boundary, attrs, lines); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#64
  def reformat_multipart_data(form); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#109
  def reformat_uploaded_file(boundary, file, key, lines); end

  protected

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#149
  def api_description; end
end

# source://apipie-rails/lib/apipie/extractor/recorder.rb#178
module Apipie::Extractor::Recorder::FunctionalTestRecording
  # action, parameters = nil, session = nil, flash = nil, http_method = 'GET')
  #
  # source://apipie-rails/lib/apipie/extractor/recorder.rb#179
  def process(*_arg0, **_arg1); end
end

# source://apipie-rails/lib/apipie/extractor/recorder.rb#4
Apipie::Extractor::Recorder::MULTIPART_BOUNDARY = T.let(T.unsafe(nil), String)

# source://apipie-rails/lib/apipie/extractor/recorder.rb#152
class Apipie::Extractor::Recorder::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://apipie-rails/lib/apipie/extractor/recorder.rb#153
  def initialize(app); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#167
  def analyze(env, &block); end

  # source://apipie-rails/lib/apipie/extractor/recorder.rb#157
  def call(env); end
end

# source://apipie-rails/lib/apipie/extractor/writer.rb#5
class Apipie::Extractor::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#71
  def initialize(collector); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#81
  def write_docs; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#76
  def write_examples; end

  protected

  # source://apipie-rails/lib/apipie/extractor/writer.rb#117
  def convert_file_value(hash); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#152
  def deep_merge_examples(new_examples, old_examples); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#98
  def desc_to_s(description); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#217
  def hash_nodes_count(node); end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#170
  def load_new_examples; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#193
  def load_old_examples; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#129
  def load_recorded_examples; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#204
  def logger; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#133
  def merge_old_new_examples; end

  # source://apipie-rails/lib/apipie/extractor/writer.rb#102
  def ordered_call(call); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/extractor/writer.rb#208
  def showable_in_doc?(call); end

  class << self
    # source://apipie-rails/lib/apipie/extractor/writer.rb#7
    def compressed; end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#33
    def examples_file; end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#28
    def load_recorded_examples; end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#11
    def update_action_description(controller, action); end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#21
    def write_recorded_examples(examples); end

    protected

    # source://apipie-rails/lib/apipie/extractor/writer.rb#50
    def deserialize_examples(examples_string); end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#60
    def load_json_examples; end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#66
    def logger; end

    # source://apipie-rails/lib/apipie/extractor/writer.rb#44
    def serialize_examples(examples); end
  end
end

# source://apipie-rails/lib/apipie/static_dispatcher.rb#3
class Apipie::FileHandler
  # @return [FileHandler] a new instance of FileHandler
  #
  # source://apipie-rails/lib/apipie/static_dispatcher.rb#4
  def initialize(root); end

  # source://apipie-rails/lib/apipie/static_dispatcher.rb#38
  def cache_extension; end

  # source://apipie-rails/lib/apipie/static_dispatcher.rb#27
  def call(env); end

  # source://apipie-rails/lib/apipie/static_dispatcher.rb#31
  def ext; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/static_dispatcher.rb#10
  def match?(path); end
end

# source://apipie-rails/lib/apipie/generator/swagger/config.rb#4
module Apipie::Generator; end

# Configuration interface for generators
#
# source://apipie-rails/lib/apipie/generator/config.rb#4
class Apipie::Generator::Config
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://apipie-rails/lib/apipie/generator/config.rb#7
  def swagger; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/config.rb#5
module Apipie::Generator::Swagger; end

# The {Apipie::Generator::Swagger::ComputedInterfaceId.id} is a number that is
# uniquely derived from the list of operations added to the swagger definition (in an order-dependent way).
# it can be used for regression testing, allowing some differentiation between changes that
# result from changes to the input and those that result from changes to the generation
# algorithms.
#
# parameter definitions, so it's only partially useful.
#
# @note At the moment, this only takes operation ids into account, and ignores
#
# source://apipie-rails/lib/apipie/generator/swagger/computed_interface_id.rb#9
class Apipie::Generator::Swagger::ComputedInterfaceId
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [ComputedInterfaceId] a new instance of ComputedInterfaceId
  #
  # source://apipie-rails/lib/apipie/generator/swagger/computed_interface_id.rb#12
  def initialize; end

  # source://apipie-rails/lib/apipie/generator/swagger/computed_interface_id.rb#16
  def add!(operation_id); end

  # source://apipie-rails/lib/apipie/generator/swagger/computed_interface_id.rb#20
  def id; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/config.rb#6
class Apipie::Generator::Swagger::Config
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [Config] a new instance of Config
  #
  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#53
  def initialize; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def allow_additional_properties_in_response; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def allow_additional_properties_in_response=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def api_host; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def api_host=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def content_type_input; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def content_type_input=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def generate_x_computed_id_field; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def generate_x_computed_id_field=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def generate_x_computed_id_field?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def global_security; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def global_security=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def include_warning_tags; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def include_warning_tags=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def include_warning_tags?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def json_input_uses_refs; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def json_input_uses_refs=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def json_input_uses_refs?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def responses_use_refs; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def responses_use_refs=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def responses_use_refs?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def schemes; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def schemes=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def security_definitions; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def security_definitions=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def skip_default_tags; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def skip_default_tags=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def skip_default_tags?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def suppress_warnings; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#15
  def suppress_warnings=(_arg0); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_allow_additional_properties_in_response; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_allow_additional_properties_in_response=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_api_host; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_api_host=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_content_type_input; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_content_type_input=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_generate_x_computed_id_field; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_generate_x_computed_id_field=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_generate_x_computed_id_field?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_global_security; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_global_security=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_include_warning_tags; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_include_warning_tags=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_include_warning_tags?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_json_input_uses_refs; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_json_input_uses_refs=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_json_input_uses_refs?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_responses_use_refs; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_responses_use_refs=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_responses_use_refs?; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_schemes; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_schemes=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_security_definitions; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_security_definitions=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_skip_default_tags; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_skip_default_tags=(value); end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#31
  def swagger_suppress_warnings; end

  # source://apipie-rails/lib/apipie/generator/swagger/config.rb#19
  def swagger_suppress_warnings=(value); end

  class << self
    # source://apipie-rails/lib/apipie/generator/swagger/config.rb#68
    def deprecated_methods; end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/config.rb#9
Apipie::Generator::Swagger::Config::CONFIG_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://apipie-rails/lib/apipie/generator/swagger/context.rb#1
class Apipie::Generator::Swagger::Context
  # @return [Context] a new instance of Context
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#5
  def initialize(allow_null:, http_method:, controller_method:, prefix: T.unsafe(nil), default_in_value: T.unsafe(nil), language: T.unsafe(nil), in_schema: T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#31
  def add_to_prefix!(prefix); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#23
  def allow_null?; end

  # Returns the value of attribute controller_method.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#2
  def controller_method; end

  # Returns the value of attribute default_in_value.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#2
  def default_in_value; end

  # Returns the value of attribute http_method.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#2
  def http_method; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#27
  def in_schema?; end

  # Returns the value of attribute language.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#2
  def language; end

  # Returns the value of attribute prefix.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/context.rb#2
  def prefix; end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description.rb#1
module Apipie::Generator::Swagger::MethodDescription; end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/api_decorator.rb#1
class Apipie::Generator::Swagger::MethodDescription::ApiDecorator < ::SimpleDelegator
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_decorator.rb#2
  def normalized_http_method; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_decorator.rb#6
  def summary(method_description:, language:); end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#1
class Apipie::Generator::Swagger::MethodDescription::ApiSchemaService
  # @param method_description [Apipie::Generator::Swagger::MethodDescription::Decorator]
  # @return [ApiSchemaService] a new instance of ApiSchemaService
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#3
  def initialize(method_description, language: T.unsafe(nil)); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#9
  def call; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#67
  def consumes; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#75
  def params_in_body?; end

  # @param api [Apipie::Generator::Swagger::MethodDescription::ApiDecorator]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#80
  def responses(api); end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#38
  def summary(api); end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#49
  def tags; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/api_schema_service.rb#58
  def warning_tags; end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/decorator.rb#1
class Apipie::Generator::Swagger::MethodDescription::Decorator < ::SimpleDelegator
  # @return [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/decorator.rb#3
  def operation_id; end

  # @return [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/decorator.rb#8
  def ruby_name; end

  private

  # @return [Apipie::MethodDescription, nil]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/decorator.rb#19
  def object; end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#1
class Apipie::Generator::Swagger::MethodDescription::ParametersService
  # @param method_description [Apipie::Generator::Swagger::MethodDescription::Decorator]
  # @param path [Apipie::Generator::Swagger::PathDecorator]
  # @param http_method [Symbol]
  # @return [ParametersService] a new instance of ParametersService
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#5
  def initialize(method_description, path:, http_method:); end

  # @return [Array]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#12
  def call; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#71
  def all_params; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#128
  def body_allowed_for_current_method?; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#90
  def body_param_descriptions; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#30
  def body_params_schema; end

  # @return [Array]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#104
  def header_params_schema; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#124
  def params_in_body?; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#96
  def path_param_descriptions; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#18
  def path_params_schema; end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/parameters_service.rb#132
  def warn_path_parameter_not_described(name, path); end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/response_schema_service.rb#1
class Apipie::Generator::Swagger::MethodDescription::ResponseSchemaService
  # @param response_description [Apipie::ResponseDescription, Apipie::ResponseDescriptionAdapter]
  # @return [ResponseSchemaService] a new instance of ResponseSchemaService
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_schema_service.rb#3
  def initialize(response_description, allow_null:, http_method:, controller_method:); end

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_schema_service.rb#10
  def to_swagger; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_schema_service.rb#39
  def type_for_array; end
end

# source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#1
class Apipie::Generator::Swagger::MethodDescription::ResponseService
  # @param method_description [Apipie::Generator::Swagger::MethodDescription::Decorator]
  # @param http_method [Symbol]
  # @return [ResponseService] a new instance of ResponseService
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#4
  def initialize(method_description, http_method:, language:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#11
  def call; end

  private

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#48
  def empty_returns; end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#23
  def errors; end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/method_description/response_service.rb#32
  def responses; end
end

# source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#1
class Apipie::Generator::Swagger::OperationId
  # @return [OperationId] a new instance of OperationId
  #
  # source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#2
  def initialize(path:, http_method:, param: T.unsafe(nil)); end

  # @return [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#9
  def to_s; end

  private

  # Converts an http method like `GET` to `get` Using lowercase http method,
  #   because the 'swagger-codegen' tool outputs strange method names if the
  #   http method is in uppercase
  #
  # @return [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#48
  def normalized_http_method; end

  # Converts an http path for example `/api/concerns/:id` to `_api_concerns_id`
  #
  # @return [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#39
  def path; end

  class << self
    # @param describable [Apipie::MethodDescription::Api, Apipie::MethodDescription]
    # @param param [String, Symbol, nil]
    # @return [Apipie::Generator::Swagger::OperationId]
    #
    # source://apipie-rails/lib/apipie/generator/swagger/operation_id.rb#23
    def from(describable, param: T.unsafe(nil)); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description.rb#1
module Apipie::Generator::Swagger::ParamDescription
  class << self
    # @param method_description [Apipie::MethodDescription]
    # @param name [String]
    # @return [Apipie::ParamDescription]
    #
    # source://apipie-rails/lib/apipie/generator/swagger/param_description.rb#6
    def create_for_missing_param(method_description, name); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#1
class Apipie::Generator::Swagger::ParamDescription::Builder
  # @param param_description [Apipie::ParamDescription]
  # @param in_schema [TrueClass, FalseClass]
  # @param controller_method [Apipie::MethodDescription]
  # @return [Builder] a new instance of Builder
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#5
  def initialize(param_description, in_schema:, controller_method:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#47
  def to_swagger; end

  # @param language [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#20
  def with_description(language:); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#35
  def with_in(http_method:, default_in_value: T.unsafe(nil)); end

  # @param prefix [String, nil]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#12
  def with_name(prefix: T.unsafe(nil)); end

  # @param with_null [TrueClass, FalseClass]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#28
  def with_type(with_null:); end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#73
  def for_default; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#65
  def for_required; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#81
  def required?; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#85
  def required_from_path?; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/builder.rb#89
  def warn_optional_without_default_value(definition); end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#1
class Apipie::Generator::Swagger::ParamDescription::Composite
  # @param param_descriptions [Array<Apipie::ParamDescription>]
  # @param context [Apipie::Generator::Swagger::Context]
  # @return [Composite] a new instance of Composite
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#4
  def initialize(param_descriptions, context); end

  # @param param_type [Symbol, String]
  # @return [Apipie::Generator::Swagger::ParamDescription::ReferencedComposite]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#91
  def referenced(param_type); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#14
  def to_swagger; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#98
  def for_array(schema); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#114
  def validate(param_description); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/composite.rb#105
  def with_null(schema); end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/description.rb#1
class Apipie::Generator::Swagger::ParamDescription::Description
  # @return [Description] a new instance of Description
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/description.rb#2
  def initialize(param_description, language:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/description.rb#8
  def to_hash; end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#1
class Apipie::Generator::Swagger::ParamDescription::In
  # @return [In] a new instance of In
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#7
  def initialize(param_description, in_schema:, default_in_value:, http_method:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#15
  def to_hash; end

  private

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#34
  def body_allowed_for_current_method?; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#24
  def in_value; end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/in.rb#2
Apipie::Generator::Swagger::ParamDescription::In::IN_KEYWORD_DEFAULT_VALUES = T.let(T.unsafe(nil), Hash)

# source://apipie-rails/lib/apipie/generator/swagger/param_description/name.rb#1
class Apipie::Generator::Swagger::ParamDescription::Name
  # @return [Name] a new instance of Name
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/name.rb#2
  def initialize(param_description, prefixed_by: T.unsafe(nil)); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/name.rb#8
  def to_hash; end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/path_params_composite.rb#1
class Apipie::Generator::Swagger::ParamDescription::PathParamsComposite
  # @param param_descriptions [Array<Apipie::ParamDescription>]
  # @param context [Apipie::Generator::Swagger::Context]
  # @return [PathParamsComposite] a new instance of PathParamsComposite
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/path_params_composite.rb#4
  def initialize(param_descriptions, context); end

  # @return [Array]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/path_params_composite.rb#11
  def to_swagger; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/path_params_composite.rb#54
  def warn_param_ignored_in_form_data(name); end
end

# A Composite that keeps track when a param description has been added to references
#   and returns the reference instead of the complete object
#
# source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#3
class Apipie::Generator::Swagger::ParamDescription::ReferencedComposite
  # @param composite [Apipie::Generator::Swagger::ParamDescription::Composite]
  # @param param_type [Symbol, String]
  # @return [ReferencedComposite] a new instance of ReferencedComposite
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#6
  def initialize(composite, param_type); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#11
  def to_swagger; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#29
  def add(schema); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#33
  def added?(name); end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/referenced_composite.rb#25
  def ref_to(name); end
end

# source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#1
class Apipie::Generator::Swagger::ParamDescription::Type
  # @return [Type] a new instance of Type
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#2
  def initialize(param_description, with_null:, controller_method:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#9
  def to_hash; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#57
  def for_array_type; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#83
  def for_enum_type; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#90
  def for_object_type; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#46
  def params_in_body_use_reference?; end

  # @return [Apipie::Generator::Swagger::Type, String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#51
  def type; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#97
  def validator; end

  # source://apipie-rails/lib/apipie/generator/swagger/param_description/type.rb#101
  def warn_hash_without_internal_typespec; end
end

# source://apipie-rails/lib/apipie/generator/swagger/path_decorator.rb#1
class Apipie::Generator::Swagger::PathDecorator < ::SimpleDelegator
  # @param param_name [Symbol]
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/path_decorator.rb#7
  def param?(param_name); end

  # source://apipie-rails/lib/apipie/generator/swagger/path_decorator.rb#2
  def param_names; end

  # @param controller_method [String]
  # @return [Apipie::Generator::Swagger::PathDecorator]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/path_decorator.rb#14
  def swagger_path(controller_method = T.unsafe(nil)); end

  private

  # @param controller_method [String]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/path_decorator.rb#29
  def warn_for_missing_slash(controller_method); end
end

# source://apipie-rails/lib/apipie/generator/swagger/referenced_definitions.rb#1
class Apipie::Generator::Swagger::ReferencedDefinitions
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [ReferencedDefinitions] a new instance of ReferencedDefinitions
  #
  # source://apipie-rails/lib/apipie/generator/swagger/referenced_definitions.rb#6
  def initialize; end

  # source://apipie-rails/lib/apipie/generator/swagger/referenced_definitions.rb#10
  def add!(param_type, schema); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/referenced_definitions.rb#14
  def added?(name); end

  # Returns the value of attribute definitions.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/referenced_definitions.rb#4
  def definitions; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/resource_description_composite.rb#1
class Apipie::Generator::Swagger::ResourceDescriptionComposite
  # @param resource_descriptions [Array<Apipie::ResourceDescription>]
  # @return [ResourceDescriptionComposite] a new instance of ResourceDescriptionComposite
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_composite.rb#3
  def initialize(resource_descriptions, language:); end

  # @return [Hash]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_composite.rb#36
  def paths; end

  # @return [Array]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_composite.rb#17
  def tags; end

  # @return [Hash{Symbol->Array | Hash] ]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_composite.rb#9
  def to_swagger; end
end

# source://apipie-rails/lib/apipie/generator/swagger/resource_description_collection.rb#1
class Apipie::Generator::Swagger::ResourceDescriptionsCollection
  # @param ] [Hash{String->Apipie::ResourceDescription] resource_descriptions
  # @return [ResourceDescriptionsCollection] a new instance of ResourceDescriptionsCollection
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_collection.rb#3
  def initialize(resource_descriptions); end

  # @return [Array<Apipie::ResourceDescription>]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/resource_description_collection.rb#8
  def filter(version:, resource_id:, method_name: T.unsafe(nil)); end
end

# source://apipie-rails/lib/apipie/generator/swagger/schema.rb#1
class Apipie::Generator::Swagger::Schema
  # @param resource_descriptions [Array<Apipie::ResourceDescription>]
  # @return [Schema] a new instance of Schema
  #
  # source://apipie-rails/lib/apipie/generator/swagger/schema.rb#3
  def initialize(resource_descriptions, version:, language:, clear_warnings:); end

  # source://apipie-rails/lib/apipie/generator/swagger/schema.rb#26
  def generate; end

  private

  # source://apipie-rails/lib/apipie/generator/swagger/schema.rb#58
  def tags_and_paths; end
end

# source://apipie-rails/lib/apipie/generator/swagger/type.rb#1
class Apipie::Generator::Swagger::Type
  # @return [Type] a new instance of Type
  #
  # source://apipie-rails/lib/apipie/generator/swagger/type.rb#4
  def initialize(type, str_format = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/generator/swagger/type.rb#13
  def ==(other); end

  # Returns the value of attribute str_format.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/type.rb#2
  def str_format; end

  # source://apipie-rails/lib/apipie/generator/swagger/type.rb#9
  def to_s; end
end

# source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#1
class Apipie::Generator::Swagger::TypeExtractor
  # @param validator [Apipie::Validator::BaseValidator, ResponseDescriptionAdapter::PropDesc::Validator, nil]
  # @return [TypeExtractor] a new instance of TypeExtractor
  #
  # source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#24
  def initialize(validator); end

  # source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#28
  def extract; end

  private

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#47
  def enum?; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#43
  def string?; end
end

# source://apipie-rails/lib/apipie/generator/swagger/type_extractor.rb#2
Apipie::Generator::Swagger::TypeExtractor::TYPES = T.let(T.unsafe(nil), Hash)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#1
class Apipie::Generator::Swagger::Warning
  # @return [Warning] a new instance of Warning
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#35
  def initialize(code, info_message, method_id); end

  # Returns the value of attribute code.
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#33
  def code; end

  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#41
  def id; end

  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#49
  def warn; end

  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#53
  def warn_through_writer; end

  # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#45
  def warning_message; end

  class << self
    # @param code [Integer]
    # @param message_attributes [Hash]
    # @return [Apipie::Generator::Swagger::Warning]
    #
    # source://apipie-rails/lib/apipie/generator/swagger/warning.rb#61
    def for_code(code, method_id, message_attributes = T.unsafe(nil)); end
  end
end

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#3
Apipie::Generator::Swagger::Warning::ADDED_MISSING_SLASH_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#11
Apipie::Generator::Swagger::Warning::CODES = T.let(T.unsafe(nil), Hash)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#5
Apipie::Generator::Swagger::Warning::HASH_WITHOUT_INTERNAL_TYPESPEC_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#22
Apipie::Generator::Swagger::Warning::MESSAGES = T.let(T.unsafe(nil), Hash)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#2
Apipie::Generator::Swagger::Warning::MISSING_METHOD_SUMMARY_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#4
Apipie::Generator::Swagger::Warning::NO_RETURN_CODES_SPECIFIED_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#6
Apipie::Generator::Swagger::Warning::OPTIONAL_PARAM_IN_PATH_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#7
Apipie::Generator::Swagger::Warning::OPTIONAL_WITHOUT_DEFAULT_VALUE_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#8
Apipie::Generator::Swagger::Warning::PARAM_IGNORED_IN_FORM_DATA_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning.rb#9
Apipie::Generator::Swagger::Warning::PATH_PARAM_NOT_DESCRIBED_CODE = T.let(T.unsafe(nil), Integer)

# source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#1
class Apipie::Generator::Swagger::WarningWriter
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [WarningWriter] a new instance of WarningWriter
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#4
  def initialize; end

  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#21
  def clear!; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#17
  def issued_warnings?; end

  # @param warning [Apipie::Generator::Swagger::Warning]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#9
  def warn(warning); end

  private

  # @param warning [Apipie::Generator::Swagger::Warning]
  # @return [TrueClass, FalseClass]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#32
  def muted_warning?(warning); end

  # @return [TrueClass, FalseClass]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#46
  def suppress_warnings?; end

  # @return [FalseClass, TrueClass, Array]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#51
  def suppress_warnings_config; end

  # @param warning_number [Integer]
  # @return [TrueClass, FalseClass]
  #
  # source://apipie-rails/lib/apipie/generator/swagger/warning_writer.rb#41
  def suppressed_warning?(warning_number); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://apipie-rails/lib/apipie/helpers.rb#2
module Apipie::Helpers
  # source://apipie-rails/lib/apipie/helpers.rb#22
  def full_url(path); end

  # source://apipie-rails/lib/apipie/helpers.rb#35
  def include_javascripts; end

  # source://apipie-rails/lib/apipie/helpers.rb#44
  def include_stylesheets; end

  # source://apipie-rails/lib/apipie/helpers.rb#52
  def label_class_for_error(err); end

  # source://apipie-rails/lib/apipie/helpers.rb#3
  def markup_to_html(text); end

  # source://apipie-rails/lib/apipie/helpers.rb#14
  def request_script_name; end

  # source://apipie-rails/lib/apipie/helpers.rb#18
  def request_script_name=(script_name); end

  # Returns the value of attribute url_prefix.
  #
  # source://apipie-rails/lib/apipie/helpers.rb#12
  def url_prefix; end

  # Sets the attribute url_prefix
  #
  # @param value the value to set the attribute url_prefix to.
  #
  # source://apipie-rails/lib/apipie/helpers.rb#12
  def url_prefix=(_arg0); end
end

# source://apipie-rails/lib/apipie/markup.rb#3
module Apipie::Markup; end

# source://apipie-rails/lib/apipie/markup.rb#27
class Apipie::Markup::Markdown
  # @return [Markdown] a new instance of Markdown
  #
  # source://apipie-rails/lib/apipie/markup.rb#29
  def initialize; end

  # source://apipie-rails/lib/apipie/markup.rb#33
  def to_html(text); end
end

# source://apipie-rails/lib/apipie/markup.rb#5
class Apipie::Markup::RDoc
  # @return [RDoc] a new instance of RDoc
  #
  # source://apipie-rails/lib/apipie/markup.rb#7
  def initialize; end

  # source://apipie-rails/lib/apipie/markup.rb#12
  def to_html(text); end

  private

  # source://apipie-rails/lib/apipie/markup.rb#18
  def rdoc; end
end

# source://apipie-rails/lib/apipie/markup.rb#39
class Apipie::Markup::Textile
  # @return [Textile] a new instance of Textile
  #
  # source://apipie-rails/lib/apipie/markup.rb#41
  def initialize; end

  # source://apipie-rails/lib/apipie/markup.rb#45
  def to_html(text); end
end

# source://apipie-rails/lib/apipie/method_description.rb#2
class Apipie::MethodDescription
  # @return [MethodDescription] a new instance of MethodDescription
  #
  # source://apipie-rails/lib/apipie/method_description.rb#6
  def initialize(method, resource, dsl_data); end

  # Returns the value of attribute apis.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def apis; end

  # source://apipie-rails/lib/apipie/method_description.rb#133
  def create_api_url(api); end

  # source://apipie-rails/lib/apipie/method_description.rb#125
  def doc_url; end

  # source://apipie-rails/lib/apipie/method_description.rb#104
  def errors; end

  # Returns the value of attribute examples.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def examples; end

  # Returns the value of attribute formats.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#157
  def formats; end

  # was the description defines in a module instead of directly in controller?
  #
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/method_description.rb#180
  def from_concern?; end

  # Returns the value of attribute full_description.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def full_description; end

  # Returns the value of attribute headers.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def headers; end

  # source://apipie-rails/lib/apipie/method_description.rb#48
  def id; end

  # Returns the value of attribute metadata.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#4
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value the value to set the attribute metadata to.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#4
  def metadata=(_arg0); end

  # Returns the value of attribute method.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def method; end

  # source://apipie-rails/lib/apipie/method_description.rb#142
  def method_apis_to_json(lang = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/method_description.rb#184
  def method_name; end

  # source://apipie-rails/lib/apipie/method_description.rb#52
  def params; end

  # source://apipie-rails/lib/apipie/method_description.rb#60
  def params_ordered; end

  # source://apipie-rails/lib/apipie/method_description.rb#56
  def params_ordered_self; end

  # Returns the value of attribute resource.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def resource; end

  # source://apipie-rails/lib/apipie/method_description.rb#89
  def returns; end

  # source://apipie-rails/lib/apipie/method_description.rb#76
  def returns_self; end

  # Returns the value of attribute see.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#153
  def see; end

  # Returns the value of attribute show.
  #
  # source://apipie-rails/lib/apipie/method_description.rb#3
  def show; end

  # source://apipie-rails/lib/apipie/method_description.rb#80
  def tag_list; end

  # source://apipie-rails/lib/apipie/method_description.rb#161
  def to_json(lang = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/method_description.rb#121
  def version; end

  private

  # source://apipie-rails/lib/apipie/method_description.rb#219
  def format_example(ex); end

  # source://apipie-rails/lib/apipie/method_description.rb#210
  def format_example_data(data); end

  # source://apipie-rails/lib/apipie/method_description.rb#202
  def load_recorded_examples; end

  # source://apipie-rails/lib/apipie/method_description.rb#190
  def merge_params(params, new_params); end

  # source://apipie-rails/lib/apipie/method_description.rb#196
  def merge_returns(returns, new_returns); end
end

# source://apipie-rails/lib/apipie/method_description/api.rb#1
class Apipie::MethodDescription::Api
  # @return [Api] a new instance of Api
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#5
  def initialize(method, path, desc, options); end

  # Returns the value of attribute from_routes.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def from_routes; end

  # Sets the attribute from_routes
  #
  # @param value the value to set the attribute from_routes to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def from_routes=(_arg0); end

  # Returns the value of attribute http_method.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def http_method; end

  # Sets the attribute http_method
  #
  # @param value the value to set the attribute http_method to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def http_method=(_arg0); end

  # Returns the value of attribute options.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def options=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def path=(_arg0); end

  # Returns the value of attribute returns.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def returns; end

  # Sets the attribute returns
  #
  # @param value the value to set the attribute returns to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def returns=(_arg0); end

  # Returns the value of attribute short_description.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def short_description; end

  # Sets the attribute short_description
  #
  # @param value the value to set the attribute short_description to.
  #
  # source://apipie-rails/lib/apipie/method_description/api.rb#2
  def short_description=(_arg0); end
end

# Service that builds the appropriate Apipie::MethodDescription::Api
# required by Apipie::MethodDescription
#
# source://apipie-rails/lib/apipie/method_description/apis_service.rb#4
class Apipie::MethodDescription::ApisService
  # @param resource [Apipie::ResourceDescription]
  # @param controller_action [Symbol]
  # @param dsl [Hash]
  # @return [ApisService] a new instance of ApisService
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#8
  def initialize(resource, controller_action, dsl); end

  # @return [Array<Apipie::MethodDescription::Api>]
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#15
  def call; end

  private

  # @return [Array<Array>]
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#39
  def api_args; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#56
  def api_from_routes?; end

  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#28
  def concern_subst(path); end

  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#64
  def description; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#60
  def from_concern?; end

  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#68
  def options; end

  # @return [Array<Hash>]
  #
  # source://apipie-rails/lib/apipie/method_description/apis_service.rb#73
  def routes; end
end

# source://apipie-rails/lib/apipie/errors.rb#81
class Apipie::NoDocumentedMethod < ::Apipie::Error
  # @return [NoDocumentedMethod] a new instance of NoDocumentedMethod
  #
  # source://apipie-rails/lib/apipie/errors.rb#82
  def initialize(controller_name, method_name); end
end

# method parameter description
#
# name - method name (show)
# desc - description
# required - boolean if required
# validator - Validator::BaseValidator subclass
#
# source://apipie-rails/lib/apipie/param_description.rb#9
class Apipie::ParamDescription
  # @raise [ArgumentError]
  # @return [ParamDescription] a new instance of ParamDescription
  #
  # source://apipie-rails/lib/apipie/param_description.rb#42
  def initialize(method_description, name, validator, desc_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # source://apipie-rails/lib/apipie/param_description.rb#33
  def ==(other); end

  # action awareness is being inherited from ancestors (in terms of
  # nested params)
  #
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/param_description.rb#225
  def action_aware?; end

  # makes modification that are based on the action that the param
  # is defined for. Typical for required and allow_nil variations in
  # crate/update actions.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#249
  def action_awareness; end

  # Returns the value of attribute additional_properties.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#12
  def additional_properties; end

  # Returns the value of attribute allow_blank.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def allow_blank; end

  # Returns the value of attribute allow_nil.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def allow_nil; end

  # Returns the value of attribute as.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def as; end

  # source://apipie-rails/lib/apipie/param_description.rb#235
  def as_action; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/param_description.rb#130
  def blank_forbidden?; end

  # source://apipie-rails/lib/apipie/param_description.rb#264
  def concern_subst(string); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/param_description.rb#293
  def deprecated?; end

  # source://apipie-rails/lib/apipie/param_description.rb#297
  def deprecation; end

  # Returns the value of attribute desc.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def desc; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/param_description.rb#105
  def from_concern?; end

  # source://apipie-rails/lib/apipie/param_description.rb#143
  def full_name; end

  # Returns the value of attribute is_array.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#12
  def is_array; end

  # Returns the value of attribute is_array.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#12
  def is_array?; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/param_description.rb#281
  def is_required?; end

  # source://apipie-rails/lib/apipie/param_description.rb#186
  def merge_with(other_param_desc); end

  # Returns the value of attribute metadata.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def metadata; end

  # Returns the value of attribute method_description.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def method_description; end

  # Returns the value of attribute name.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def name; end

  # source://apipie-rails/lib/apipie/param_description.rb#109
  def normalized_value(value); end

  # Returns the value of attribute options.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def options; end

  # Returns the value of attribute parent.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#13
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#13
  def parent=(_arg0); end

  # returns an array of all the parents: starting with the root parent
  # ending with itself
  #
  # source://apipie-rails/lib/apipie/param_description.rb#151
  def parents_and_self; end

  # source://apipie-rails/lib/apipie/param_description.rb#277
  def preformat_text(text); end

  # source://apipie-rails/lib/apipie/param_description.rb#134
  def process_value(value); end

  # Returns the value of attribute request_only.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def request_only; end

  # Returns the value of attribute request_only.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def request_only?; end

  # Returns the value of attribute required.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#13
  def required; end

  # Sets the attribute required
  #
  # @param value the value to set the attribute required to.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#13
  def required=(_arg0); end

  # Returns the value of attribute response_only.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def response_only; end

  # Returns the value of attribute response_only.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def response_only?; end

  # Returns the value of attribute show.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def show; end

  # source://apipie-rails/lib/apipie/param_description.rb#160
  def to_json(lang = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/param_description.rb#29
  def to_s; end

  # source://apipie-rails/lib/apipie/param_description.rb#119
  def validate(value); end

  # Returns the value of attribute validations.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def validations; end

  # Returns the value of attribute validator.
  #
  # source://apipie-rails/lib/apipie/param_description.rb#11
  def validator; end

  class << self
    # source://apipie-rails/lib/apipie/param_description.rb#19
    def from_dsl_data(method_description, args); end

    # source://apipie-rails/lib/apipie/param_description.rb#215
    def merge(target_params, source_params); end

    # merge param descriptions. Allows defining hash params on more places
    # (e.g. in param_groups). For example:
    #
    #     def_param_group :user do
    #       param :user, Hash do
    #         param :name, String
    #       end
    #     end
    #
    #     param_group :user
    #     param :user, Hash do
    #       param :password, String
    #     end
    #
    # source://apipie-rails/lib/apipie/param_description.rb#208
    def unify(params); end
  end
end

# Data transfer object, used when param description is deprecated
#
# source://apipie-rails/lib/apipie/param_description/deprecation.rb#6
class Apipie::ParamDescription::Deprecation
  # @return [Deprecation] a new instance of Deprecation
  #
  # source://apipie-rails/lib/apipie/param_description/deprecation.rb#9
  def initialize(info: T.unsafe(nil), deprecated_in: T.unsafe(nil), sunset_at: T.unsafe(nil)); end

  # Returns the value of attribute deprecated_in.
  #
  # source://apipie-rails/lib/apipie/param_description/deprecation.rb#7
  def deprecated_in; end

  # Returns the value of attribute info.
  #
  # source://apipie-rails/lib/apipie/param_description/deprecation.rb#7
  def info; end

  # Returns the value of attribute sunset_at.
  #
  # source://apipie-rails/lib/apipie/param_description/deprecation.rb#7
  def sunset_at; end

  # source://apipie-rails/lib/apipie/param_description/deprecation.rb#15
  def to_json(*_args); end
end

# source://apipie-rails/lib/apipie/errors.rb#6
class Apipie::ParamError < ::Apipie::Error; end

# source://apipie-rails/lib/apipie/errors.rb#61
class Apipie::ParamInvalid < ::Apipie::DefinedParamError
  # @return [ParamInvalid] a new instance of ParamInvalid
  #
  # source://apipie-rails/lib/apipie/errors.rb#64
  def initialize(param, value, error); end

  # Returns the value of attribute error.
  #
  # source://apipie-rails/lib/apipie/errors.rb#62
  def error; end

  # Sets the attribute error
  #
  # @param value the value to set the attribute error to.
  #
  # source://apipie-rails/lib/apipie/errors.rb#62
  def error=(_arg0); end

  # source://apipie-rails/lib/apipie/errors.rb#70
  def to_s; end

  # Returns the value of attribute value.
  #
  # source://apipie-rails/lib/apipie/errors.rb#62
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://apipie-rails/lib/apipie/errors.rb#62
  def value=(_arg0); end
end

# source://apipie-rails/lib/apipie/errors.rb#41
class Apipie::ParamMissing < ::Apipie::DefinedParamError
  # source://apipie-rails/lib/apipie/errors.rb#42
  def to_s; end
end

# source://apipie-rails/lib/apipie/errors.rb#27
class Apipie::ParamMultipleMissing < ::Apipie::ParamError
  # @return [ParamMultipleMissing] a new instance of ParamMultipleMissing
  #
  # source://apipie-rails/lib/apipie/errors.rb#30
  def initialize(params); end

  # Returns the value of attribute params.
  #
  # source://apipie-rails/lib/apipie/errors.rb#28
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://apipie-rails/lib/apipie/errors.rb#28
  def params=(_arg0); end

  # source://apipie-rails/lib/apipie/errors.rb#34
  def to_s; end
end

# source://apipie-rails/lib/apipie/railtie.rb#2
class Apipie::Railtie < ::Rails::Railtie; end

# Resource description
#
# version - api version (1)
# description
# path - relative path (/api/articles)
# methods - array of keys to Apipie.method_descriptions (array of Apipie::MethodDescription)
# name - human readable alias of resource (Articles)
# id - resource name
# formats - acceptable request/response format types
# headers - array of headers
# deprecated - boolean indicating if resource is deprecated
#
# source://apipie-rails/lib/apipie/resource_description.rb#14
class Apipie::ResourceDescription
  # @return [ResourceDescription] a new instance of ResourceDescription
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#20
  def initialize(controller, id, dsl_data = T.unsafe(nil), version = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/resource_description.rb#60
  def _api_base_url; end

  # Returns the value of attribute _deprecated.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _deprecated; end

  # Returns the value of attribute _errors_args.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _errors_args; end

  # Returns the value of attribute _formats.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _formats; end

  # Returns the value of attribute _full_description.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _full_description; end

  # Returns the value of attribute _headers.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _headers; end

  # Returns the value of attribute _id.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _id; end

  # Returns the value of attribute _metadata.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _metadata; end

  # Returns the value of attribute _methods.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _methods; end

  # source://apipie-rails/lib/apipie/resource_description.rb#64
  def _name; end

  # Returns the value of attribute _params_args.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _params_args; end

  # Returns the value of attribute _parent.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _parent; end

  # Returns the value of attribute _path.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _path; end

  # Returns the value of attribute _returns_args.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _returns_args; end

  # Returns the value of attribute _short_description.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _short_description; end

  # Returns the value of attribute _tag_list_arg.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def _tag_list_arg; end

  # source://apipie-rails/lib/apipie/resource_description.rb#56
  def _version; end

  # source://apipie-rails/lib/apipie/resource_description.rb#78
  def add_method_description(method_description); end

  # source://apipie-rails/lib/apipie/resource_description.rb#104
  def api_url; end

  # Returns the value of attribute controller.
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#16
  def controller; end

  # source://apipie-rails/lib/apipie/resource_description.rb#97
  def doc_url; end

  # source://apipie-rails/lib/apipie/resource_description.rb#83
  def method_description(method_name); end

  # source://apipie-rails/lib/apipie/resource_description.rb#93
  def method_descriptions; end

  # source://apipie-rails/lib/apipie/resource_description.rb#64
  def name; end

  # source://apipie-rails/lib/apipie/resource_description.rb#87
  def remove_method_description(method_name); end

  # source://apipie-rails/lib/apipie/resource_description.rb#112
  def to_json(method_name = T.unsafe(nil), lang = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/resource_description.rb#36
  def update_from_dsl_data(dsl_data); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/resource_description.rb#108
  def valid_method_name?(method_name); end

  protected

  # source://apipie-rails/lib/apipie/resource_description.rb#141
  def resource_name; end

  private

  # source://apipie-rails/lib/apipie/resource_description.rb#147
  def default_name; end
end

# source://apipie-rails/lib/apipie/response_description.rb#3
class Apipie::ResponseDescription
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Param

  # @raise [ReturnsMultipleDefinitionError]
  # @return [ResponseDescription] a new instance of ResponseDescription
  #
  # source://apipie-rails/lib/apipie/response_description.rb#76
  def initialize(method_description, code, options, scope, block, adapter); end

  # source://apipie-rails/lib/apipie/response_description.rb#116
  def additional_properties; end

  # source://apipie-rails/lib/apipie/response_description.rb#116
  def allow_additional_properties; end

  # Returns the value of attribute code.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def code; end

  # Returns the value of attribute description.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def description; end

  # Returns the value of attribute hash_validator.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def hash_validator; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/response_description.rb#67
  def is_array?; end

  # Returns the value of attribute is_array_of.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def is_array_of; end

  # source://apipie-rails/lib/apipie/response_description.rb#108
  def param_description; end

  # source://apipie-rails/lib/apipie/response_description.rb#112
  def params_ordered; end

  # Returns the value of attribute scope.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def scope; end

  # source://apipie-rails/lib/apipie/response_description.rb#121
  def to_json(lang = T.unsafe(nil)); end

  # Returns the value of attribute type_ref.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#54
  def type_ref; end

  # source://apipie-rails/lib/apipie/response_description.rb#71
  def typename; end

  class << self
    # source://apipie-rails/lib/apipie/response_description.rb#56
    def from_dsl_data(method_description, code, args); end
  end
end

# source://apipie-rails/lib/apipie/response_description.rb#4
class Apipie::ResponseDescription::ResponseObject
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Param

  # @return [ResponseObject] a new instance of ResponseObject
  #
  # source://apipie-rails/lib/apipie/response_description.rb#10
  def initialize(method_description, scope, block, typename); end

  # this routine overrides Param#_default_param_group_scope and is called if Param#param_group is
  # invoked during the instance_exec call in ResponseObject#initialize
  #
  # source://apipie-rails/lib/apipie/response_description.rb#24
  def _default_param_group_scope; end

  # Returns the value of attribute additional_properties.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#8
  def additional_properties; end

  # Sets the attribute additional_properties
  #
  # @param value the value to set the attribute additional_properties to.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#8
  def additional_properties=(_arg0); end

  # source://apipie-rails/lib/apipie/response_description.rb#28
  def name; end

  # source://apipie-rails/lib/apipie/response_description.rb#32
  def params_ordered; end

  # source://apipie-rails/lib/apipie/response_description.rb#40
  def prepare_hash_params; end

  # Returns the value of attribute typename.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#8
  def typename; end

  # Sets the attribute typename
  #
  # @param value the value to set the attribute typename to.
  #
  # source://apipie-rails/lib/apipie/response_description.rb#8
  def typename=(_arg0); end
end

# ======================================================================
#
# source://apipie-rails/lib/apipie/response_description_adapter.rb#11
class Apipie::ResponseDescriptionAdapter
  # @return [ResponseDescriptionAdapter] a new instance of ResponseDescriptionAdapter
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#157
  def initialize(typename); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#173
  def add(prop_desc); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#184
  def add_property_descriptions(prop_descs); end

  # Returns the value of attribute additional_properties.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#163
  def additional_properties; end

  # Sets the attribute additional_properties
  #
  # @param value the value to set the attribute additional_properties to.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#163
  def additional_properties=(_arg0); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#165
  def allow_additional_properties; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#198
  def is_array?; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#194
  def params_ordered; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#190
  def property(name, expected_type, options); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#169
  def to_json; end

  # Returns the value of attribute typename.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#163
  def typename; end

  # Sets the attribute typename
  #
  # @param value the value to set the attribute typename to.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#163
  def typename=(_arg0); end

  class << self
    # source://apipie-rails/lib/apipie/response_description_adapter.rb#150
    def from_self_describing_class(cls); end
  end
end

# source://apipie-rails/lib/apipie/response_description_adapter.rb#18
class Apipie::ResponseDescriptionAdapter::AdditionalPropertiesModifier < ::Apipie::ResponseDescriptionAdapter::Modifier
  # @return [AdditionalPropertiesModifier] a new instance of AdditionalPropertiesModifier
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#19
  def initialize(additional_properties_allowed); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#23
  def apply(adapter); end
end

# source://apipie-rails/lib/apipie/response_description_adapter.rb#12
class Apipie::ResponseDescriptionAdapter::Modifier
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#13
  def apply(adapter); end
end

# A ResponseDescriptionAdapter::PropDesc object pretends to be an Apipie::Param in a ResponseDescription
#
# To successfully masquerade as such, it needs to:
#    respond_to?('name') and/or ['name'] returning the name of the parameter
#    respond_to?('required') and/or ['required'] returning boolean
#    respond_to?('additional_properties') and/or ['additional_properties'] returning boolean
#    respond_to?('validator') and/or ['validator'] returning 'nil' (so type is 'string'), or an object that:
#           1) describes a type.  currently type is inferred as follows:
#                 if validator.is_a? Apipie::Validator::EnumValidator -->  respond_to? 'values' (returns array).  Type is enum or boolean
#                 else: use v.expected_type().  This is expected to be the swagger type, or:
#                     numeric ==> swagger type is 'number'
#                     hash ==> swagger type is 'object' and validator should respond_to? 'params_ordered'
#                     array ==> swagger type is array and validator (FUTURE) should indicate type of element
#
# source://apipie-rails/lib/apipie/response_description_adapter.rb#47
class Apipie::ResponseDescriptionAdapter::PropDesc
  # @return [PropDesc] a new instance of PropDesc
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#87
  def initialize(name, expected_type, options = T.unsafe(nil), sub_properties = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#104
  def [](key); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#108
  def add_sub_property(prop_desc); end

  # Returns the value of attribute additional_properties.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#132
  def additional_properties; end

  # Sets the attribute additional_properties
  #
  # @param value the value to set the attribute additional_properties to.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#132
  def additional_properties=(_arg0); end

  # Returns the value of attribute description.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def desc; end

  # Returns the value of attribute description.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def description; end

  # Returns the value of attribute expected_type.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def expected_type; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#136
  def is_array?; end

  # Returns the value of attribute name.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def name; end

  # Returns the value of attribute options.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def options; end

  # Returns the value of attribute required.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#131
  def required; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#120
  def to_json(lang); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#49
  def to_s; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#140
  def validator; end
end

# a ResponseDescriptionAdapter::PropDesc::Validator pretends to be an Apipie::Validator
#
# source://apipie-rails/lib/apipie/response_description_adapter.rb#56
class Apipie::ResponseDescriptionAdapter::PropDesc::Validator
  # @return [Validator] a new instance of Validator
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#63
  def initialize(expected_type, enum_values = T.unsafe(nil), sub_properties = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#59
  def [](key); end

  # Returns the value of attribute expected_type.
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#57
  def expected_type; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/response_description_adapter.rb#70
  def is_enum?; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#78
  def params_ordered; end

  # source://apipie-rails/lib/apipie/response_description_adapter.rb#74
  def values; end
end

# source://apipie-rails/lib/apipie/errors.rb#75
class Apipie::ResponseDoesNotMatchSwaggerSchema < ::Apipie::Error
  # @return [ResponseDoesNotMatchSwaggerSchema] a new instance of ResponseDoesNotMatchSwaggerSchema
  #
  # source://apipie-rails/lib/apipie/errors.rb#76
  def initialize(controller_name, method_name, response_code, error_messages, schema, returned_object); end
end

# source://apipie-rails/lib/apipie/errors.rb#12
class Apipie::ReturnsMultipleDefinitionError < ::Apipie::Error
  # source://apipie-rails/lib/apipie/errors.rb#13
  def to_s; end
end

# source://apipie-rails/lib/apipie/routes_formatter.rb#2
class Apipie::RoutesFormatter
  # source://apipie-rails/lib/apipie/routes_formatter.rb#18
  def format_path(rails_route); end

  # source://apipie-rails/lib/apipie/routes_formatter.rb#11
  def format_route(rails_route, args); end

  # The entry method called by Apipie to extract the array
  # representing the api dsl from the routes definition.
  #
  # source://apipie-rails/lib/apipie/routes_formatter.rb#7
  def format_routes(rails_routes, args); end

  # source://apipie-rails/lib/apipie/routes_formatter.rb#22
  def format_verb(rails_route); end
end

# source://apipie-rails/lib/apipie/routes_formatter.rb#3
Apipie::RoutesFormatter::API_METHODS = T.let(T.unsafe(nil), Array)

# source://apipie-rails/lib/apipie/routing.rb#2
module Apipie::Routing; end

# source://apipie-rails/lib/apipie/routing.rb#3
module Apipie::Routing::MapperExtensions
  # source://apipie-rails/lib/apipie/routing.rb#4
  def apipie(options = T.unsafe(nil)); end
end

# source://apipie-rails/lib/apipie/see_description.rb#3
class Apipie::SeeDescription
  # @return [SeeDescription] a new instance of SeeDescription
  #
  # source://apipie-rails/lib/apipie/see_description.rb#7
  def initialize(args); end

  # Returns the value of attribute description.
  #
  # source://apipie-rails/lib/apipie/see_description.rb#5
  def description; end

  # Returns the value of attribute link.
  #
  # source://apipie-rails/lib/apipie/see_description.rb#5
  def link; end

  # source://apipie-rails/lib/apipie/see_description.rb#29
  def see_url; end

  # source://apipie-rails/lib/apipie/see_description.rb#25
  def to_json; end
end

# source://apipie-rails/lib/apipie/static_dispatcher.rb#48
class Apipie::StaticDispatcher
  # Dispatches the static files. Similar to ActionDispatch::Static, but
  # it supports different baseurl configurations
  #
  # @return [StaticDispatcher] a new instance of StaticDispatcher
  #
  # source://apipie-rails/lib/apipie/static_dispatcher.rb#51
  def initialize(app, path); end

  # source://apipie-rails/lib/apipie/static_dispatcher.rb#56
  def call(env); end
end

# source://apipie-rails/lib/apipie/swagger_generator.rb#2
class Apipie::SwaggerGenerator
  class << self
    # @param Array<Apipie::ResourceDescription] [Array<Apipie::ResourceDescription] resources] resources
    #
    # source://apipie-rails/lib/apipie/swagger_generator.rb#4
    def generate_from_resources(resources, version:, language:, clear_warnings: T.unsafe(nil)); end

    # source://apipie-rails/lib/apipie/swagger_generator.rb#13
    def json_schema_for_method_response(method, return_code, allow_nulls); end

    # source://apipie-rails/lib/apipie/swagger_generator.rb#36
    def json_schema_for_self_describing_class(cls, allow_nulls); end
  end
end

# source://apipie-rails/lib/apipie/tag_list_description.rb#3
class Apipie::TagListDescription
  # @return [TagListDescription] a new instance of TagListDescription
  #
  # source://apipie-rails/lib/apipie/tag_list_description.rb#7
  def initialize(tags); end

  # Returns the value of attribute tags.
  #
  # source://apipie-rails/lib/apipie/tag_list_description.rb#5
  def tags; end
end

# source://apipie-rails/lib/apipie/errors.rb#9
class Apipie::UnknownCode < ::Apipie::Error; end

# source://apipie-rails/lib/apipie/errors.rb#55
class Apipie::UnknownParam < ::Apipie::DefinedParamError
  # source://apipie-rails/lib/apipie/errors.rb#56
  def to_s; end
end

# source://apipie-rails/lib/apipie/version.rb#2
Apipie::VERSION = T.let(T.unsafe(nil), String)

# source://apipie-rails/lib/apipie/validator.rb#5
module Apipie::Validator; end

# source://apipie-rails/lib/apipie/validator.rb#278
class Apipie::Validator::ArrayClassValidator < ::Apipie::Validator::BaseValidator
  # @return [ArrayClassValidator] a new instance of ArrayClassValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#280
  def initialize(param_description, argument); end

  # source://apipie-rails/lib/apipie/validator.rb#295
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#285
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#289
    def build(param_description, argument, options, block); end
  end
end

# arguments value must be an array
#
# source://apipie-rails/lib/apipie/validator.rb#202
class Apipie::Validator::ArrayValidator < ::Apipie::Validator::BaseValidator
  # @return [ArrayValidator] a new instance of ArrayValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#203
  def initialize(param_description, argument, options = T.unsafe(nil)); end

  # source://apipie-rails/lib/apipie/validator.rb#219
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#223
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#215
  def process_value(values); end

  # source://apipie-rails/lib/apipie/validator.rb#210
  def validate(values); end

  private

  # source://apipie-rails/lib/apipie/validator.rb#235
  def enum; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/validator.rb#247
  def has_valid_type?(value); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/validator.rb#261
  def is_valid_value?(value); end

  # source://apipie-rails/lib/apipie/validator.rb#269
  def items; end

  # source://apipie-rails/lib/apipie/validator.rb#242
  def validate_item(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#227
    def build(param_description, argument, options, block); end
  end
end

# to create new validator, inherit from Apipie::Validator::BaseValidator
# and implement class method build and instance method validate
#
# source://apipie-rails/lib/apipie/validator.rb#9
class Apipie::Validator::BaseValidator
  # @return [BaseValidator] a new instance of BaseValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#13
  def initialize(param_description); end

  # source://apipie-rails/lib/apipie/validator.rb#107
  def ==(other); end

  # validator description
  #
  # source://apipie-rails/lib/apipie/validator.rb#67
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#75
  def error; end

  # what type is expected, mostly string
  # this information is used in cli client
  # thor supported types :string, :hash, :array, :numeric, or :boolean
  #
  # source://apipie-rails/lib/apipie/validator.rb#90
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#71
  def format_description_value(value); end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/validator.rb#94
  def ignore_allow_blank?; end

  # source://apipie-rails/lib/apipie/validator.rb#21
  def inspect; end

  # source://apipie-rails/lib/apipie/validator.rb#17
  def inspected_fields; end

  # @raise [NotImplementedError]
  #
  # source://apipie-rails/lib/apipie/validator.rb#98
  def merge_with(other_validator); end

  # Returns the value of attribute param_description.
  #
  # source://apipie-rails/lib/apipie/validator.rb#11
  def param_description; end

  # Sets the attribute param_description
  #
  # @param value the value to set the attribute param_description to.
  #
  # source://apipie-rails/lib/apipie/validator.rb#11
  def param_description=(_arg0); end

  # source://apipie-rails/lib/apipie/validator.rb#62
  def param_name; end

  # source://apipie-rails/lib/apipie/validator.rb#103
  def params_ordered; end

  # source://apipie-rails/lib/apipie/validator.rb#83
  def to_json; end

  # source://apipie-rails/lib/apipie/validator.rb#79
  def to_s; end

  # check if value is valid
  #
  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/validator.rb#52
  def valid?(value); end

  class << self
    # find the right validator for given options
    #
    # source://apipie-rails/lib/apipie/validator.rb#33
    def find(param_description, argument, options, block); end

    # @private
    #
    # source://apipie-rails/lib/apipie/validator.rb#27
    def inherited(subclass); end

    # @yield [missing_params]
    #
    # source://apipie-rails/lib/apipie/validator.rb#41
    def raise_if_missing_params; end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#482
class Apipie::Validator::BooleanValidator < ::Apipie::Validator::BaseValidator
  # source://apipie-rails/lib/apipie/validator.rb#498
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#507
  def expected_type; end

  # @return [Boolean]
  #
  # source://apipie-rails/lib/apipie/validator.rb#503
  def ignore_allow_blank?; end

  # source://apipie-rails/lib/apipie/validator.rb#484
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#488
    def build(param_description, argument, options, block); end

    private

    # @return [Boolean]
    #
    # source://apipie-rails/lib/apipie/validator.rb#494
    def boolean_array?(argument); end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#432
class Apipie::Validator::DecimalValidator < ::Apipie::Validator::BaseValidator
  # source://apipie-rails/lib/apipie/validator.rb#444
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#448
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#434
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#438
    def build(param_description, argument, options, block); end

    # source://apipie-rails/lib/apipie/validator.rb#452
    def validate(value); end
  end
end

# arguments value must be one of given in array
#
# source://apipie-rails/lib/apipie/validator.rb#177
class Apipie::Validator::EnumValidator < ::Apipie::Validator::BaseValidator
  # @return [EnumValidator] a new instance of EnumValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#178
  def initialize(param_description, argument); end

  # source://apipie-rails/lib/apipie/validator.rb#195
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#183
  def validate(value); end

  # source://apipie-rails/lib/apipie/validator.rb#191
  def values; end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#187
    def build(param_description, argument, options, proc); end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#325
class Apipie::Validator::HashValidator < ::Apipie::Validator::BaseValidator
  include ::Apipie::DSL::Base
  include ::Apipie::DSL::Param

  # @return [HashValidator] a new instance of HashValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#333
  def initialize(param_description, argument, param_group); end

  # where the group definition should be looked up when no scope
  # given. This is expected to return a controller.
  #
  # source://apipie-rails/lib/apipie/validator.rb#393
  def _default_param_group_scope; end

  # source://apipie-rails/lib/apipie/validator.rb#383
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#387
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#397
  def merge_with(other_validator); end

  # source://apipie-rails/lib/apipie/validator.rb#347
  def params_ordered; end

  # source://apipie-rails/lib/apipie/validator.rb#406
  def prepare_hash_params; end

  # source://apipie-rails/lib/apipie/validator.rb#373
  def process_value(value); end

  # source://apipie-rails/lib/apipie/validator.rb#356
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#329
    def build(param_description, argument, options, block); end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#512
class Apipie::Validator::NestedValidator < ::Apipie::Validator::BaseValidator
  # @return [NestedValidator] a new instance of NestedValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#514
  def initialize(param_description, argument, param_group); end

  # source://apipie-rails/lib/apipie/validator.rb#548
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#544
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#552
  def params_ordered; end

  # source://apipie-rails/lib/apipie/validator.rb#529
  def process_value(value); end

  # source://apipie-rails/lib/apipie/validator.rb#520
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#538
    def build(param_description, argument, options, block); end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#457
class Apipie::Validator::NumberValidator < ::Apipie::Validator::BaseValidator
  # source://apipie-rails/lib/apipie/validator.rb#469
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#473
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#459
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#463
    def build(param_description, argument, options, block); end

    # source://apipie-rails/lib/apipie/validator.rb#477
    def validate(value); end
  end
end

# source://apipie-rails/lib/apipie/validator.rb#301
class Apipie::Validator::ProcValidator < ::Apipie::Validator::BaseValidator
  # @return [ProcValidator] a new instance of ProcValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#303
  def initialize(param_description, argument); end

  # source://apipie-rails/lib/apipie/validator.rb#320
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#316
  def error; end

  # source://apipie-rails/lib/apipie/validator.rb#308
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#312
    def build(param_description, argument, options, proc); end
  end
end

# validate arguments value with regular expression
#
# source://apipie-rails/lib/apipie/validator.rb#156
class Apipie::Validator::RegexpValidator < ::Apipie::Validator::BaseValidator
  # @return [RegexpValidator] a new instance of RegexpValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#158
  def initialize(param_description, argument); end

  # source://apipie-rails/lib/apipie/validator.rb#171
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#163
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#167
    def build(param_description, argument, options, proc); end
  end
end

# validate arguments type
#
# source://apipie-rails/lib/apipie/validator.rb#118
class Apipie::Validator::TypeValidator < ::Apipie::Validator::BaseValidator
  # @return [TypeValidator] a new instance of TypeValidator
  #
  # source://apipie-rails/lib/apipie/validator.rb#120
  def initialize(param_description, argument); end

  # source://apipie-rails/lib/apipie/validator.rb#136
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#140
  def expected_type; end

  # source://apipie-rails/lib/apipie/validator.rb#125
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#130
    def build(param_description, argument, options, block); end
  end
end

# special type of validator: we say that it's not specified
#
# source://apipie-rails/lib/apipie/validator.rb#415
class Apipie::Validator::UndefValidator < ::Apipie::Validator::BaseValidator
  # source://apipie-rails/lib/apipie/validator.rb#427
  def description; end

  # source://apipie-rails/lib/apipie/validator.rb#417
  def validate(value); end

  class << self
    # source://apipie-rails/lib/apipie/validator.rb#421
    def build(param_description, argument, options, block); end
  end
end

module ApipieHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def heading(title, level = T.unsafe(nil)); end
end
