# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `aws-sessionstore-dynamodb` gem.
# Please instead update this file by running `bin/tapioca gem aws-sessionstore-dynamodb`.

# source://aws-sessionstore-dynamodb/lib/aws-sessionstore-dynamodb.rb#1
module Aws
  class << self
    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#133
    def config; end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#136
    def config=(config); end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#195
    def eager_autoload!(*args); end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#188
    def empty_connection_pools!; end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#145
    def partition(partition_name); end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#150
    def partitions; end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#126
    def shared_config; end

    # source://aws-sdk-core/3.187.0lib/aws-sdk-core.rb#165
    def use_bundled_cert!; end
  end
end

# source://aws-sessionstore-dynamodb/lib/aws-sessionstore-dynamodb.rb#2
module Aws::SessionStore; end

# source://aws-sessionstore-dynamodb/lib/aws-sessionstore-dynamodb.rb#3
module Aws::SessionStore::DynamoDB; end

# This class provides a Configuration object for all DynamoDB transactions
# by pulling configuration options from Runtime, a YAML file, the ENV and
# default settings.
#
# == Environment Variables
# The Configuration object can load default values from your environment. An example
# of setting and environment variable is below:
#
#   export DYNAMO_DB_SESSION_TABLE_NAME='Sessions'
#
# == Handling Errors
# There are two configurable options for error handling: :raise_errors and :error_handler.
#
# If you would like to use the Default Error Handler, you can decide to set :raise_errors
# to true or false depending on whether you want all errors, regadless of class, to be raised
# up the stack and essentially throw a 500.
#
# If you decide to use your own Error Handler. You may pass it in for the value of the key
# :error_handler as a cofniguration object. You must implement the BaseErrorHandler class.
# == Locking Strategy
# By default, locking is not implemented for the session store. You must trigger the
# locking strategy through the configuration of the session store. Pessimistic locking,
# in this case, means that only one read can be made on a session at once. While the session
# is being read by the process with the lock, other processes may try to obtain a lock on
# the same session but will be blocked. See the accessors with lock in their name for
# how to configure the pessimistic locking strategy to your needs.
#
# == DynamoDB Specific Options
# You may configure the table name and table hash key value of your session table with
# the :table_name and :table_key options. You may also configure performance options for
# your table with the :consistent_read, :read_capacity, write_capacity. For more information
# about these configurations see CreateTable method for Amazon DynamoDB.
#
# @see BaseHandler Interface for Error Handling for DynamoDB Session Store.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#40
class Aws::SessionStore::DynamoDB::Configuration
  # Provides configuration object that allows access to options defined
  # during Runtime, in a YAML file, in the ENV and by default.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Configuration] a new instance of Configuration
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#176
  def initialize(options = T.unsafe(nil)); end

  # @return [String, Pathname]
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#118
  def config_file; end

  # See AWS DynamoDB documentation for table consistent_read for more
  # information on this setting.
  #
  # @return [true] If a strongly consistent read is used
  # @return [false] If an eventually consistent read is used.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#71
  def consistent_read; end

  # @return [DynamoDB Client] DynamoDB client.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#123
  def dynamo_db_client; end

  # @return [true] Pessimistic locking strategy will be implemented for
  #   all session accesses.
  # @return [false] No locking strategy will be implemented for
  #   all session accesses.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#101
  def enable_locking; end

  # @return [Error Handler] An error handling object that handles all exceptions
  #   thrown during execution of the AWS DynamoDB Session Store Rack Middleware.
  #   For more information see the Handling Errors Section.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#128
  def error_handler; end

  # @return [Integer] Time in milleseconds after which lock will expire.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#104
  def lock_expiry_time; end

  # @return [Integer] Maximum time in seconds to wait to acquire lock
  #   before giving up.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#112
  def lock_max_wait_time; end

  # @return [Integer] Time in milleseconds to wait before retrying to obtain
  #   lock once an attempt to obtain lock has been made and has failed.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#108
  def lock_retry_delay; end

  # @return [Integer] Maximum number of seconds earlier
  #   from the current time that a session was created.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#91
  def max_age; end

  # @return [Integer] Maximum number of seconds
  #   before the current time that the session was last accessed.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#95
  def max_stale; end

  # @return [true] All errors are raised up the stack when default ErrorHandler
  #   is used.
  # @return [false] Only specified errors are raised up the stack when default
  #   ErrorHandler is used.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#87
  def raise_errors; end

  # @return [Integer] Maximum number of reads consumed per second before
  #   DynamoDB returns a ThrottlingException. See AWS DynamoDB documentation
  #   for table read_capacity for more information on this setting.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#76
  def read_capacity; end

  # @return [String] The secret key for HMAC encryption.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#115
  def secret_key; end

  # @return [String] Session table hash key name.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#65
  def table_key; end

  # @return [String] Session table name.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#62
  def table_name; end

  # @return [Hash] The merged configuration hash.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#187
  def to_hash; end

  # @return [Integer] Maximum number of writes consumed per second before
  #   DynamoDB returns a ThrottlingException. See AWS DynamoDB documentation
  #   for table write_capacity for more information on this setting.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#81
  def write_capacity; end

  private

  # @return [Hash] Client and error objects in hash.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#210
  def client_error; end

  # @return [String] Configuration path found in environment or YAML file.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#246
  def config_file_path(options); end

  # @return [Hash] Default Session table options.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#215
  def default_options; end

  # @return [Hash] Environment options that are useful for Session Handler.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#220
  def env_options; end

  # @return [Hash] File options.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#229
  def file_options(options = T.unsafe(nil)); end

  # @return [Hash] DDB client.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#194
  def gen_dynamo_db_client; end

  # @return [Hash] Default Error Handler
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#202
  def gen_error_handler; end

  # Load options from YAML file
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#239
  def load_from_file(file_path); end

  # Set accessible attributes after merged options.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#251
  def set_attributes(options); end

  # @return [Hash] Hash with all symbolized keys.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#258
  def symbolize_keys(options); end
end

# Default configuration options
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/configuration.rb#43
Aws::SessionStore::DynamoDB::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/base_handler.rb#1
module Aws::SessionStore::DynamoDB::Errors; end

# BaseErrorHandler provides an interface for error handlers
# that can be passed in to {Aws::SessionStore::DynamoDB::RackMiddleware}.
# Each error handler must implement a handle_error method.
#
# @example Sample ErrorHandler class
#   class MyErrorHandler < BaseErrorHandler
#   # Handles error passed in
#   def handle_error(e, env = {})
#   File.open(path_to_file, 'w') {|f| f.write(e.message) }
#   false
#   end
#   end
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/base_handler.rb#14
class Aws::SessionStore::DynamoDB::Errors::BaseHandler
  # An error and an environment (optionally) will be passed in to
  # this method and it will determine how to deal
  # with the error.
  # Must return false if you have handled the error but are not reraising the
  # error up the stack.
  # You may reraise the error passed.
  #
  # @param error [Aws::DynamoDB::Errors::Base] error passed in from
  #   Aws::SessionStore::DynamoDB::RackMiddleware.
  # @param env [Rack::Request::Environment, nil] Rack environment
  # @raise [Aws::DynamoDB::Errors] If error has be reraised.
  # @return [false] If exception was handled and will not reraise exception.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/base_handler.rb#27
  def handle_error(error, env = T.unsafe(nil)); end
end

# This class handles errors raised from DynamoDB.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#3
class Aws::SessionStore::DynamoDB::Errors::DefaultHandler < ::Aws::SessionStore::DynamoDB::Errors::BaseHandler
  # Determines behavior of DefaultErrorHandler
  #
  # @param raise_errors [true] Pass all errors up the Rack stack.
  # @return [DefaultHandler] a new instance of DefaultHandler
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#14
  def initialize(raise_errors); end

  # Returns string to be placed in error stream
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#35
  def errors_string(error); end

  # Raises {HARD_ERRORS} up the Rack stack.
  # Places all other errors in Racks error stream.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#20
  def handle_error(error, env = T.unsafe(nil)); end

  # Sends error to error stream
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#30
  def store_error(error, env = T.unsafe(nil)); end
end

# Array of errors that will always be passed up the Rack stack.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/errors/default_handler.rb#5
Aws::SessionStore::DynamoDB::Errors::DefaultHandler::HARD_ERRORS = T.let(T.unsafe(nil), Array)

# Collects and deletes unwanted sessions based on
# their creation and update dates.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#6
module Aws::SessionStore::DynamoDB::GarbageCollection
  private

  # Deletes the batch gotten from the scan result.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#55
  def batch_delete(config, items); end

  # Scans DynamoDB session table to find
  # sessions that match the max age and max stale period
  # requirements. it then deletes all of the found sessions.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#12
  def collect_garbage(options = T.unsafe(nil)); end

  # Scans and deletes batch.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#38
  def eliminate_unwanted_sessions(config, last_key = T.unsafe(nil)); end

  # Loads configuration options.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#23
  def load_config(options = T.unsafe(nil)); end

  # @api private
  # @return [Hash] Hash with specified date attributes.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#102
  def oldest_date(sec); end

  # Proccesses pending request items.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#75
  def process!(config, sub_batch); end

  # Scans the table for sessions matching the max age and
  # max stale time specified.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#47
  def scan(config, last_item = T.unsafe(nil)); end

  # Sets scan filter attributes based on attributes specified.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#29
  def scan_filter(config); end

  # Provides scan options.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#87
  def scan_opts(config); end

  # Provides start key.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#111
  def start_key(last_item); end

  # Provides table options
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#93
  def table_opts(config); end

  # Turns array into correct format to be passed in to
  # a delete request.
  #
  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#66
  def write(sub_batch); end

  class << self
    # Deletes the batch gotten from the scan result.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#55
    def batch_delete(config, items); end

    # Scans DynamoDB session table to find
    # sessions that match the max age and max stale period
    # requirements. it then deletes all of the found sessions.
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#12
    def collect_garbage(options = T.unsafe(nil)); end

    # Scans and deletes batch.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#38
    def eliminate_unwanted_sessions(config, last_key = T.unsafe(nil)); end

    # Loads configuration options.
    #
    # @api private
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#23
    def load_config(options = T.unsafe(nil)); end

    # @api private
    # @return [Hash] Hash with specified date attributes.
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#102
    def oldest_date(sec); end

    # Proccesses pending request items.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#75
    def process!(config, sub_batch); end

    # Scans the table for sessions matching the max age and
    # max stale time specified.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#47
    def scan(config, last_item = T.unsafe(nil)); end

    # Sets scan filter attributes based on attributes specified.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#29
    def scan_filter(config); end

    # Provides scan options.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#87
    def scan_opts(config); end

    # Provides start key.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#111
    def start_key(last_item); end

    # Provides table options
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#93
    def table_opts(config); end

    # Turns array into correct format to be passed in to
    # a delete request.
    #
    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/garbage_collection.rb#66
    def write(sub_batch); end
  end
end

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/invalid_id_error.rb#2
class Aws::SessionStore::DynamoDB::InvalidIDError < ::RuntimeError
  # @return [InvalidIDError] a new instance of InvalidIDError
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/invalid_id_error.rb#3
  def initialize(msg = T.unsafe(nil)); end
end

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/lock_wait_timeout_error.rb#2
class Aws::SessionStore::DynamoDB::LockWaitTimeoutError < ::RuntimeError
  # @return [LockWaitTimeoutError] a new instance of LockWaitTimeoutError
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/lock_wait_timeout_error.rb#3
  def initialize(msg = T.unsafe(nil)); end
end

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#1
module Aws::SessionStore::DynamoDB::Locking; end

# This class provides a framework for implementing
# locking strategies.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#4
class Aws::SessionStore::DynamoDB::Locking::Base
  # Creates configuration object.
  #
  # @return [Base] a new instance of Base
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#7
  def initialize(cfg); end

  # Deletes session based on id
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#33
  def delete_session(env, sid); end

  # Gets session data.
  #
  # @raise [NotImplementedError]
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#28
  def get_session_data(env, sid); end

  # Each database operation is placed in this rescue wrapper.
  # This wrapper will call the method, rescue any exceptions and then pass
  # exceptions to the configured error handler.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#42
  def handle_error(env = T.unsafe(nil), &block); end

  # Packs session data.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#23
  def pack_data(data); end

  # Updates session in database
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#12
  def set_session_data(env, sid, session, options = T.unsafe(nil)); end

  private

  # Attributes to be retrieved via client
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#147
  def attr_opts; end

  # Attributes to update via client.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#95
  def attr_updts(env, session, add_attrs = T.unsafe(nil)); end

  # Attribute for creation of session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#109
  def created_attr; end

  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#131
  def data_attr(session); end

  # Determine if data has been manipulated
  #
  # @return [Boolean]
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#136
  def data_unchanged?(env, session); end

  # @return [Hash] Options for deleting session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#53
  def delete_opts(sid); end

  # Expected attributes
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#142
  def expected_attributes(sid); end

  # Update client with current time + max_stale.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#114
  def expire_at; end

  # Attribute for TTL expiration of session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#120
  def expire_attr; end

  # @return [Hash] merged hash of all hashes passed in.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#153
  def merge_all(*hashes); end

  # @return [Hash] Options for saving an existing sesison in the database.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#74
  def save_exists_opts(env, sid, session, options = T.unsafe(nil)); end

  # @return [Hash] Options for saving a new session in database.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#68
  def save_new_opts(env, sid, session); end

  # Table options for client.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#87
  def table_opts(sid); end

  # Unmarshal the data.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#82
  def unpack_data(packed_data); end

  # @return [Hash] Options for updating item in Session table.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#58
  def update_opts(env, sid, session, options = T.unsafe(nil)); end

  # Update client with current time attribute.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#104
  def updated_at; end

  # Attribute for updating session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/base.rb#125
  def updated_attr; end
end

# This class gets and sets sessions
# without a locking strategy.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/null.rb#4
class Aws::SessionStore::DynamoDB::Locking::Null < ::Aws::SessionStore::DynamoDB::Locking::Base
  # @return [String] Session data.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/null.rb#20
  def extract_data(env, result = T.unsafe(nil)); end

  # Retrieve session if it exists from the database by id.
  # Unpack the data once retrieved from the database.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/null.rb#7
  def get_session_data(env, sid); end

  # @return [Hash] Options for getting session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/null.rb#15
  def get_session_opts(sid); end
end

# This class implements a pessimistic locking strategy for the
# DynamoDB session handler. Sessions obtain an exclusive lock
# for reads that is only released when the session is saved.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#5
class Aws::SessionStore::DynamoDB::Locking::Pessimistic < ::Aws::SessionStore::DynamoDB::Locking::Base
  # Gets session from database and places a lock on the session
  # while you are reading from the database.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#13
  def get_session_data(env, sid); end

  # Saves the session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#7
  def set_session_data(env, sid, session, options = T.unsafe(nil)); end

  private

  # Option to delete lock.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#127
  def add_attr; end

  # Attributes for locking.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#110
  def add_lock_attrs(env); end

  # Attempt to place a lock on the session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#92
  def attempt_set_lock(sid); end

  # Attempt to bust the lock if the expiration date has expired.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#69
  def bust_lock(sid, expires_at); end

  # Determine if session has waited too long to obtain lock.
  #
  # @raise [Error] When time for attempting to get lock has
  #   been exceeded.
  # @return [Boolean]
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#44
  def exceeded_wait_time?(max_attempt_date); end

  # Expectation of when lock was set.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#132
  def expect_lock_time(env); end

  # @return [String] Session data.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#61
  def get_data(env, result); end

  # Get the expiration date for the session
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#86
  def get_expire_date(sid); end

  # @return [Hash] Options hash for placing a lock on a session.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#50
  def get_lock_time_opts(sid); end

  # Get session with implemented locking strategy.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#22
  def get_session_with_lock(env, sid); end

  # Lock attribute - time stamp of when session was locked.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#97
  def lock_attr; end

  # Lock expectation.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#122
  def lock_expect; end

  # Attributes to be retrieved via client
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#138
  def lock_opts; end

  # @return [Time] Time stamp for which the session was locked.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#55
  def lock_time(sid); end

  # @return [Hash] Options hash for obtaining the lock.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#76
  def obtain_lock_opts(sid, add_opt = T.unsafe(nil)); end

  # Lock options for setting lock.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#117
  def set_lock_options(env, options = T.unsafe(nil)); end

  # Time in which session was updated.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#105
  def updated_at; end

  # Sleep for given time period if the session is currently locked.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/locking/pessimistic.rb#81
  def wait_to_retry(result); end
end

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/missing_secret_key_error.rb#2
class Aws::SessionStore::DynamoDB::MissingSecretKeyError < ::RuntimeError
  # @return [MissingSecretKeyError] a new instance of MissingSecretKeyError
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/missing_secret_key_error.rb#3
  def initialize(msg = T.unsafe(nil)); end
end

# This class is an ID based Session Store Rack Middleware
# that uses a DynamoDB backend for session storage.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#8
class Aws::SessionStore::DynamoDB::RackMiddleware < ::Rack::Session::Abstract::Persisted
  # Initializes SessionStore middleware.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param app Rack application.
  # @param options [Hash] a customizable set of options
  # @raise [Aws::DynamoDB::Errors::ResourceNotFoundException] If valid table
  #   name is not provided.
  # @raise [Aws::SessionStore::DynamoDB::MissingSecretKey] If secret key is
  #   not provided.
  # @return [RackMiddleware] a new instance of RackMiddleware
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#21
  def initialize(app, options = T.unsafe(nil)); end

  # @return [Configuration] An instance of Configuration that is used for
  #   this middleware.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#11
  def config; end

  private

  # Destroys session and removes session from database.
  #
  # @return [String] return a new session id or nil if options[:drop]
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#81
  def delete_session(req, sid, options); end

  # Gets session data.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#51
  def find_session(req, sid); end

  # Generate HMAC hash based on MD5
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#99
  def generate_hmac(sid, secret); end

  # Generate sid with HMAC hash
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#104
  def generate_sid(secure = T.unsafe(nil)); end

  # Each database operation is placed in this rescue wrapper.
  # This wrapper will call the method, rescue any exceptions and then pass
  # exceptions to the configured session handler.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#89
  def handle_error(env = T.unsafe(nil), &block); end

  # Sets locking strategy for session handler
  #
  # @return [Locking::Null] If locking is not enabled.
  # @return [Locking::Pessimistic] If locking is enabled.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#33
  def set_locking_strategy; end

  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#65
  def set_new_session_properties(env); end

  # Determines if the correct session table name is being used for
  # this application. Also tests existence of secret key.
  #
  # @raise [Aws::DynamoDB::Errors::ResourceNotFoundException] If wrong table
  #   name.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#46
  def validate_config; end

  # Verify digest of HMACed hash
  #
  # @return [true] If the HMAC id has been verified.
  # @return [false] If the HMAC id has been corrupted.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#113
  def verify_hmac(sid); end

  # Sets the session in the database after packing data.
  #
  # @return [Hash] If session has been saved.
  # @return [false] If session has could not be saved.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/rack_middleware.rb#74
  def write_session(req, sid, session, options); end
end

# This class provides a way to create and delete a session table.
#
# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#6
module Aws::SessionStore::DynamoDB::Table
  private

  # @api private
  # @return [Hash] Attribute settings for creating a session table.
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#45
  def attributes(hash_key); end

  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#73
  def block_until_created(config); end

  # Creates a session table.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#11
  def create_table(options = T.unsafe(nil)); end

  # Deletes a session table.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#26
  def delete_table(options = T.unsafe(nil)); end

  # Loads configuration options.
  #
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#39
  def load_config(options = T.unsafe(nil)); end

  # @api private
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#32
  def logger; end

  # @api private
  # @return Properties for Session table
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#68
  def properties(table_name, hash_key); end

  # @api private
  # @return Shema values for session table
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#52
  def schema(table_name, hash_key); end

  # @api private
  # @return Throughput for Session table
  #
  # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#61
  def throughput(read, write); end

  class << self
    # @api private
    # @return [Hash] Attribute settings for creating a session table.
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#45
    def attributes(hash_key); end

    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#73
    def block_until_created(config); end

    # Creates a session table.
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#11
    def create_table(options = T.unsafe(nil)); end

    # Deletes a session table.
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#26
    def delete_table(options = T.unsafe(nil)); end

    # Loads configuration options.
    #
    # @api private
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param options [Hash] a customizable set of options
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#39
    def load_config(options = T.unsafe(nil)); end

    # @api private
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#32
    def logger; end

    # @api private
    # @return Properties for Session table
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#68
    def properties(table_name, hash_key); end

    # @api private
    # @return Shema values for session table
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#52
    def schema(table_name, hash_key); end

    # @api private
    # @return Throughput for Session table
    #
    # source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/table.rb#61
    def throughput(read, write); end
  end
end

# source://aws-sessionstore-dynamodb/lib/aws/session_store/dynamo_db/version.rb#4
Aws::SessionStore::DynamoDB::VERSION = T.let(T.unsafe(nil), String)
