# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `html-proofer` gem.
# Please instead update this file by running `bin/tapioca gem html-proofer`.

# source://html-proofer/lib/html-proofer/check/favicon.rb#3
class FaviconCheck < ::HTMLProofer::Check
  # source://html-proofer/lib/html-proofer/check/favicon.rb#4
  def run; end

  private

  # allow any instant-redirect meta tag
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/favicon.rb#24
  def immediate_redirect?; end
end

# source://html-proofer/lib/html-proofer/utils.rb#5
module HTMLProofer
  class << self
    # @raise [ArgumentError]
    #
    # source://html-proofer/lib/html-proofer.rb#39
    def check_directories(directories, options = T.unsafe(nil)); end

    # @raise [ArgumentError]
    #
    # source://html-proofer/lib/html-proofer.rb#31
    def check_directory(directory, options = T.unsafe(nil)); end

    # @raise [ArgumentError]
    #
    # source://html-proofer/lib/html-proofer.rb#23
    def check_file(file, options = T.unsafe(nil)); end

    # @raise [ArgumentError]
    #
    # source://html-proofer/lib/html-proofer.rb#49
    def check_links(links, options = T.unsafe(nil)); end
  end
end

# source://html-proofer/lib/html-proofer/cache.rb#9
class HTMLProofer::Cache
  include ::HTMLProofer::Utils

  # @return [Cache] a new instance of Cache
  #
  # source://html-proofer/lib/html-proofer/cache.rb#19
  def initialize(logger, options); end

  # source://html-proofer/lib/html-proofer/cache.rb#66
  def add(url, filenames, status, msg = T.unsafe(nil)); end

  # Returns the value of attribute cache_file.
  #
  # source://html-proofer/lib/html-proofer/cache.rb#17
  def cache_file; end

  # Returns the value of attribute cache_log.
  #
  # source://html-proofer/lib/html-proofer/cache.rb#17
  def cache_log; end

  # source://html-proofer/lib/html-proofer/cache.rb#155
  def clean_url(url); end

  # source://html-proofer/lib/html-proofer/cache.rb#79
  def detect_url_changes(found, type); end

  # Returns the value of attribute exists.
  #
  # source://html-proofer/lib/html-proofer/cache.rb#17
  def exists; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/cache.rb#129
  def load?; end

  # source://html-proofer/lib/html-proofer/cache.rb#49
  def parsed_timeframe(timeframe); end

  # source://html-proofer/lib/html-proofer/cache.rb#133
  def retrieve_urls(urls, type); end

  # source://html-proofer/lib/html-proofer/cache.rb#159
  def setup_cache!(options); end

  # source://html-proofer/lib/html-proofer/cache.rb#45
  def size; end

  # Returns the value of attribute storage_dir.
  #
  # source://html-proofer/lib/html-proofer/cache.rb#17
  def storage_dir; end

  # FIXME: it seems that Typhoeus actually acts on escaped URLs,
  # but there's no way to get at that information, and the cache
  # stores unescaped URLs. Because of this, some links, such as
  # github.com/search/issues?q=is:open+is:issue+fig are not matched
  # as github.com/search/issues?q=is%3Aopen+is%3Aissue+fig
  #
  # source://html-proofer/lib/html-proofer/cache.rb#151
  def unescape_url(url); end

  # source://html-proofer/lib/html-proofer/cache.rb#41
  def urls; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/cache.rb#35
  def within_timeframe?(time); end

  # TODO: Garbage performance--both the external and internal
  # caches need access to this file. Write a proper versioned
  # schema in the future
  #
  # source://html-proofer/lib/html-proofer/cache.rb#125
  def write; end

  private

  # source://html-proofer/lib/html-proofer/cache.rb#176
  def time_ago(measurement, unit); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/cache.rb#189
  def url_matches_type?(url, type); end
end

# source://html-proofer/lib/html-proofer/cache.rb#13
HTMLProofer::Cache::DEFAULT_CACHE_FILE_NAME = T.let(T.unsafe(nil), String)

# source://html-proofer/lib/html-proofer/cache.rb#12
HTMLProofer::Cache::DEFAULT_STORAGE_DIR = T.let(T.unsafe(nil), String)

# source://html-proofer/lib/html-proofer/cache.rb#15
HTMLProofer::Cache::URI_REGEXP = T.let(T.unsafe(nil), Regexp)

# Mostly handles issue management and collecting of external URLs.
#
# source://html-proofer/lib/html-proofer/check.rb#5
class HTMLProofer::Check
  # @return [Check] a new instance of Check
  #
  # source://html-proofer/lib/html-proofer/check.rb#8
  def initialize(src, path, html, logger, cache, options); end

  # source://html-proofer/lib/html-proofer/check.rb#29
  def add_issue(desc, line: T.unsafe(nil), path: T.unsafe(nil), status: T.unsafe(nil), content: T.unsafe(nil)); end

  # source://html-proofer/lib/html-proofer/check.rb#42
  def add_to_external_urls(url); end

  # source://html-proofer/lib/html-proofer/check.rb#34
  def add_to_internal_urls(url, internal_url); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check.rb#64
  def blank?(attr); end

  # source://html-proofer/lib/html-proofer/check.rb#20
  def create_element(node); end

  # Returns the value of attribute element.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def element; end

  # Returns the value of attribute external_urls.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def external_urls; end

  # Returns the value of attribute html.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def html; end

  # Returns the value of attribute internal_urls.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def internal_urls; end

  # Returns the value of attribute issues.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def issues; end

  # Returns the value of attribute node.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def node; end

  # Returns the value of attribute options.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def options; end

  # Returns the value of attribute path.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def path; end

  # @raise [NotImplementedError]
  #
  # source://html-proofer/lib/html-proofer/check.rb#25
  def run; end

  # Returns the value of attribute src.
  #
  # source://html-proofer/lib/html-proofer/check.rb#6
  def src; end

  private

  # source://html-proofer/lib/html-proofer/check.rb#70
  def remove_ignored(html); end

  class << self
    # source://html-proofer/lib/html-proofer/check.rb#52
    def subchecks; end
  end
end

# source://html-proofer/lib/html-proofer/configuration.rb#4
module HTMLProofer::Configuration
  class << self
    # @raise [ArgumentError]
    #
    # source://html-proofer/lib/html-proofer/configuration.rb#71
    def parse_json_option(option_name, config, symbolize_names: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://html-proofer/lib/html-proofer/configuration.rb#63
    def to_regex?(item); end
  end
end

# source://html-proofer/lib/html-proofer/configuration.rb#61
HTMLProofer::Configuration::CACHE_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://html-proofer/lib/html-proofer/configuration.rb#46
HTMLProofer::Configuration::HYDRA_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://html-proofer/lib/html-proofer/configuration.rb#50
HTMLProofer::Configuration::PARALLEL_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://html-proofer/lib/html-proofer/configuration.rb#7
HTMLProofer::Configuration::PROOFER_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://html-proofer/lib/html-proofer/configuration.rb#36
HTMLProofer::Configuration::TYPHOEUS_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://html-proofer/lib/html-proofer/configuration.rb#52
HTMLProofer::Configuration::VALIDATION_DEFAULTS = T.let(T.unsafe(nil), Hash)

# Represents the element currently being processed
#
# source://html-proofer/lib/html-proofer/element.rb#8
class HTMLProofer::Element
  include ::HTMLProofer::Utils

  # @return [Element] a new instance of Element
  #
  # source://html-proofer/lib/html-proofer/element.rb#13
  def initialize(obj, check, logger); end

  # source://html-proofer/lib/html-proofer/element.rb#220
  def absolute_path; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#180
  def absolute_path?(path); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#133
  def allow_hash_href?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#129
  def allow_missing_href?; end

  # Returns the value of attribute alt.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def alt; end

  # source://html-proofer/lib/html-proofer/element.rb#249
  def base; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#137
  def check_img_http?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#141
  def check_sri?; end

  # Returns the value of attribute data_proofer_ignore.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def data_proofer_ignore; end

  # checks if a file exists relative to the current pwd
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#214
  def exists?; end

  # path is external to the file
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#150
  def external?; end

  # source://html-proofer/lib/html-proofer/element.rb#184
  def file_path; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#245
  def follow_location?; end

  # source://html-proofer/lib/html-proofer/element.rb#91
  def hash; end

  # source://html-proofer/lib/html-proofer/element.rb#172
  def hash_link; end

  # Returns the value of attribute href.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def href; end

  # source://html-proofer/lib/html-proofer/element.rb#253
  def html; end

  # Returns the value of attribute id.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def id; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#108
  def ignore?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#121
  def ignore_alt?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#125
  def ignore_empty_alt?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#145
  def ignore_empty_mailto?; end

  # source://html-proofer/lib/html-proofer/element.rb#226
  def ignores_pattern_check(links); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#154
  def internal?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#158
  def internal_absolute_link?; end

  # Returns the value of attribute line.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def line; end

  # Returns the value of attribute link.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def link; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#168
  def link_points_to_same_page?; end

  # Returns the value of attribute name.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def name; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#104
  def non_http_remote?; end

  # source://html-proofer/lib/html-proofer/element.rb#176
  def param_link; end

  # source://html-proofer/lib/html-proofer/element.rb#81
  def parts; end

  # source://html-proofer/lib/html-proofer/element.rb#87
  def path; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#77
  def path?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#162
  def relative_link?; end

  # path is to an external server
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#100
  def remote?; end

  # source://html-proofer/lib/html-proofer/element.rb#95
  def scheme; end

  # Returns the value of attribute src.
  #
  # source://html-proofer/lib/html-proofer/element.rb#11
  def src; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#241
  def unslashed_directory?(file); end

  # source://html-proofer/lib/html-proofer/element.rb#63
  def url; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/element.rb#73
  def valid?; end
end

# source://html-proofer/lib/html-proofer/issue.rb#4
class HTMLProofer::Issue
  # @return [Issue] a new instance of Issue
  #
  # source://html-proofer/lib/html-proofer/issue.rb#7
  def initialize(path, desc, line: T.unsafe(nil), status: T.unsafe(nil), content: T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#5
  def content; end

  # Returns the value of attribute desc.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#5
  def desc; end

  # Returns the value of attribute line.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#5
  def line; end

  # Returns the value of attribute path.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#5
  def path; end

  # Returns the value of attribute status.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#5
  def status; end

  # source://html-proofer/lib/html-proofer/issue.rb#15
  def to_s; end
end

# source://html-proofer/lib/html-proofer/log.rb#7
class HTMLProofer::Log
  include ::Yell::Loggable
  extend ::Yell::Loggable::ClassMethods

  # @return [Log] a new instance of Log
  #
  # source://html-proofer/lib/html-proofer/log.rb#13
  def initialize(log_level); end

  # source://html-proofer/lib/html-proofer/log.rb#30
  def colorize(level, message); end

  # dumb override to play nice with Typhoeus/Ethon
  #
  # source://html-proofer/lib/html-proofer/log.rb#51
  def debug(message = T.unsafe(nil)); end

  # source://html-proofer/lib/html-proofer/log.rb#22
  def log(level, message); end

  # source://html-proofer/lib/html-proofer/log.rb#26
  def log_with_color(level, message); end
end

# source://html-proofer/lib/html-proofer/log.rb#11
HTMLProofer::Log::STDERR_LEVELS = T.let(T.unsafe(nil), Array)

# source://html-proofer/lib/html-proofer/log.rb#10
HTMLProofer::Log::STDOUT_LEVELS = T.let(T.unsafe(nil), Array)

# source://html-proofer/lib/html-proofer/middleware.rb#4
class HTMLProofer::Middleware
  include ::HTMLProofer::Utils

  # @return [Middleware] a new instance of Middleware
  #
  # source://html-proofer/lib/html-proofer/middleware.rb#30
  def initialize(app); end

  # source://html-proofer/lib/html-proofer/middleware.rb#54
  def call(env); end

  class << self
    # source://html-proofer/lib/html-proofer/middleware.rb#18
    def options; end
  end
end

# source://html-proofer/lib/html-proofer/middleware.rb#34
HTMLProofer::Middleware::HTML_SIGNATURE = T.let(T.unsafe(nil), Array)

# source://html-proofer/lib/html-proofer/middleware.rb#7
class HTMLProofer::Middleware::InvalidHtmlError < ::StandardError
  # @return [InvalidHtmlError] a new instance of InvalidHtmlError
  #
  # source://html-proofer/lib/html-proofer/middleware.rb#8
  def initialize(failures); end

  # source://html-proofer/lib/html-proofer/middleware.rb#13
  def message; end
end

# source://html-proofer/lib/html-proofer/runner.rb#4
class HTMLProofer::Runner
  include ::HTMLProofer::Utils

  # @return [Runner] a new instance of Runner
  #
  # source://html-proofer/lib/html-proofer/runner.rb#9
  def initialize(src, opts = T.unsafe(nil)); end

  # Set before_request callback.
  #
  # @example Set before_request.
  #   request.before_request { |request| p "yay" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All before_request blocks.
  # @yield [Typhoeus::Request]
  #
  # source://html-proofer/lib/html-proofer/runner.rb#235
  def before_request(&block); end

  # Collects any external URLs found in a directory of files. Also collectes
  # every failed test from process_files.
  # Sends the external URLs to Typhoeus for batch processing.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#76
  def check_files; end

  # source://html-proofer/lib/html-proofer/runner.rb#61
  def check_list_of_links; end

  # source://html-proofer/lib/html-proofer/runner.rb#105
  def check_parsed(html, path); end

  # source://html-proofer/lib/html-proofer/runner.rb#137
  def check_path(path); end

  # source://html-proofer/lib/html-proofer/runner.rb#194
  def checks; end

  # Returns the value of attribute external_urls.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#7
  def external_urls; end

  # source://html-proofer/lib/html-proofer/runner.rb#207
  def failed_tests; end

  # Returns the value of attribute failures.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#7
  def failures; end

  # source://html-proofer/lib/html-proofer/runner.rb#171
  def files; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/runner.rb#185
  def ignore_file?(file); end

  # Returns the value of attribute internal_urls.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#7
  def internal_urls; end

  # source://html-proofer/lib/html-proofer/runner.rb#241
  def load_internal_cache; end

  # Returns the value of attribute options.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#7
  def options; end

  # source://html-proofer/lib/html-proofer/runner.rb#215
  def print_failed_tests; end

  # Walks over each implemented check and runs them on the files, in parallel.
  #
  # source://html-proofer/lib/html-proofer/runner.rb#97
  def process_files; end

  # source://html-proofer/lib/html-proofer/runner.rb#42
  def run; end

  # source://html-proofer/lib/html-proofer/runner.rb#141
  def validate_external_urls; end

  # source://html-proofer/lib/html-proofer/runner.rb#148
  def validate_internal_urls; end
end

# source://html-proofer/lib/html-proofer/issue.rb#20
class HTMLProofer::SortedIssues
  # @return [SortedIssues] a new instance of SortedIssues
  #
  # source://html-proofer/lib/html-proofer/issue.rb#23
  def initialize(issues, error_sort, logger); end

  # Returns the value of attribute issues.
  #
  # source://html-proofer/lib/html-proofer/issue.rb#21
  def issues; end

  # source://html-proofer/lib/html-proofer/issue.rb#47
  def report(sorted_issues, first_report, second_report); end

  # source://html-proofer/lib/html-proofer/issue.rb#43
  def sort(first_sort, second_sort); end

  # source://html-proofer/lib/html-proofer/issue.rb#29
  def sort_and_report; end
end

# source://html-proofer/lib/html-proofer/url_validator.rb#9
class HTMLProofer::UrlValidator
  include ::HTMLProofer::Utils

  # @return [UrlValidator] a new instance of UrlValidator
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#15
  def initialize(logger, cache, external_urls, options); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#221
  def add_external_issue(filenames, desc, status = T.unsafe(nil)); end

  # Sets the attribute before_request
  #
  # @param value the value to set the attribute before_request to.
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#13
  def before_request=(_arg0); end

  # Even though the response was a success, we may have been asked to check
  # if the hash on the URL exists on the page
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#177
  def check_hash_in_2xx_response(href, effective_url, response, filenames); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#120
  def clean_url(href); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#102
  def establish_queue(external_urls); end

  # Proofer runs faster if we pull out all the external URLs and run the checks
  # at the end. Otherwise, we're halting the consuming process for every file during
  # `process_files`.
  #
  # In addition, sorting the list lets libcurl keep connections to the same hosts alive.
  #
  # Finally, we'll first make a HEAD request, rather than GETing all the contents.
  # If the HEAD fails, we'll fall back to GET, as some servers are not configured
  # for HEAD. If we've decided to check for hashes, we must do a GET--HEAD is
  # not available as an option.
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#87
  def external_link_checker(external_urls); end

  # Returns the value of attribute external_urls.
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#12
  def external_urls; end

  # source://html-proofer/lib/html-proofer/url_validator.rb#73
  def extract_domain_path(uri); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#210
  def handle_failure(href, filenames, response_code, return_message); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#202
  def handle_timeout(href, filenames, response_code); end

  # Does the URL have a hash?
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#231
  def hash?(url); end

  # remember queries we've seen, ignore future ones
  #
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/url_validator.rb#59
  def new_url_query_values?(uri, paths_with_queries); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#130
  def queue_request(method, href, filenames); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#39
  def remove_query_values; end

  # source://html-proofer/lib/html-proofer/url_validator.rb#140
  def response_handler(response, filenames); end

  # source://html-proofer/lib/html-proofer/url_validator.rb#25
  def run; end
end

# source://html-proofer/lib/html-proofer/utils.rb#6
module HTMLProofer::Utils
  # source://html-proofer/lib/html-proofer/utils.rb#11
  def create_nokogiri(path); end

  # source://html-proofer/lib/html-proofer/utils.rb#7
  def pluralize(count, single, plural); end

  # source://html-proofer/lib/html-proofer/utils.rb#21
  def swap(href, replacement); end
end

# source://html-proofer/lib/html-proofer/version.rb#4
HTMLProofer::VERSION = T.let(T.unsafe(nil), String)

# source://html-proofer/lib/html-proofer/check/html.rb#3
class HtmlCheck < ::HTMLProofer::Check
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/html.rb#19
  def report?(message); end

  # source://html-proofer/lib/html-proofer/check/html.rb#13
  def run; end
end

# source://html-proofer/lib/html-proofer/check/html.rb#9
HtmlCheck::DOCTYPE_MSG = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/html.rb#10
HtmlCheck::EOF_IN_TAG = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/html.rb#7
HtmlCheck::INVALID_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/html.rb#6
HtmlCheck::INVALID_TAG_MSG = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/html.rb#11
HtmlCheck::MISMATCHED_TAGS = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/html.rb#8
HtmlCheck::PARSE_ENTITY_REF = T.let(T.unsafe(nil), Regexp)

# tags embedded in scripts are used in templating languages: http://git.io/vOovv
#
# source://html-proofer/lib/html-proofer/check/html.rb#5
HtmlCheck::SCRIPT_EMBEDS_MSG = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/images.rb#3
class ImageCheck < ::HTMLProofer::Check
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/images.rb#6
  def empty_alt_tag?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/images.rb#14
  def missing_src?; end

  # source://html-proofer/lib/html-proofer/check/images.rb#18
  def run; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/images.rb#10
  def terrible_filename?; end
end

# source://html-proofer/lib/html-proofer/check/images.rb#4
ImageCheck::SCREEN_SHOT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://html-proofer/lib/html-proofer/check/links.rb#3
class LinkCheck < ::HTMLProofer::Check
  include ::HTMLProofer::Utils

  # source://html-proofer/lib/html-proofer/check/links.rb#70
  def check_internal_link(link, path, line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#83
  def check_schemes(link, line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#153
  def check_sri(line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#118
  def external_link_check(link, line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#136
  def find_fragments(html, fragment_ids); end

  # source://html-proofer/lib/html-proofer/check/links.rb#108
  def handle_hash(link, path, line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#96
  def handle_mailto(link, line, content); end

  # source://html-proofer/lib/html-proofer/check/links.rb#104
  def handle_tel(link, line, content); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#129
  def hash_exists?(html, href_hash); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#6
  def missing_href?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#12
  def placeholder?; end

  # source://html-proofer/lib/html-proofer/check/links.rb#16
  def run; end
end

# source://html-proofer/lib/html-proofer/check/links.rb#171
class LinkCheck::InternalLink
  # @return [InternalLink] a new instance of InternalLink
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#174
  def initialize(link, path, line, content); end

  # Returns the value of attribute content.
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#172
  def content; end

  # Returns the value of attribute href.
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#172
  def href; end

  # Returns the value of attribute line.
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#172
  def line; end

  # Returns the value of attribute link.
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#172
  def link; end

  # Returns the value of attribute path.
  #
  # source://html-proofer/lib/html-proofer/check/links.rb#172
  def path; end
end

# Whitelist for affected elements from Subresource Integrity specification
# https://w3c.github.io/webappsec-subresource-integrity/#link-element-for-stylesheets
#
# source://html-proofer/lib/html-proofer/check/links.rb#151
LinkCheck::SRI_REL_TYPES = T.let(T.unsafe(nil), String)

# source://html-proofer/lib/html-proofer/check/links.rb#165
class LinkCheck::XpathFunctions
  # source://html-proofer/lib/html-proofer/check/links.rb#166
  def case_sensitive_equals(node_set, str_to_match); end
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://html-proofer/lib/html-proofer.rb#4
  def require_all(path); end
end

# source://html-proofer/lib/html-proofer/check/opengraph.rb#15
class OpenGraphCheck < ::HTMLProofer::Check
  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/opengraph.rb#20
  def empty_src?; end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/opengraph.rb#16
  def missing_src?; end

  # source://html-proofer/lib/html-proofer/check/opengraph.rb#24
  def run; end
end

# source://html-proofer/lib/html-proofer/check/opengraph.rb#3
class OpenGraphElement < ::HTMLProofer::Element
  # @return [OpenGraphElement] a new instance of OpenGraphElement
  #
  # source://html-proofer/lib/html-proofer/check/opengraph.rb#6
  def initialize(obj, check, logger); end

  # Returns the value of attribute src.
  #
  # source://html-proofer/lib/html-proofer/check/opengraph.rb#4
  def src; end
end

# source://html-proofer/lib/html-proofer/check/scripts.rb#3
class ScriptCheck < ::HTMLProofer::Check
  # source://html-proofer/lib/html-proofer/check/scripts.rb#33
  def check_sri(line, content); end

  # @return [Boolean]
  #
  # source://html-proofer/lib/html-proofer/check/scripts.rb#6
  def missing_src?; end

  # source://html-proofer/lib/html-proofer/check/scripts.rb#10
  def run; end

  # Returns the value of attribute src.
  #
  # source://html-proofer/lib/html-proofer/check/scripts.rb#4
  def src; end
end
