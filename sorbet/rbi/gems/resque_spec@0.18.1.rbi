# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `resque_spec` gem.
# Please instead update this file by running `bin/tapioca gem resque_spec`.

# source://resque_spec/lib/resque_spec/matchers.rb#5
module ArgsHelper
  private

  # source://resque_spec/lib/resque_spec/matchers.rb#8
  def match_args(expected_args, args); end
end

# source://resque_spec/lib/resque_spec/matchers.rb#14
module InQueueHelper
  include ::ArgsHelper

  # source://resque_spec/lib/resque_spec/matchers.rb#23
  def in(queue_name); end

  # source://resque_spec/lib/resque_spec/matchers.rb#28
  def queue(actual); end

  class << self
    # @private
    #
    # source://resque_spec/lib/resque_spec/matchers.rb#17
    def included(klass); end
  end
end

# source://resque_spec/lib/resque_spec/ext.rb#3
module Resque
  extend ::Resque::Helpers

  # source://resque/2.6.0lib/resque.rb#260
  def after_fork(&block); end

  # source://resque/2.6.0lib/resque.rb#265
  def after_fork=(block); end

  # source://resque/2.6.0lib/resque.rb#282
  def after_pause(&block); end

  # source://resque/2.6.0lib/resque.rb#287
  def after_pause=(block); end

  # source://resque/2.6.0lib/resque.rb#230
  def before_first_fork(&block); end

  # source://resque/2.6.0lib/resque.rb#235
  def before_first_fork=(block); end

  # source://resque/2.6.0lib/resque.rb#245
  def before_fork(&block); end

  # source://resque/2.6.0lib/resque.rb#250
  def before_fork=(block); end

  # source://resque/2.6.0lib/resque.rb#271
  def before_pause(&block); end

  # source://resque/2.6.0lib/resque.rb#276
  def before_pause=(block); end

  # source://resque/2.6.0lib/resque.rb#60
  def classify(dashed_word); end

  # source://resque/2.6.0lib/resque.rb#81
  def constantize(camel_cased_word); end

  # source://resque/2.6.0lib/resque.rb#140
  def data_store; end

  # source://resque/2.6.0lib/resque.rb#43
  def decode(object); end

  # source://resque/2.6.0lib/resque.rb#487
  def dequeue(klass, *args); end

  # source://resque/2.6.0lib/resque.rb#34
  def encode(object); end

  # source://resque_spec/lib/resque_spec/ext.rb#38
  def enqueue(klass, *args); end

  # source://resque/2.6.0lib/resque.rb#215
  def enqueue_front; end

  # source://resque/2.6.0lib/resque.rb#214
  def enqueue_front=(_arg0); end

  # source://resque_spec/lib/resque_spec/ext.rb#44
  def enqueue_to(queue, klass, *args); end

  # source://resque/2.6.0lib/resque.rb#444
  def enqueue_to_without_resque_spec(queue, klass, *args); end

  # source://resque/2.6.0lib/resque.rb#431
  def enqueue_without_resque_spec(klass, *args); end

  # source://resque/2.6.0lib/resque.rb#192
  def heartbeat_interval; end

  # source://resque/2.6.0lib/resque.rb#191
  def heartbeat_interval=(_arg0); end

  # source://resque/2.6.0lib/resque.rb#563
  def info; end

  # source://resque/2.6.0lib/resque.rb#323
  def inline; end

  # source://resque/2.6.0lib/resque.rb#323
  def inline=(_arg0); end

  def inline?; end

  # source://resque/2.6.0lib/resque.rb#578
  def keys; end

  # source://resque/2.6.0lib/resque.rb#385
  def list_range(key, start = T.unsafe(nil), count = T.unsafe(nil)); end

  # source://resque/2.6.0lib/resque.rb#184
  def logger; end

  # source://resque/2.6.0lib/resque.rb#184
  def logger=(_arg0); end

  # source://resque_spec/lib/resque_spec/ext.rb#59
  def peek(queue, start = T.unsafe(nil), count = T.unsafe(nil)); end

  # source://resque/2.6.0lib/resque.rb#374
  def peek_without_resque_spec(queue, start = T.unsafe(nil), count = T.unsafe(nil)); end

  # source://resque/2.6.0lib/resque.rb#356
  def pop(queue); end

  # source://resque/2.6.0lib/resque.rb#202
  def prune_interval; end

  # source://resque/2.6.0lib/resque.rb#201
  def prune_interval=(_arg0); end

  # source://resque/2.6.0lib/resque.rb#349
  def push(queue, item); end

  # source://resque/2.6.0lib/resque.rb#296
  def queue_empty(&block); end

  # source://resque/2.6.0lib/resque.rb#301
  def queue_empty=(block); end

  # source://resque/2.6.0lib/resque.rb#505
  def queue_from_class(klass); end

  # source://resque/2.6.0lib/resque.rb#583
  def queue_sizes; end

  # source://resque/2.6.0lib/resque.rb#395
  def queues; end

  # source://resque/2.6.0lib/resque.rb#140
  def redis; end

  # source://resque/2.6.0lib/resque.rb#114
  def redis=(server); end

  # source://resque/2.6.0lib/resque.rb#147
  def redis_id; end

  # source://resque/2.6.0lib/resque.rb#400
  def remove_queue(queue); end

  # source://resque/2.6.0lib/resque.rb#553
  def remove_worker(worker_id); end

  # source://resque_spec/lib/resque_spec/ext.rb#66
  def reserve(queue_name); end

  # source://resque/2.6.0lib/resque.rb#515
  def reserve_without_resque_spec(queue); end

  # source://resque/2.6.0lib/resque.rb#596
  def sample_queues(sample_size = T.unsafe(nil)); end

  # source://resque_spec/lib/resque_spec/ext.rb#72
  def size(queue_name); end

  # source://resque/2.6.0lib/resque.rb#362
  def size_without_resque_spec(queue); end

  # source://resque/2.6.0lib/resque.rb#179
  def stat_data_store; end

  # source://resque/2.6.0lib/resque.rb#174
  def stat_data_store=(stat_data_store); end

  # source://resque/2.6.0lib/resque.rb#319
  def to_s; end

  # source://resque/2.6.0lib/resque.rb#524
  def validate(klass, queue = T.unsafe(nil)); end

  # source://resque/2.6.0lib/resque.rb#406
  def watch_queue(queue); end

  # source://resque/2.6.0lib/resque.rb#310
  def worker_exit(&block); end

  # source://resque/2.6.0lib/resque.rb#315
  def worker_exit=(block); end

  # source://resque/2.6.0lib/resque.rb#542
  def workers; end

  # source://resque/2.6.0lib/resque.rb#547
  def working; end

  private

  # source://resque/2.6.0lib/resque.rb#639
  def clear_hooks(name); end

  # source://resque/2.6.0lib/resque.rb#644
  def hooks(name); end

  # source://resque/2.6.0lib/resque.rb#631
  def register_hook(name, block); end

  # source://resque_spec/lib/resque_spec/ext.rb#80
  def run_after_enqueue(klass, *args); end

  # source://resque_spec/lib/resque_spec/ext.rb#86
  def run_before_enqueue(klass, *args); end

  class << self
    # source://resque-heroku-signals/2.6.0lib/resque-heroku-signals.rb#6
    def heroku_will_terminate?; end
  end
end

# source://resque_spec/lib/resque_spec/ext.rb#4
class Resque::Job
  # source://resque/2.6.0lib/resque/job.rb#76
  def initialize(queue, payload); end

  # source://resque/2.6.0lib/resque/job.rb#259
  def ==(other); end

  # source://resque/2.6.0lib/resque/job.rb#273
  def after_hooks; end

  # source://resque/2.6.0lib/resque/job.rb#226
  def args; end

  # source://resque/2.6.0lib/resque/job.rb#269
  def around_hooks; end

  # source://resque/2.6.0lib/resque/job.rb#265
  def before_hooks; end

  # source://resque/2.6.0lib/resque/job.rb#53
  def classify(dashed_word); end

  # source://resque/2.6.0lib/resque/job.rb#58
  def constantize(camel_cased_word); end

  # source://resque/2.6.0lib/resque/job.rb#17
  def data_store; end

  # source://resque/2.6.0lib/resque/job.rb#37
  def decode(object); end

  # source://resque/2.6.0lib/resque/job.rb#32
  def encode(object); end

  # source://resque/2.6.0lib/resque/job.rb#232
  def fail(exception); end

  # source://resque/2.6.0lib/resque/job.rb#277
  def failure_hooks; end

  # source://resque/2.6.0lib/resque/job.rb#219
  def has_payload_class?; end

  # source://resque/2.6.0lib/resque/job.rb#253
  def inspect; end

  # source://resque/2.6.0lib/resque/job.rb#74
  def payload; end

  # source://resque/2.6.0lib/resque/job.rb#208
  def payload_class; end

  # source://resque/2.6.0lib/resque/job.rb#213
  def payload_class_name; end

  # source://resque/2.6.0lib/resque/job.rb#150
  def perform; end

  # source://resque/2.6.0lib/resque/job.rb#71
  def queue; end

  # source://resque/2.6.0lib/resque/job.rb#248
  def recreate; end

  # source://resque/2.6.0lib/resque/job.rb#17
  def redis; end

  # source://resque/2.6.0lib/resque/job.rb#281
  def run_failure_hooks(exception); end

  # source://resque/2.6.0lib/resque/job.rb#67
  def worker; end

  # source://resque/2.6.0lib/resque/job.rb#67
  def worker=(_arg0); end

  class << self
    # @raise [::Resque::NoQueueError]
    #
    # source://resque_spec/lib/resque_spec/ext.rb#10
    def create(queue, klass, *args); end

    # source://resque/2.6.0lib/resque/job.rb#87
    def create_without_resque_spec(queue, klass, *args); end

    # source://resque/2.6.0lib/resque/job.rb#26
    def data_store; end

    # source://resque/2.6.0lib/resque/job.rb#48
    def decode(object); end

    # @raise [::Resque::NoQueueError]
    #
    # source://resque_spec/lib/resque_spec/ext.rb#18
    def destroy(queue, klass, *args); end

    # source://resque/2.6.0lib/resque/job.rb#123
    def destroy_without_resque_spec(queue, klass, *args); end

    # source://resque/2.6.0lib/resque/job.rb#43
    def encode(object); end

    # source://resque/2.6.0lib/resque/job.rb#22
    def redis; end

    # source://resque/2.6.0lib/resque/job.rb#142
    def reserve(queue); end
  end
end

# source://resque_spec/lib/resque_spec/helpers.rb#1
module ResqueSpec
  extend ::ResqueSpec

  # source://resque_spec/lib/resque_spec.rb#11
  def dequeue(queue_name, klass, *args); end

  # Returns the value of attribute disable_ext.
  #
  # source://resque_spec/lib/resque_spec.rb#9
  def disable_ext; end

  # Sets the attribute disable_ext
  #
  # @param value the value to set the attribute disable_ext to.
  #
  # source://resque_spec/lib/resque_spec.rb#9
  def disable_ext=(_arg0); end

  # source://resque_spec/lib/resque_spec.rb#17
  def enqueue(queue_name, klass, *args); end

  # Returns the value of attribute inline.
  #
  # source://resque_spec/lib/resque_spec.rb#8
  def inline; end

  # Sets the attribute inline
  #
  # @param value the value to set the attribute inline to.
  #
  # source://resque_spec/lib/resque_spec.rb#8
  def inline=(_arg0); end

  # source://resque_spec/lib/resque_spec.rb#45
  def peek(queue_name, start = T.unsafe(nil), count = T.unsafe(nil)); end

  # source://resque_spec/lib/resque_spec.rb#25
  def perform_all(queue_name); end

  # source://resque_spec/lib/resque_spec.rb#21
  def perform_next(queue_name); end

  # source://resque_spec/lib/resque_spec.rb#32
  def pop(queue_name); end

  # source://resque_spec/lib/resque_spec.rb#37
  def queue_by_name(name); end

  # source://resque_spec/lib/resque_spec.rb#41
  def queue_for(klass); end

  # source://resque_spec/lib/resque_spec.rb#49
  def queue_name(klass); end

  # source://resque_spec/lib/resque_spec.rb#59
  def queues; end

  # source://resque_spec/lib/resque_spec.rb#63
  def reset!; end

  private

  # source://resque_spec/lib/resque_spec.rb#110
  def decode(object); end

  # source://resque_spec/lib/resque_spec.rb#106
  def encode(object); end

  # source://resque_spec/lib/resque_spec.rb#70
  def name_from_instance_var(klass); end

  # source://resque_spec/lib/resque_spec.rb#74
  def name_from_queue_accessor(klass); end

  # source://resque_spec/lib/resque_spec.rb#78
  def new_job(queue_name, payload); end

  # source://resque_spec/lib/resque_spec.rb#98
  def payload_with_string_keys(payload); end

  # source://resque_spec/lib/resque_spec.rb#82
  def perform(queue_name, payload); end

  # source://resque_spec/lib/resque_spec.rb#86
  def perform_or_store(queue_name, payload); end

  # source://resque_spec/lib/resque_spec.rb#94
  def store(queue_name, payload); end
end

# source://resque_spec/lib/resque_spec/helpers.rb#2
module ResqueSpec::Helpers
  # source://resque_spec/lib/resque_spec/helpers.rb#4
  def with_resque; end

  # source://resque_spec/lib/resque_spec/helpers.rb#14
  def without_resque_spec; end
end

# source://resque_spec/lib/resque_spec/matchers.rb#120
module ScheduleQueueHelper
  include ::ArgsHelper

  # source://resque_spec/lib/resque_spec/matchers.rb#129
  def queue(queue_name); end

  # source://resque_spec/lib/resque_spec/matchers.rb#134
  def schedule_queue_for(actual); end

  class << self
    # @private
    #
    # source://resque_spec/lib/resque_spec/matchers.rb#123
    def included(klass); end
  end
end
