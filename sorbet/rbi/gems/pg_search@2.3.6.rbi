# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pg_search` gem.
# Please instead update this file by running `bin/tapioca gem pg_search`.

# source://pg_search/lib/pg_search/configuration/association.rb#5
module PgSearch
  include ::PgSearch::Model

  mixes_in_class_methods ::PgSearch::Model::ClassMethods

  # source://pg_search/lib/pg_search.rb#30
  def multisearch_options; end

  # source://pg_search/lib/pg_search.rb#30
  def multisearch_options=(val); end

  # source://pg_search/lib/pg_search.rb#33
  def unaccent_function; end

  # source://pg_search/lib/pg_search.rb#33
  def unaccent_function=(val); end

  class << self
    # source://pg_search/lib/pg_search.rb#41
    def disable_multisearch; end

    # @private
    #
    # source://pg_search/lib/pg_search.rb#20
    def included(base); end

    # source://pg_search/lib/pg_search.rb#37
    def multisearch(*args); end

    # @return [Boolean]
    #
    # source://pg_search/lib/pg_search.rb#48
    def multisearch_enabled?; end

    # source://pg_search/lib/pg_search.rb#30
    def multisearch_options; end

    # source://pg_search/lib/pg_search.rb#30
    def multisearch_options=(val); end

    # source://pg_search/lib/pg_search.rb#33
    def unaccent_function; end

    # source://pg_search/lib/pg_search.rb#33
    def unaccent_function=(val); end
  end
end

# source://pg_search/lib/pg_search/configuration/association.rb#6
class PgSearch::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://pg_search/lib/pg_search/configuration.rb#11
  def initialize(options, model); end

  # source://pg_search/lib/pg_search/configuration.rb#46
  def associated_columns; end

  # source://pg_search/lib/pg_search/configuration.rb#38
  def associations; end

  # source://pg_search/lib/pg_search/configuration.rb#26
  def columns; end

  # source://pg_search/lib/pg_search/configuration.rb#66
  def feature_options; end

  # source://pg_search/lib/pg_search/configuration.rb#62
  def features; end

  # source://pg_search/lib/pg_search/configuration.rb#54
  def ignore; end

  # Returns the value of attribute model.
  #
  # source://pg_search/lib/pg_search/configuration.rb#9
  def model; end

  # source://pg_search/lib/pg_search/configuration.rb#74
  def order_within_rank; end

  # source://pg_search/lib/pg_search/configuration.rb#50
  def query; end

  # source://pg_search/lib/pg_search/configuration.rb#58
  def ranking_sql; end

  # source://pg_search/lib/pg_search/configuration.rb#30
  def regular_columns; end

  private

  # source://pg_search/lib/pg_search/configuration.rb#94
  def assert_valid_options(options); end

  # source://pg_search/lib/pg_search/configuration.rb#82
  def default_options; end

  # Returns the value of attribute options.
  #
  # source://pg_search/lib/pg_search/configuration.rb#80
  def options; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/configuration.rb#111
  def using_tsvector_column?(options); end

  class << self
    # source://pg_search/lib/pg_search/configuration.rb#19
    def alias(*strings); end
  end
end

# source://pg_search/lib/pg_search/configuration/association.rb#7
class PgSearch::Configuration::Association
  # @return [Association] a new instance of Association
  #
  # source://pg_search/lib/pg_search/configuration/association.rb#10
  def initialize(model, name, column_names); end

  # Returns the value of attribute columns.
  #
  # source://pg_search/lib/pg_search/configuration/association.rb#8
  def columns; end

  # source://pg_search/lib/pg_search/configuration/association.rb#22
  def join(primary_key); end

  # source://pg_search/lib/pg_search/configuration/association.rb#26
  def subselect_alias; end

  # source://pg_search/lib/pg_search/configuration/association.rb#18
  def table_name; end

  private

  # source://pg_search/lib/pg_search/configuration/association.rb#52
  def relation(primary_key); end

  # source://pg_search/lib/pg_search/configuration/association.rb#32
  def selects; end

  # source://pg_search/lib/pg_search/configuration/association.rb#46
  def selects_for_multiple_association; end

  # source://pg_search/lib/pg_search/configuration/association.rb#40
  def selects_for_singular_association; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/configuration/association.rb#58
  def singular_association?; end
end

# source://pg_search/lib/pg_search/configuration/column.rb#7
class PgSearch::Configuration::Column
  # @return [Column] a new instance of Column
  #
  # source://pg_search/lib/pg_search/configuration/column.rb#10
  def initialize(column_name, weight, model); end

  # source://pg_search/lib/pg_search/configuration/column.rb#18
  def full_name; end

  # Returns the value of attribute name.
  #
  # source://pg_search/lib/pg_search/configuration/column.rb#8
  def name; end

  # source://pg_search/lib/pg_search/configuration/column.rb#22
  def to_sql; end

  # Returns the value of attribute weight.
  #
  # source://pg_search/lib/pg_search/configuration/column.rb#8
  def weight; end

  private

  # source://pg_search/lib/pg_search/configuration/column.rb#32
  def column_name; end

  # source://pg_search/lib/pg_search/configuration/column.rb#36
  def expression; end

  # source://pg_search/lib/pg_search/configuration/column.rb#28
  def table_name; end
end

# source://pg_search/lib/pg_search/configuration/foreign_column.rb#7
class PgSearch::Configuration::ForeignColumn < ::PgSearch::Configuration::Column
  # @return [ForeignColumn] a new instance of ForeignColumn
  #
  # source://pg_search/lib/pg_search/configuration/foreign_column.rb#10
  def initialize(column_name, weight, model, association); end

  # source://pg_search/lib/pg_search/configuration/foreign_column.rb#15
  def alias; end

  # Returns the value of attribute weight.
  #
  # source://pg_search/lib/pg_search/configuration/foreign_column.rb#8
  def weight; end

  private

  # source://pg_search/lib/pg_search/configuration/foreign_column.rb#21
  def expression; end

  # source://pg_search/lib/pg_search/configuration/foreign_column.rb#25
  def table_name; end
end

# source://pg_search/lib/pg_search/configuration.rb#86
PgSearch::Configuration::VALID_KEYS = T.let(T.unsafe(nil), Array)

# source://pg_search/lib/pg_search/configuration.rb#90
PgSearch::Configuration::VALID_VALUES = T.let(T.unsafe(nil), Hash)

# source://pg_search/lib/pg_search/document.rb#6
class PgSearch::Document < ::ActiveRecord::Base
  include ::PgSearch::Document::GeneratedAttributeMethods
  include ::PgSearch::Document::GeneratedAssociationMethods
  include ::PgSearch::Model
  extend ::PgSearch::Model::ClassMethods

  # source://activerecord/7.0.8lib/active_record/autosave_association.rb#160
  def autosave_associated_records_for_searchable(*args); end

  class << self
    # source://activesupport/7.0.8lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activerecord/7.0.8lib/active_record/reflection.rb#11
    def _reflections; end

    # source://activemodel/7.0.8lib/active_model/validations.rb#52
    def _validators; end

    # source://activerecord/7.0.8lib/active_record/enum.rb#116
    def defined_enums; end

    # The logger might not have loaded yet.
    # https://github.com/Casecommons/pg_search/issues/26
    #
    # source://pg_search/lib/pg_search/document.rb#14
    def logger; end

    # source://pg_search/lib/pg_search/model.rb#17
    def search(*args); end
  end
end

# source://pg_search/lib/pg_search/document.rb#0
module PgSearch::Document::GeneratedAssociationMethods
  # source://activerecord/7.0.8lib/active_record/associations/builder/singular_association.rb#19
  def reload_searchable; end

  # source://activerecord/7.0.8lib/active_record/associations/builder/association.rb#103
  def searchable; end

  # source://activerecord/7.0.8lib/active_record/associations/builder/association.rb#111
  def searchable=(value); end

  # source://activerecord/7.0.8lib/active_record/associations/builder/belongs_to.rb#132
  def searchable_changed?; end

  # source://activerecord/7.0.8lib/active_record/associations/builder/belongs_to.rb#136
  def searchable_previously_changed?; end
end

# source://pg_search/lib/pg_search/document.rb#0
module PgSearch::Document::GeneratedAttributeMethods; end

# source://pg_search/lib/pg_search/features/feature.rb#7
module PgSearch::Features; end

# source://pg_search/lib/pg_search/features/dmetaphone.rb#7
class PgSearch::Features::DMetaphone
  # @return [DMetaphone] a new instance of DMetaphone
  #
  # source://pg_search/lib/pg_search/features/dmetaphone.rb#8
  def initialize(query, options, columns, model, normalizer); end

  # source://pg_search/lib/pg_search/features/dmetaphone.rb#14
  def conditions(*_arg0, **_arg1, &_arg2); end

  # source://pg_search/lib/pg_search/features/dmetaphone.rb#16
  def rank(*_arg0, **_arg1, &_arg2); end

  private

  # Returns the value of attribute tsearch.
  #
  # source://pg_search/lib/pg_search/features/dmetaphone.rb#20
  def tsearch; end
end

# Decorates a normalizer with dmetaphone processing.
#
# source://pg_search/lib/pg_search/features/dmetaphone.rb#23
class PgSearch::Features::DMetaphone::Normalizer
  # @return [Normalizer] a new instance of Normalizer
  #
  # source://pg_search/lib/pg_search/features/dmetaphone.rb#24
  def initialize(normalizer_to_wrap); end

  # source://pg_search/lib/pg_search/features/dmetaphone.rb#28
  def add_normalization(original_sql); end

  private

  # Returns the value of attribute normalizer_to_wrap.
  #
  # source://pg_search/lib/pg_search/features/dmetaphone.rb#41
  def normalizer_to_wrap; end
end

# source://pg_search/lib/pg_search/features/feature.rb#8
class PgSearch::Features::Feature
  # @return [Feature] a new instance of Feature
  #
  # source://pg_search/lib/pg_search/features/feature.rb#15
  def initialize(query, options, all_columns, model, normalizer); end

  # source://pg_search/lib/pg_search/features/feature.rb#13
  def connection(*_arg0, **_arg1, &_arg2); end

  # source://pg_search/lib/pg_search/features/feature.rb#13
  def quoted_table_name(*_arg0, **_arg1, &_arg2); end

  private

  # Returns the value of attribute all_columns.
  #
  # source://pg_search/lib/pg_search/features/feature.rb#25
  def all_columns; end

  # source://pg_search/lib/pg_search/features/feature.rb#31
  def columns; end

  # source://pg_search/lib/pg_search/features/feature.rb#27
  def document; end

  # Returns the value of attribute model.
  #
  # source://pg_search/lib/pg_search/features/feature.rb#25
  def model; end

  # source://pg_search/lib/pg_search/features/feature.rb#41
  def normalize(expression); end

  # Returns the value of attribute normalizer.
  #
  # source://pg_search/lib/pg_search/features/feature.rb#25
  def normalizer; end

  # Returns the value of attribute options.
  #
  # source://pg_search/lib/pg_search/features/feature.rb#25
  def options; end

  # Returns the value of attribute query.
  #
  # source://pg_search/lib/pg_search/features/feature.rb#25
  def query; end

  class << self
    # source://pg_search/lib/pg_search/features/feature.rb#9
    def valid_options; end
  end
end

# source://pg_search/lib/pg_search/features/tsearch.rb#8
class PgSearch::Features::TSearch < ::PgSearch::Features::Feature
  # source://pg_search/lib/pg_search/features/tsearch.rb#13
  def conditions; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#23
  def highlight; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#19
  def rank; end

  private

  # source://pg_search/lib/pg_search/features/tsearch.rb#183
  def arel_wrap(sql_string); end

  # source://pg_search/lib/pg_search/features/tsearch.rb#195
  def column_to_tsvector(search_column); end

  # source://pg_search/lib/pg_search/features/tsearch.rb#187
  def columns_to_use; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#62
  def deprecated_headline_options; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#179
  def dictionary; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#48
  def headline_options; end

  # From http://www.postgresql.org/docs/8.3/static/textsearch-controls.html
  #   0 (the default) ignores the document length
  #   1 divides the rank by 1 + the logarithm of the document length
  #   2 divides the rank by the document length
  #   4 divides the rank by the mean harmonic distance between extents (this is implemented only by ts_rank_cd)
  #   8 divides the rank by the number of unique words in document
  #   16 divides the rank by 1 + the logarithm of the number of unique words in document
  #   32 divides the rank by itself + 1
  # The integer option controls several behaviors, so it is a bit mask: you can specify one or more behaviors
  #
  # source://pg_search/lib/pg_search/features/tsearch.rb#167
  def normalization; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#29
  def ts_headline; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#85
  def ts_headline_option_value(value); end

  # source://pg_search/lib/pg_search/features/tsearch.rb#38
  def ts_headline_options; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#140
  def tsdocument; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#171
  def tsearch_rank; end

  # source://pg_search/lib/pg_search/features/tsearch.rb#132
  def tsquery; end

  # After this, the SQL expression evaluates to a string containing the term surrounded by single-quotes.
  # If :prefix is true, then the term will have :* appended to the end.
  # If :negated is true, then the term will have ! prepended to the front.
  #
  # source://pg_search/lib/pg_search/features/tsearch.rb#118
  def tsquery_expression(term_sql, negated:, prefix:); end

  # source://pg_search/lib/pg_search/features/tsearch.rb#100
  def tsquery_for_term(unsanitized_term); end

  class << self
    # source://pg_search/lib/pg_search/features/tsearch.rb#9
    def valid_options; end
  end
end

# source://pg_search/lib/pg_search/features/tsearch.rb#98
PgSearch::Features::TSearch::DISALLOWED_TSQUERY_CHARACTERS = T.let(T.unsafe(nil), Regexp)

# source://pg_search/lib/pg_search/features/trigram.rb#5
class PgSearch::Features::Trigram < ::PgSearch::Features::Feature
  # source://pg_search/lib/pg_search/features/trigram.rb#10
  def conditions; end

  # source://pg_search/lib/pg_search/features/trigram.rb#26
  def rank; end

  private

  # source://pg_search/lib/pg_search/features/trigram.rb#44
  def infix_operator; end

  # source://pg_search/lib/pg_search/features/trigram.rb#62
  def normalized_document; end

  # source://pg_search/lib/pg_search/features/trigram.rb#66
  def normalized_query; end

  # source://pg_search/lib/pg_search/features/trigram.rb#52
  def similarity; end

  # source://pg_search/lib/pg_search/features/trigram.rb#36
  def similarity_function; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/features/trigram.rb#32
  def word_similarity?; end

  class << self
    # source://pg_search/lib/pg_search/features/trigram.rb#6
    def valid_options; end
  end
end

# source://pg_search/lib/pg_search/model.rb#4
module PgSearch::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::PgSearch::Model::ClassMethods

  # source://pg_search/lib/pg_search/model.rb#31
  def method_missing(symbol, *args); end

  private

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/model.rb#46
  def respond_to_missing?(symbol, *args); end
end

# source://pg_search/lib/pg_search/model.rb#7
module PgSearch::Model::ClassMethods
  # source://pg_search/lib/pg_search/model.rb#24
  def multisearchable(options = T.unsafe(nil)); end

  # source://pg_search/lib/pg_search/model.rb#8
  def pg_search_scope(name, options); end
end

# source://pg_search/lib/pg_search/multisearch/rebuilder.rb#4
module PgSearch::Multisearch
  class << self
    # source://pg_search/lib/pg_search/multisearch.rb#8
    def rebuild(model, deprecated_clean_up = T.unsafe(nil), clean_up: T.unsafe(nil), transactional: T.unsafe(nil)); end

    private

    # source://pg_search/lib/pg_search/multisearch.rb#26
    def execute(model, clean_up); end
  end
end

# source://pg_search/lib/pg_search/multisearch.rb#32
class PgSearch::Multisearch::ModelNotMultisearchable < ::StandardError
  # @return [ModelNotMultisearchable] a new instance of ModelNotMultisearchable
  #
  # source://pg_search/lib/pg_search/multisearch.rb#33
  def initialize(model_class); end

  # source://pg_search/lib/pg_search/multisearch.rb#38
  def message; end
end

# source://pg_search/lib/pg_search/multisearch/rebuilder.rb#5
class PgSearch::Multisearch::Rebuilder
  # @raise [ModelNotMultisearchable]
  # @return [Rebuilder] a new instance of Rebuilder
  #
  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#6
  def initialize(model, time_source = T.unsafe(nil)); end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#13
  def rebuild; end

  private

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#36
  def additional_attributes?; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#96
  def base_model_name; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#88
  def columns; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#27
  def conditional?; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#40
  def connection; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#82
  def content_expressions; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#108
  def current_time; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#104
  def documents_table; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#31
  def dynamic?; end

  # Returns the value of attribute model.
  #
  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#25
  def model; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#92
  def model_name; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#100
  def model_table; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#44
  def primary_key; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#62
  def rebuild_sql; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#48
  def rebuild_sql_template; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#78
  def replacements; end

  # source://pg_search/lib/pg_search/multisearch/rebuilder.rb#68
  def sti_clause; end
end

# source://pg_search/lib/pg_search/multisearchable.rb#6
module PgSearch::Multisearchable
  # source://pg_search/lib/pg_search/multisearchable.rb#57
  def create_or_update_pg_search_document; end

  # source://pg_search/lib/pg_search/multisearchable.rb#25
  def pg_search_document_attrs; end

  # source://pg_search/lib/pg_search/multisearchable.rb#19
  def searchable_text; end

  # @return [Boolean]
  #
  # source://pg_search/lib/pg_search/multisearchable.rb#35
  def should_update_pg_search_document?; end

  # source://pg_search/lib/pg_search/multisearchable.rb#42
  def update_pg_search_document; end

  class << self
    # @private
    #
    # source://pg_search/lib/pg_search/multisearchable.rb#7
    def included(mod); end
  end
end

# source://pg_search/lib/pg_search/normalizer.rb#4
class PgSearch::Normalizer
  # @return [Normalizer] a new instance of Normalizer
  #
  # source://pg_search/lib/pg_search/normalizer.rb#5
  def initialize(config); end

  # source://pg_search/lib/pg_search/normalizer.rb#9
  def add_normalization(sql_expression); end

  private

  # Returns the value of attribute config.
  #
  # source://pg_search/lib/pg_search/normalizer.rb#27
  def config; end
end

# source://pg_search/lib/pg_search.rb#64
class PgSearch::PgSearchHighlightNotSelected < ::StandardError
  # source://pg_search/lib/pg_search.rb#65
  def message; end
end

# source://pg_search/lib/pg_search.rb#57
class PgSearch::PgSearchRankNotSelected < ::StandardError
  # source://pg_search/lib/pg_search.rb#58
  def message; end
end

# source://pg_search/lib/pg_search/railtie.rb#4
class PgSearch::Railtie < ::Rails::Railtie; end

# source://pg_search/lib/pg_search/scope_options.rb#6
class PgSearch::ScopeOptions
  # @return [ScopeOptions] a new instance of ScopeOptions
  #
  # source://pg_search/lib/pg_search/scope_options.rb#9
  def initialize(config); end

  # source://pg_search/lib/pg_search/scope_options.rb#15
  def apply(scope); end

  # Returns the value of attribute config.
  #
  # source://pg_search/lib/pg_search/scope_options.rb#7
  def config; end

  # source://pg_search/lib/pg_search/scope_options.rb#79
  def connection(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute feature_options.
  #
  # source://pg_search/lib/pg_search/scope_options.rb#7
  def feature_options; end

  # Returns the value of attribute model.
  #
  # source://pg_search/lib/pg_search/scope_options.rb#7
  def model; end

  # source://pg_search/lib/pg_search/scope_options.rb#79
  def quoted_table_name(*_arg0, **_arg1, &_arg2); end

  private

  # source://pg_search/lib/pg_search/scope_options.rb#92
  def conditions; end

  # @raise [ArgumentError]
  #
  # source://pg_search/lib/pg_search/scope_options.rb#121
  def feature_for(feature_name); end

  # source://pg_search/lib/pg_search/scope_options.rb#148
  def include_table_aliasing_for_rank(scope); end

  # source://pg_search/lib/pg_search/scope_options.rb#99
  def order_within_rank; end

  # source://pg_search/lib/pg_search/scope_options.rb#103
  def primary_key; end

  # source://pg_search/lib/pg_search/scope_options.rb#138
  def rank; end

  # source://pg_search/lib/pg_search/scope_options.rb#144
  def rank_join(rank_table_alias); end

  # source://pg_search/lib/pg_search/scope_options.rb#81
  def subquery; end

  # source://pg_search/lib/pg_search/scope_options.rb#107
  def subquery_join; end
end

# source://pg_search/lib/pg_search/scope_options.rb#115
PgSearch::ScopeOptions::FEATURE_CLASSES = T.let(T.unsafe(nil), Hash)

# source://pg_search/lib/pg_search/scope_options.rb#57
module PgSearch::ScopeOptions::PgSearchRankTableAliasing
  # source://pg_search/lib/pg_search/scope_options.rb#58
  def pg_search_rank_table_alias(include_counter: T.unsafe(nil)); end

  private

  # source://pg_search/lib/pg_search/scope_options.rb#70
  def increment_counter; end
end

# source://pg_search/lib/pg_search/scope_options.rb#26
module PgSearch::ScopeOptions::WithPgSearchHighlight
  # source://pg_search/lib/pg_search/scope_options.rb#44
  def highlight; end

  # @raise [TypeError]
  #
  # source://pg_search/lib/pg_search/scope_options.rb#34
  def tsearch; end

  # source://pg_search/lib/pg_search/scope_options.rb#38
  def with_pg_search_highlight; end

  class << self
    # source://pg_search/lib/pg_search/scope_options.rb#27
    def [](tsearch); end
  end
end

# source://pg_search/lib/pg_search/scope_options.rb#49
module PgSearch::ScopeOptions::WithPgSearchRank
  # source://pg_search/lib/pg_search/scope_options.rb#50
  def with_pg_search_rank; end
end

# source://pg_search/lib/pg_search/version.rb#4
PgSearch::VERSION = T.let(T.unsafe(nil), String)
