# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `exception_notification` gem.
# Please instead update this file by running `bin/tapioca gem exception_notification`.

# Note: this class is only needed for Sidekiq version < 3.
#
# source://exception_notification/lib/exception_notification/rack.rb#3
module ExceptionNotification
  class << self
    # Alternative way to setup ExceptionNotification.
    # Run 'rails generate exception_notification:install' to create
    # a fresh initializer with all configuration values.
    #
    # @yield [ExceptionNotifier]
    #
    # source://exception_notification/lib/exception_notification.rb#11
    def configure; end
  end
end

# source://exception_notification/lib/exception_notification/rack.rb#4
class ExceptionNotification::Rack
  # @return [Rack] a new instance of Rack
  #
  # source://exception_notification/lib/exception_notification/rack.rb#7
  def initialize(app, options = T.unsafe(nil)); end

  # source://exception_notification/lib/exception_notification/rack.rb#48
  def call(env); end
end

# source://exception_notification/lib/exception_notification/rack.rb#5
class ExceptionNotification::Rack::CascadePassException < ::RuntimeError; end

# source://exception_notification/lib/exception_notification/version.rb#4
ExceptionNotification::VERSION = T.let(T.unsafe(nil), String)

# source://exception_notification/lib/exception_notifier/base_notifier.rb#3
module ExceptionNotifier
  include ::ExceptionNotifier::ErrorGrouping
  extend ::ExceptionNotifier::ErrorGrouping::ClassMethods

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#12
  def error_grouping; end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#12
  def error_grouping=(val); end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#20
  def error_grouping_cache; end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#20
  def error_grouping_cache=(val); end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#15
  def error_grouping_period; end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#15
  def error_grouping_period=(val); end

  # source://exception_notification/lib/exception_notifier.rb#34
  def ignored_exceptions; end

  # source://exception_notification/lib/exception_notifier.rb#34
  def ignored_exceptions=(val); end

  # source://exception_notification/lib/exception_notifier.rb#30
  def logger; end

  # source://exception_notification/lib/exception_notifier.rb#30
  def logger=(val); end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#18
  def notification_trigger; end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#18
  def notification_trigger=(val); end

  # source://exception_notification/lib/exception_notifier.rb#40
  def testing_mode; end

  # source://exception_notification/lib/exception_notifier.rb#40
  def testing_mode=(val); end

  class << self
    # source://exception_notification/lib/exception_notifier.rb#78
    def add_notifier(name, notifier_or_options); end

    # source://exception_notification/lib/exception_notifier.rb#120
    def clear_ignore_conditions!; end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#12
    def error_grouping; end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#12
    def error_grouping=(val); end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#20
    def error_grouping_cache; end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#20
    def error_grouping_cache=(val); end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#15
    def error_grouping_period; end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#15
    def error_grouping_period=(val); end

    # source://exception_notification/lib/exception_notifier.rb#114
    def ignore_crawlers(crawlers); end

    # Adds a condition to decide when an exception must be ignored or not.
    #
    #   ExceptionNotifier.ignore_if do |exception, options|
    #     not Rails.env.production?
    #   end
    #
    # source://exception_notification/lib/exception_notifier.rb#106
    def ignore_if(&block); end

    # source://exception_notification/lib/exception_notifier.rb#110
    def ignore_notifier_if(notifier, &block); end

    # source://exception_notification/lib/exception_notifier.rb#34
    def ignored_exceptions; end

    # source://exception_notification/lib/exception_notifier.rb#34
    def ignored_exceptions=(val); end

    # source://exception_notification/lib/exception_notifier.rb#30
    def logger; end

    # source://exception_notification/lib/exception_notifier.rb#30
    def logger=(val); end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#18
    def notification_trigger; end

    # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#18
    def notification_trigger=(val); end

    # source://exception_notification/lib/exception_notifier.rb#97
    def notifiers; end

    # source://exception_notification/lib/exception_notifier.rb#57
    def notify_exception(exception, options = T.unsafe(nil), &block); end

    # source://exception_notification/lib/exception_notifier.rb#78
    def register_exception_notifier(name, notifier_or_options); end

    # source://exception_notification/lib/exception_notifier.rb#93
    def registered_exception_notifier(name); end

    # source://exception_notification/lib/exception_notifier.rb#40
    def testing_mode; end

    # source://exception_notification/lib/exception_notifier.rb#53
    def testing_mode!; end

    # source://exception_notification/lib/exception_notifier.rb#40
    def testing_mode=(val); end

    # source://exception_notification/lib/exception_notifier.rb#89
    def unregister_exception_notifier(name); end

    private

    # source://exception_notification/lib/exception_notifier.rb#172
    def create_and_register_notifier(name, options); end

    # source://exception_notification/lib/exception_notifier.rb#159
    def fire_notification(notifier_name, exception, options, &block); end

    # source://exception_notification/lib/exception_notifier.rb#182
    def from_crawler(env, ignored_crawlers); end

    # @return [Boolean]
    #
    # source://exception_notification/lib/exception_notifier.rb#127
    def ignored?(exception, options); end

    # @return [Boolean]
    #
    # source://exception_notification/lib/exception_notifier.rb#153
    def ignored_exception?(ignore_array, exception); end

    # @return [Boolean]
    #
    # source://exception_notification/lib/exception_notifier.rb#138
    def notifier_ignored?(exception, options, notifier:); end
  end
end

# source://exception_notification/lib/exception_notifier/modules/backtrace_cleaner.rb#4
module ExceptionNotifier::BacktraceCleaner
  # source://exception_notification/lib/exception_notifier/modules/backtrace_cleaner.rb#5
  def clean_backtrace(exception); end
end

# source://exception_notification/lib/exception_notifier/base_notifier.rb#4
class ExceptionNotifier::BaseNotifier
  # @return [BaseNotifier] a new instance of BaseNotifier
  #
  # source://exception_notification/lib/exception_notifier/base_notifier.rb#7
  def initialize(options = T.unsafe(nil)); end

  # source://exception_notification/lib/exception_notifier/base_notifier.rb#24
  def _post_callback(exception, options, message, message_opts); end

  # source://exception_notification/lib/exception_notifier/base_notifier.rb#18
  def _pre_callback(exception, options, message, message_opts); end

  # Returns the value of attribute base_options.
  #
  # source://exception_notification/lib/exception_notifier/base_notifier.rb#5
  def base_options; end

  # Sets the attribute base_options
  #
  # @param value the value to set the attribute base_options to.
  #
  # source://exception_notification/lib/exception_notifier/base_notifier.rb#5
  def base_options=(_arg0); end

  # source://exception_notification/lib/exception_notifier/base_notifier.rb#11
  def send_notice(exception, options, message, message_opts = T.unsafe(nil)); end
end

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#6
class ExceptionNotifier::DatadogNotifier < ::ExceptionNotifier::BaseNotifier
  # @return [DatadogNotifier] a new instance of DatadogNotifier
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#10
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#16
  def call(exception, options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#7
  def client; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#22
  def datadog_event(exception, options = T.unsafe(nil)); end

  # Returns the value of attribute default_options.
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#7
  def default_options; end
end

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#29
class ExceptionNotifier::DatadogNotifier::DatadogExceptionEvent
  include ::ExceptionNotifier::BacktraceCleaner

  # @return [DatadogExceptionEvent] a new instance of DatadogExceptionEvent
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#40
  def initialize(exception, options); end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#53
  def backtrace; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#49
  def controller; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#65
  def event; end

  # Returns the value of attribute exception.
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#37
  def exception; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#124
  def formatted_backtrace; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#85
  def formatted_body; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#97
  def formatted_key_value(key, value); end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#101
  def formatted_request; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#116
  def formatted_session; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#78
  def formatted_title; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#140
  def inspect_object(object); end

  # Returns the value of attribute options.
  #
  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#37
  def options; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#45
  def request; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#57
  def tags; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#61
  def title_prefix; end

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#136
  def truncate(string, max); end

  private

  # source://exception_notification/lib/exception_notifier/datadog_notifier.rb#151
  def controller_subtitle; end
end

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#35
ExceptionNotifier::DatadogNotifier::DatadogExceptionEvent::ALERT_TYPE = T.let(T.unsafe(nil), String)

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#34
ExceptionNotifier::DatadogNotifier::DatadogExceptionEvent::MAX_BACKTRACE_SIZE = T.let(T.unsafe(nil), Integer)

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#32
ExceptionNotifier::DatadogNotifier::DatadogExceptionEvent::MAX_TITLE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://exception_notification/lib/exception_notifier/datadog_notifier.rb#33
ExceptionNotifier::DatadogNotifier::DatadogExceptionEvent::MAX_VALUE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://exception_notification/lib/exception_notifier/email_notifier.rb#9
class ExceptionNotifier::EmailNotifier < ::ExceptionNotifier::BaseNotifier
  # @return [EmailNotifier] a new instance of EmailNotifier
  #
  # source://exception_notification/lib/exception_notifier/email_notifier.rb#158
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/email_notifier.rb#168
  def call(exception, options = T.unsafe(nil)); end

  # source://exception_notification/lib/exception_notifier/email_notifier.rb#174
  def create_email(exception, options = T.unsafe(nil)); end

  private

  # source://exception_notification/lib/exception_notifier/email_notifier.rb#199
  def default_deliver_with(message); end

  # source://exception_notification/lib/exception_notifier/email_notifier.rb#192
  def mailer; end

  class << self
    # source://exception_notification/lib/exception_notifier/email_notifier.rb#186
    def normalize_digits(string); end
  end
end

# source://exception_notification/lib/exception_notifier/email_notifier.rb#10
ExceptionNotifier::EmailNotifier::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://exception_notification/lib/exception_notifier/email_notifier.rb#28
module ExceptionNotifier::EmailNotifier::Mailer
  class << self
    # @private
    #
    # source://exception_notification/lib/exception_notifier/email_notifier.rb#33
    def extended(base); end
  end
end

# source://exception_notification/lib/exception_notifier/email_notifier.rb#29
class ExceptionNotifier::EmailNotifier::Mailer::MissingController
  # source://exception_notification/lib/exception_notifier/email_notifier.rb#30
  def method_missing(*args, &block); end
end

# source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#8
module ExceptionNotifier::ErrorGrouping
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ExceptionNotifier::ErrorGrouping::ClassMethods
end

# source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#23
module ExceptionNotifier::ErrorGrouping::ClassMethods
  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#30
  def error_count(error_key); end

  # Fallback to the memory store while the specified cache store doesn't work
  #
  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#26
  def fallback_cache_store; end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#49
  def group_error!(exception, options); end

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#42
  def save_error_count(error_key, count); end

  # @return [Boolean]
  #
  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#72
  def send_notification?(exception, count); end

  private

  # source://exception_notification/lib/exception_notifier/modules/error_grouping.rb#83
  def log_cache_error(cache, exception, action); end
end

# source://exception_notification/lib/exception_notifier/modules/formatter.rb#7
class ExceptionNotifier::Formatter
  include ::ExceptionNotifier::BacktraceCleaner

  # @return [Formatter] a new instance of Formatter
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#12
  def initialize(exception, opts = T.unsafe(nil)); end

  # Returns the value of attribute app_name.
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#10
  def app_name; end

  # *Backtrace:*
  # ```
  # * app/controllers/my_controller.rb:99:in `specific_function'
  # * app/controllers/my_controller.rb:70:in `specific_param'
  # * app/controllers/my_controller.rb:53:in `my_controller_params'
  # ```
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#86
  def backtrace_message; end

  # home#index
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#103
  def controller_and_action; end

  # *Request:*
  # ```
  # * url : https://www.example.com/
  # * http_method : GET
  # * ip_address : 127.0.0.1
  # * parameters : {"controller"=>"home", "action"=>"index"}
  # * timestamp : 2019-01-01 00:00:00 UTC
  # ```
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#62
  def request_message; end

  # A *NoMethodError* occurred.
  # 3 *NoMethodError* occurred.
  # A *NoMethodError* occurred in *home#index*.
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#39
  def subtitle; end

  # :warning: Error occurred in production :warning:
  # :warning: Error occurred :warning:
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#24
  def title; end

  private

  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#121
  def controller; end

  # Returns the value of attribute env.
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#109
  def env; end

  # Returns the value of attribute errors_count.
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#109
  def errors_count; end

  # Returns the value of attribute exception.
  #
  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#109
  def exception; end

  # source://exception_notification/lib/exception_notifier/modules/formatter.rb#111
  def rails_app_name; end
end

# source://exception_notification/lib/exception_notifier/google_chat_notifier.rb#6
class ExceptionNotifier::GoogleChatNotifier < ::ExceptionNotifier::BaseNotifier
  # source://exception_notification/lib/exception_notifier/google_chat_notifier.rb#7
  def call(exception, opts = T.unsafe(nil)); end

  private

  # source://exception_notification/lib/exception_notifier/google_chat_notifier.rb#20
  def body(exception, formatter); end
end

# source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#4
class ExceptionNotifier::HipchatNotifier < ::ExceptionNotifier::BaseNotifier
  # @return [HipchatNotifier] a new instance of HipchatNotifier
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#9
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#36
  def call(exception, options = T.unsafe(nil)); end

  # Returns the value of attribute from.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#5
  def from; end

  # Sets the attribute from
  #
  # @param value the value to set the attribute from to.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#5
  def from=(_arg0); end

  # Returns the value of attribute message_options.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#7
  def message_options; end

  # Sets the attribute message_options
  #
  # @param value the value to set the attribute message_options to.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#7
  def message_options=(_arg0); end

  # Returns the value of attribute room.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#6
  def room; end

  # Sets the attribute room
  #
  # @param value the value to set the attribute room to.
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#6
  def room=(_arg0); end

  private

  # @return [Boolean]
  #
  # source://exception_notification/lib/exception_notifier/hipchat_notifier.rb#47
  def active?; end
end

# source://exception_notification/lib/exception_notifier/irc_notifier.rb#4
class ExceptionNotifier::IrcNotifier < ::ExceptionNotifier::BaseNotifier
  # @return [IrcNotifier] a new instance of IrcNotifier
  #
  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#5
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#11
  def call(exception, options = T.unsafe(nil)); end

  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#25
  def send_message(message); end

  private

  # @return [Boolean]
  #
  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#48
  def active?; end

  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#31
  def parse_options(options); end

  # @return [Boolean]
  #
  # source://exception_notification/lib/exception_notifier/irc_notifier.rb#52
  def valid_uri?(uri); end
end

# source://exception_notification/lib/exception_notifier/mattermost_notifier.rb#6
class ExceptionNotifier::MattermostNotifier < ::ExceptionNotifier::BaseNotifier
  # source://exception_notification/lib/exception_notifier/mattermost_notifier.rb#7
  def call(exception, opts = T.unsafe(nil)); end

  private

  # Returns the value of attribute formatter.
  #
  # source://exception_notification/lib/exception_notifier/mattermost_notifier.rb#39
  def formatter; end

  # source://exception_notification/lib/exception_notifier/mattermost_notifier.rb#70
  def message_issue_link; end

  # source://exception_notification/lib/exception_notifier/mattermost_notifier.rb#41
  def message_text; end
end

# source://exception_notification/lib/exception_notifier/notifier.rb#6
class ExceptionNotifier::Notifier
  class << self
    # source://exception_notification/lib/exception_notifier/notifier.rb#14
    def background_exception_notification(exception, options = T.unsafe(nil)); end

    # source://exception_notification/lib/exception_notifier/notifier.rb#7
    def exception_notification(env, exception, options = T.unsafe(nil)); end
  end
end

# source://exception_notification/lib/exception_notifier/slack_notifier.rb#4
class ExceptionNotifier::SlackNotifier < ::ExceptionNotifier::BaseNotifier
  include ::ExceptionNotifier::BacktraceCleaner

  # @return [SlackNotifier] a new instance of SlackNotifier
  #
  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#9
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#25
  def call(exception, options = T.unsafe(nil)); end

  # Returns the value of attribute notifier.
  #
  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#7
  def notifier; end

  # Sets the attribute notifier
  #
  # @param value the value to set the attribute notifier to.
  #
  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#7
  def notifier=(_arg0); end

  protected

  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#45
  def deep_reject(hash, block); end

  # @return [Boolean]
  #
  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#41
  def valid?; end

  private

  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#55
  def attchs(exception, clean_message, options); end

  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#91
  def fields(clean_message, backtrace, data); end

  # source://exception_notification/lib/exception_notifier/slack_notifier.rb#63
  def information_from_options(exception_class, options); end
end

# source://exception_notification/lib/exception_notifier/sns_notifier.rb#4
class ExceptionNotifier::SnsNotifier < ::ExceptionNotifier::BaseNotifier
  # @raise [ArgumentError]
  # @return [SnsNotifier] a new instance of SnsNotifier
  #
  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#5
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#20
  def call(exception, custom_opts = T.unsafe(nil)); end

  private

  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#70
  def accumulated_exception_name(exception, options); end

  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#43
  def build_message(exception, options); end

  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#37
  def build_subject(exception, options); end

  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#82
  def default_options; end

  # Returns the value of attribute notifier.
  #
  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#35
  def notifier; end

  # Returns the value of attribute options.
  #
  # source://exception_notification/lib/exception_notifier/sns_notifier.rb#35
  def options; end
end

# source://exception_notification/lib/exception_notifier/teams_notifier.rb#8
class ExceptionNotifier::TeamsNotifier < ::ExceptionNotifier::BaseNotifier
  include ::ExceptionNotifier::BacktraceCleaner

  # @return [TeamsNotifier] a new instance of TeamsNotifier
  #
  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#17
  def initialize(options = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#23
  def call(exception, options = T.unsafe(nil)); end

  # Returns the value of attribute httparty.
  #
  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#15
  def httparty; end

  # Sets the attribute httparty
  #
  # @param value the value to set the attribute httparty to.
  #
  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#15
  def httparty=(_arg0); end

  private

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#103
  def activity_title; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#168
  def controller_and_method; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#91
  def details; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#196
  def env_name; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#140
  def gitlab_issue_link; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#130
  def gitlab_view_link; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#176
  def hash_presentation(hash); end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#158
  def jira_issue_link; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#117
  def message_backtrace(size = T.unsafe(nil)); end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#110
  def message_request; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#68
  def message_text; end

  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#186
  def rails_app_name; end
end

# source://exception_notification/lib/exception_notifier/teams_notifier.rb#11
class ExceptionNotifier::TeamsNotifier::MissingController
  # source://exception_notification/lib/exception_notifier/teams_notifier.rb#12
  def method_missing(*args, &block); end
end

# source://exception_notification/lib/exception_notifier.rb#27
class ExceptionNotifier::UndefinedNotifierError < ::StandardError; end

# source://exception_notification/lib/exception_notifier/webhook_notifier.rb#7
class ExceptionNotifier::WebhookNotifier < ::ExceptionNotifier::BaseNotifier
  # @return [WebhookNotifier] a new instance of WebhookNotifier
  #
  # source://exception_notification/lib/exception_notifier/webhook_notifier.rb#8
  def initialize(options); end

  # source://exception_notification/lib/exception_notifier/webhook_notifier.rb#13
  def call(exception, options = T.unsafe(nil)); end
end
