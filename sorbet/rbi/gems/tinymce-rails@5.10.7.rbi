# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tinymce-rails` gem.
# Please instead update this file by running `bin/tapioca gem tinymce-rails`.

# source://tinymce-rails/lib/tinymce/rails.rb#1
module TinyMCE; end

# source://tinymce-rails/lib/tinymce/rails.rb#2
module TinyMCE::Rails
  class << self
    # source://tinymce-rails/lib/tinymce/rails.rb#10
    def configuration; end

    # source://tinymce-rails/lib/tinymce/rails.rb#15
    def configuration=(configuration); end

    # source://tinymce-rails/lib/tinymce/rails.rb#19
    def each_configuration(&block); end
  end
end

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#4
class TinyMCE::Rails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#63
  def initialize(options); end

  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#88
  def merge(options); end

  # Returns the value of attribute options.
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#61
  def options; end

  # Converts options into a TinyMCE-friendly format.
  #
  #  1. Joins array values using OPTION_SEPARATORS
  #  2. Converts JavaScript function() strings to Function objects
  #  3. Applies transformations from OPTION_TRANSFORMERS
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#84
  def options_for_tinymce; end

  # Converts options into a String representing a JavaScript object
  # that can be passed directly to tinyMCE.init
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#75
  def to_javascript; end

  private

  # @return [Boolean]
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#93
  def array_option?(key, value); end

  # @return [Boolean]
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#97
  def function_option?(value); end

  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#129
  def options_to_javascript(options, indent = T.unsafe(nil)); end

  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#111
  def preprocess_option(key, value); end

  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#101
  def preprocess_options(options); end

  class << self
    # source://tinymce-rails/lib/tinymce/rails/configuration.rb#11
    def defaults; end

    # source://tinymce-rails/lib/tinymce/rails/configuration.rb#67
    def new_with_defaults(options = T.unsafe(nil)); end
  end
end

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#21
TinyMCE::Rails::Configuration::COMMA = T.let(T.unsafe(nil), String)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#18
TinyMCE::Rails::Configuration::FUNCTION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#5
class TinyMCE::Rails::Configuration::Function < ::String
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#6
  def to_javascript; end
end

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#25
TinyMCE::Rails::Configuration::OPTION_SEPARATORS = T.let(T.unsafe(nil), Hash)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#47
TinyMCE::Rails::Configuration::OPTION_TRANSFORMERS = T.let(T.unsafe(nil), Hash)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#19
TinyMCE::Rails::Configuration::RELATIVE_PATH_REGEX = T.let(T.unsafe(nil), Regexp)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#23
TinyMCE::Rails::Configuration::SEMICOLON = T.let(T.unsafe(nil), String)

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#22
TinyMCE::Rails::Configuration::SPACE = T.let(T.unsafe(nil), String)

# source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#2
class TinyMCE::Rails::ConfigurationFile
  # @return [ConfigurationFile] a new instance of ConfigurationFile
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#5
  def initialize(path); end

  # @return [Boolean]
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#18
  def changed?; end

  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#9
  def configuration; end

  # Returns the value of attribute path.
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#3
  def path; end

  # @return [Boolean]
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#14
  def reload?; end

  private

  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#27
  def last_updated; end

  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#31
  def load_configuration; end

  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#45
  def load_yaml(path); end

  # @return [Boolean]
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration_file.rb#23
  def reloadable?; end
end

# source://tinymce-rails/lib/tinymce/rails/engine.rb#2
class TinyMCE::Rails::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.8lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#52
    def asset_host; end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#31
    def base; end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#76
    def config_path; end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#35
    def default_base; end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#67
    def normalize_host(host); end

    # source://tinymce-rails/lib/tinymce/rails/engine.rb#41
    def relative_url_root; end
  end
end

# source://tinymce-rails/lib/tinymce/rails/helper.rb#4
module TinyMCE::Rails::Helper
  # Initializes TinyMCE on the current page based on the global configuration.
  #
  # Custom options can be set via the options hash, which will be passed to
  # the TinyMCE init function.
  #
  # By default, all textareas with a class of "tinymce" will have the TinyMCE
  # editor applied. The current locale will also be used as the language when
  # TinyMCE language files are available, falling back to English if not
  # available. The :editor_selector and :language options can be used to
  # override these defaults.
  #
  # @example
  #   <%= tinymce(selector: "editorClass", theme: "inlite") %>
  #
  # source://tinymce-rails/lib/tinymce/rails/helper.rb#18
  def tinymce(config = T.unsafe(nil), options = T.unsafe(nil)); end

  # Includes TinyMCE javascript assets via a script tag.
  #
  # source://tinymce-rails/lib/tinymce/rails/helper.rb#66
  def tinymce_assets; end

  # Returns the TinyMCE configuration object.
  # It should be converted to JavaScript (via #to_javascript) for use within JavaScript.
  #
  # source://tinymce-rails/lib/tinymce/rails/helper.rb#52
  def tinymce_configuration(config = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the JavaScript code for initializing each configuration defined within tinymce.yml.
  #
  # source://tinymce-rails/lib/tinymce/rails/helper.rb#39
  def tinymce_configurations_javascript(options = T.unsafe(nil)); end

  # Returns the JavaScript code required to initialize TinyMCE.
  #
  # source://tinymce-rails/lib/tinymce/rails/helper.rb#31
  def tinymce_javascript(config = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # Initializes TinyMCE on the current page based on the global configuration.
    #
    # Custom options can be set via the options hash, which will be passed to
    # the TinyMCE init function.
    #
    # By default, all textareas with a class of "tinymce" will have the TinyMCE
    # editor applied. The current locale will also be used as the language when
    # TinyMCE language files are available, falling back to English if not
    # available. The :editor_selector and :language options can be used to
    # override these defaults.
    #
    # @example
    #   <%= tinymce(selector: "editorClass", theme: "inlite") %>
    #
    # source://tinymce-rails/lib/tinymce/rails/helper.rb#18
    def tinymce(config = T.unsafe(nil), options = T.unsafe(nil)); end

    # Returns the TinyMCE configuration object.
    # It should be converted to JavaScript (via #to_javascript) for use within JavaScript.
    #
    # source://tinymce-rails/lib/tinymce/rails/helper.rb#52
    def tinymce_configuration(config = T.unsafe(nil), options = T.unsafe(nil)); end

    # Returns the JavaScript code for initializing each configuration defined within tinymce.yml.
    #
    # source://tinymce-rails/lib/tinymce/rails/helper.rb#39
    def tinymce_configurations_javascript(options = T.unsafe(nil)); end

    # Returns the JavaScript code required to initialize TinyMCE.
    #
    # source://tinymce-rails/lib/tinymce/rails/helper.rb#31
    def tinymce_javascript(config = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://tinymce-rails/lib/tinymce/rails/configuration.rb#148
class TinyMCE::Rails::MultipleConfiguration < ::ActiveSupport::HashWithIndifferentAccess
  # @return [MultipleConfiguration] a new instance of MultipleConfiguration
  #
  # source://tinymce-rails/lib/tinymce/rails/configuration.rb#149
  def initialize(configurations = T.unsafe(nil)); end
end

# source://tinymce-rails/lib/tinymce/rails/version.rb#4
TinyMCE::Rails::TINYMCE_VERSION = T.let(T.unsafe(nil), String)

# source://tinymce-rails/lib/tinymce/rails/version.rb#3
TinyMCE::Rails::VERSION = T.let(T.unsafe(nil), String)
