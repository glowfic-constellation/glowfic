# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(T.untyped) }
  def password_confirmation; end

  sig { params(password_confirmation: T.untyped).returns(T.untyped) }
  def password_confirmation=(password_confirmation); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::User).void)
      ).returns(T.nilable(T::Enumerator[::User]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::User]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::User]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(::User) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Character)) }
    def active_character; end

    sig { params(value: T.nilable(::Character)).void }
    def active_character=(value); end

    sig { returns(T.nilable(::Icon)) }
    def avatar; end

    sig { params(value: T.nilable(::Icon)).void }
    def avatar=(value); end

    sig { returns(T::Array[T.untyped]) }
    def block_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def block_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :blocks`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Block::PrivateCollectionProxy) }
    def blocks; end

    sig { params(value: T::Enumerable[::Block]).void }
    def blocks=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def build_active_character(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def build_avatar(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ReportView) }
    def build_report_view(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def character_group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def character_group_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :character_groups`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CharacterGroup::PrivateCollectionProxy) }
    def character_groups; end

    sig { params(value: T::Enumerable[::CharacterGroup]).void }
    def character_groups=(value); end

    sig { returns(T::Array[T.untyped]) }
    def character_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def character_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :characters`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Character::PrivateCollectionProxy) }
    def characters; end

    sig { params(value: T::Enumerable[::Character]).void }
    def characters=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def create_active_character(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def create_active_character!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_avatar(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_avatar!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ReportView) }
    def create_report_view(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ReportView) }
    def create_report_view!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def favorited_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorited_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :favoriteds`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Favorite::PrivateCollectionProxy) }
    def favoriteds; end

    sig { params(value: T::Enumerable[::Favorite]).void }
    def favoriteds=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :favorites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Favorite::PrivateCollectionProxy) }
    def favorites; end

    sig { params(value: T::Enumerable[::Favorite]).void }
    def favorites=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :galleries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Gallery::PrivateCollectionProxy) }
    def galleries; end

    sig { params(value: T::Enumerable[::Gallery]).void }
    def galleries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gallery_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gallery_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def icon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def icon_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :icons`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Icon::PrivateCollectionProxy) }
    def icons; end

    sig { params(value: T::Enumerable[::Icon]).void }
    def icons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def index_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def index_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :indexes`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Index::PrivateCollectionProxy) }
    def indexes; end

    sig { params(value: T::Enumerable[::Index]).void }
    def indexes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def message_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def message_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :messages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Message::PrivateCollectionProxy) }
    def messages; end

    sig { params(value: T::Enumerable[::Message]).void }
    def messages=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :news`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::News::PrivateCollectionProxy) }
    def news; end

    sig { params(value: T::Enumerable[::News]).void }
    def news=(value); end

    sig { returns(T::Array[T.untyped]) }
    def news_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def news_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def password_reset_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def password_reset_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :password_resets`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PasswordReset::PrivateCollectionProxy) }
    def password_resets; end

    sig { params(value: T::Enumerable[::PasswordReset]).void }
    def password_resets=(value); end

    sig { returns(T::Array[T.untyped]) }
    def post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def post_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::PrivateCollectionProxy) }
    def posts; end

    sig { params(value: T::Enumerable[::Post]).void }
    def posts=(value); end

    sig { returns(T.nilable(::Character)) }
    def reload_active_character; end

    sig { returns(T.nilable(::Icon)) }
    def reload_avatar; end

    sig { returns(T.nilable(::ReportView)) }
    def reload_report_view; end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :replies`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reply::PrivateCollectionProxy) }
    def replies; end

    sig { params(value: T::Enumerable[::Reply]).void }
    def replies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reply_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_ids=(ids); end

    sig { returns(T.nilable(::ReportView)) }
    def report_view; end

    sig { params(value: T.nilable(::ReportView)).void }
    def report_view=(value); end

    sig { returns(T::Array[T.untyped]) }
    def sent_message_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def sent_message_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :sent_messages`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Message::PrivateCollectionProxy) }
    def sent_messages; end

    sig { params(value: T::Enumerable[::Message]).void }
    def sent_messages=(value); end

    sig { returns(T::Array[T.untyped]) }
    def template_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def template_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :templates`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Template::PrivateCollectionProxy) }
    def templates; end

    sig { params(value: T::Enumerable[::Template]).void }
    def templates=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def active_character_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def active_character_id=(value); end

    sig { returns(T::Boolean) }
    def active_character_id?; end

    sig { returns(T.nilable(::Integer)) }
    def active_character_id_before_last_save; end

    sig { returns(T.untyped) }
    def active_character_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_character_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_character_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_character_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def active_character_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def active_character_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def active_character_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def active_character_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def active_character_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def active_character_id_was; end

    sig { void }
    def active_character_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def avatar_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def avatar_id=(value); end

    sig { returns(T::Boolean) }
    def avatar_id?; end

    sig { returns(T.nilable(::Integer)) }
    def avatar_id_before_last_save; end

    sig { returns(T.untyped) }
    def avatar_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def avatar_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def avatar_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def avatar_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def avatar_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def avatar_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def avatar_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def avatar_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def avatar_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def avatar_id_was; end

    sig { void }
    def avatar_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def crypted; end

    sig { params(value: ::String).returns(::String) }
    def crypted=(value); end

    sig { returns(T::Boolean) }
    def crypted?; end

    sig { returns(T.nilable(::String)) }
    def crypted_before_last_save; end

    sig { returns(T.untyped) }
    def crypted_before_type_cast; end

    sig { returns(T::Boolean) }
    def crypted_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def crypted_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def crypted_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def crypted_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def crypted_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def crypted_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def crypted_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def crypted_previously_was; end

    sig { returns(T.nilable(::String)) }
    def crypted_was; end

    sig { void }
    def crypted_will_change!; end

    sig { returns(T.nilable(::String)) }
    def default_character_split; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def default_character_split=(value); end

    sig { returns(T::Boolean) }
    def default_character_split?; end

    sig { returns(T.nilable(::String)) }
    def default_character_split_before_last_save; end

    sig { returns(T.untyped) }
    def default_character_split_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_character_split_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_character_split_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_character_split_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_character_split_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_character_split_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_character_split_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_character_split_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_character_split_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_character_split_was; end

    sig { void }
    def default_character_split_will_change!; end

    sig { returns(T.nilable(::String)) }
    def default_editor; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def default_editor=(value); end

    sig { returns(T::Boolean) }
    def default_editor?; end

    sig { returns(T.nilable(::String)) }
    def default_editor_before_last_save; end

    sig { returns(T.untyped) }
    def default_editor_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_editor_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_editor_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_editor_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_editor_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_editor_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_editor_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_editor_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_editor_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_editor_was; end

    sig { void }
    def default_editor_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters=(value); end

    sig { returns(T::Boolean) }
    def default_hide_retired_characters?; end

    sig { returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters_before_last_save; end

    sig { returns(T.untyped) }
    def default_hide_retired_characters_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_hide_retired_characters_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def default_hide_retired_characters_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def default_hide_retired_characters_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def default_hide_retired_characters_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def default_hide_retired_characters_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def default_hide_retired_characters_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def default_hide_retired_characters_was; end

    sig { void }
    def default_hide_retired_characters_will_change!; end

    sig { returns(T.nilable(::String)) }
    def default_view; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def default_view=(value); end

    sig { returns(T::Boolean) }
    def default_view?; end

    sig { returns(T.nilable(::String)) }
    def default_view_before_last_save; end

    sig { returns(T.untyped) }
    def default_view_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_view_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_view_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_view_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_view_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_view_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def default_view_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def default_view_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def default_view_previously_was; end

    sig { returns(T.nilable(::String)) }
    def default_view_was; end

    sig { void }
    def default_view_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def deleted=(value); end

    sig { returns(T::Boolean) }
    def deleted?; end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def deleted_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def deleted_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def deleted_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def deleted_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def deleted_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def deleted_was; end

    sig { void }
    def deleted_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_notifications; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def email_notifications=(value); end

    sig { returns(T::Boolean) }
    def email_notifications?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_notifications_before_last_save; end

    sig { returns(T.untyped) }
    def email_notifications_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_notifications_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_notifications_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_notifications_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def email_notifications_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def email_notifications_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def email_notifications_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def email_notifications_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def email_notifications_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_notifications_was; end

    sig { void }
    def email_notifications_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def favorite_notifications; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def favorite_notifications=(value); end

    sig { returns(T::Boolean) }
    def favorite_notifications?; end

    sig { returns(T.nilable(T::Boolean)) }
    def favorite_notifications_before_last_save; end

    sig { returns(T.untyped) }
    def favorite_notifications_before_type_cast; end

    sig { returns(T::Boolean) }
    def favorite_notifications_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def favorite_notifications_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def favorite_notifications_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def favorite_notifications_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def favorite_notifications_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def favorite_notifications_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def favorite_notifications_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def favorite_notifications_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def favorite_notifications_was; end

    sig { void }
    def favorite_notifications_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed=(value); end

    sig { returns(T::Boolean) }
    def hide_hiatused_tags_owed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed_before_last_save; end

    sig { returns(T.untyped) }
    def hide_hiatused_tags_owed_before_type_cast; end

    sig { returns(T::Boolean) }
    def hide_hiatused_tags_owed_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_hiatused_tags_owed_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_hiatused_tags_owed_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hide_hiatused_tags_owed_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_hiatused_tags_owed_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hide_hiatused_tags_owed_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_hiatused_tags_owed_was; end

    sig { void }
    def hide_hiatused_tags_owed_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_warnings; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def hide_warnings=(value); end

    sig { returns(T::Boolean) }
    def hide_warnings?; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_warnings_before_last_save; end

    sig { returns(T.untyped) }
    def hide_warnings_before_type_cast; end

    sig { returns(T::Boolean) }
    def hide_warnings_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_warnings_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_warnings_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hide_warnings_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_warnings_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def hide_warnings_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def hide_warnings_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_warnings_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def hide_warnings_was; end

    sig { void }
    def hide_warnings_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping=(value); end

    sig { returns(T::Boolean) }
    def icon_picker_grouping?; end

    sig { returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping_before_last_save; end

    sig { returns(T.untyped) }
    def icon_picker_grouping_before_type_cast; end

    sig { returns(T::Boolean) }
    def icon_picker_grouping_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def icon_picker_grouping_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def icon_picker_grouping_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def icon_picker_grouping_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def icon_picker_grouping_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def icon_picker_grouping_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def icon_picker_grouping_was; end

    sig { void }
    def icon_picker_grouping_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report=(value); end

    sig { returns(T::Boolean) }
    def ignore_unread_daily_report?; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report_before_last_save; end

    sig { returns(T.untyped) }
    def ignore_unread_daily_report_before_type_cast; end

    sig { returns(T::Boolean) }
    def ignore_unread_daily_report_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def ignore_unread_daily_report_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def ignore_unread_daily_report_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def ignore_unread_daily_report_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def ignore_unread_daily_report_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def ignore_unread_daily_report_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def ignore_unread_daily_report_was; end

    sig { void }
    def ignore_unread_daily_report_will_change!; end

    sig { returns(T.nilable(::String)) }
    def layout; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def layout=(value); end

    sig { returns(T::Boolean) }
    def layout?; end

    sig { returns(T.nilable(::String)) }
    def layout_before_last_save; end

    sig { returns(T.untyped) }
    def layout_before_type_cast; end

    sig { returns(T::Boolean) }
    def layout_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def layout_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def layout_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def layout_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def layout_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def layout_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def layout_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def layout_previously_was; end

    sig { returns(T.nilable(::String)) }
    def layout_was; end

    sig { void }
    def layout_will_change!; end

    sig { returns(T.nilable(::String)) }
    def moiety; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def moiety=(value); end

    sig { returns(T::Boolean) }
    def moiety?; end

    sig { returns(T.nilable(::String)) }
    def moiety_before_last_save; end

    sig { returns(T.untyped) }
    def moiety_before_type_cast; end

    sig { returns(T::Boolean) }
    def moiety_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def moiety_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def moiety_in_database; end

    sig { returns(T.nilable(::String)) }
    def moiety_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def moiety_name=(value); end

    sig { returns(T::Boolean) }
    def moiety_name?; end

    sig { returns(T.nilable(::String)) }
    def moiety_name_before_last_save; end

    sig { returns(T.untyped) }
    def moiety_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def moiety_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def moiety_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def moiety_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def moiety_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def moiety_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def moiety_name_was; end

    sig { void }
    def moiety_name_will_change!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def moiety_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def moiety_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def moiety_previously_was; end

    sig { returns(T.nilable(::String)) }
    def moiety_was; end

    sig { void }
    def moiety_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def per_page; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def per_page=(value); end

    sig { returns(T::Boolean) }
    def per_page?; end

    sig { returns(T.nilable(::Integer)) }
    def per_page_before_last_save; end

    sig { returns(T.untyped) }
    def per_page_before_type_cast; end

    sig { returns(T::Boolean) }
    def per_page_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def per_page_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def per_page_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def per_page_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def per_page_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def per_page_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def per_page_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def per_page_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def per_page_was; end

    sig { void }
    def per_page_will_change!; end

    sig { void }
    def restore_active_character_id!; end

    sig { void }
    def restore_avatar_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_crypted!; end

    sig { void }
    def restore_default_character_split!; end

    sig { void }
    def restore_default_editor!; end

    sig { void }
    def restore_default_hide_retired_characters!; end

    sig { void }
    def restore_default_view!; end

    sig { void }
    def restore_deleted!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_email_notifications!; end

    sig { void }
    def restore_favorite_notifications!; end

    sig { void }
    def restore_hide_hiatused_tags_owed!; end

    sig { void }
    def restore_hide_warnings!; end

    sig { void }
    def restore_icon_picker_grouping!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_ignore_unread_daily_report!; end

    sig { void }
    def restore_layout!; end

    sig { void }
    def restore_moiety!; end

    sig { void }
    def restore_moiety_name!; end

    sig { void }
    def restore_per_page!; end

    sig { void }
    def restore_role_id!; end

    sig { void }
    def restore_salt_uuid!; end

    sig { void }
    def restore_show_user_in_switcher!; end

    sig { void }
    def restore_time_display!; end

    sig { void }
    def restore_timezone!; end

    sig { void }
    def restore_tos_version!; end

    sig { void }
    def restore_unread_opened!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_username!; end

    sig { void }
    def restore_visible_unread!; end

    sig { returns(T.nilable(::Integer)) }
    def role_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def role_id=(value); end

    sig { returns(T::Boolean) }
    def role_id?; end

    sig { returns(T.nilable(::Integer)) }
    def role_id_before_last_save; end

    sig { returns(T.untyped) }
    def role_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def role_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def role_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def role_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def role_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def role_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def role_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def role_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def role_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def role_id_was; end

    sig { void }
    def role_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def salt_uuid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def salt_uuid=(value); end

    sig { returns(T::Boolean) }
    def salt_uuid?; end

    sig { returns(T.nilable(::String)) }
    def salt_uuid_before_last_save; end

    sig { returns(T.untyped) }
    def salt_uuid_before_type_cast; end

    sig { returns(T::Boolean) }
    def salt_uuid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_uuid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_uuid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def salt_uuid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def salt_uuid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def salt_uuid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def salt_uuid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def salt_uuid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def salt_uuid_was; end

    sig { void }
    def salt_uuid_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_active_character_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_active_character_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_avatar_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_avatar_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_crypted; end

    sig { returns(T::Boolean) }
    def saved_change_to_crypted?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_default_character_split; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_character_split?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_default_editor; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_editor?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_default_hide_retired_characters; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_hide_retired_characters?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_default_view; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_view?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_deleted; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_email_notifications; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_notifications?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_favorite_notifications; end

    sig { returns(T::Boolean) }
    def saved_change_to_favorite_notifications?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_hide_hiatused_tags_owed; end

    sig { returns(T::Boolean) }
    def saved_change_to_hide_hiatused_tags_owed?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_hide_warnings; end

    sig { returns(T::Boolean) }
    def saved_change_to_hide_warnings?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_icon_picker_grouping; end

    sig { returns(T::Boolean) }
    def saved_change_to_icon_picker_grouping?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_ignore_unread_daily_report; end

    sig { returns(T::Boolean) }
    def saved_change_to_ignore_unread_daily_report?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_layout; end

    sig { returns(T::Boolean) }
    def saved_change_to_layout?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_moiety; end

    sig { returns(T::Boolean) }
    def saved_change_to_moiety?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_moiety_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_moiety_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_per_page; end

    sig { returns(T::Boolean) }
    def saved_change_to_per_page?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_role_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_role_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_salt_uuid; end

    sig { returns(T::Boolean) }
    def saved_change_to_salt_uuid?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_show_user_in_switcher; end

    sig { returns(T::Boolean) }
    def saved_change_to_show_user_in_switcher?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_time_display; end

    sig { returns(T::Boolean) }
    def saved_change_to_time_display?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_timezone; end

    sig { returns(T::Boolean) }
    def saved_change_to_timezone?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_tos_version; end

    sig { returns(T::Boolean) }
    def saved_change_to_tos_version?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_unread_opened; end

    sig { returns(T::Boolean) }
    def saved_change_to_unread_opened?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_username; end

    sig { returns(T::Boolean) }
    def saved_change_to_username?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_visible_unread; end

    sig { returns(T::Boolean) }
    def saved_change_to_visible_unread?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher=(value); end

    sig { returns(T::Boolean) }
    def show_user_in_switcher?; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher_before_last_save; end

    sig { returns(T.untyped) }
    def show_user_in_switcher_before_type_cast; end

    sig { returns(T::Boolean) }
    def show_user_in_switcher_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_user_in_switcher_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_user_in_switcher_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_user_in_switcher_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def show_user_in_switcher_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def show_user_in_switcher_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def show_user_in_switcher_was; end

    sig { void }
    def show_user_in_switcher_will_change!; end

    sig { returns(T.nilable(::String)) }
    def time_display; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def time_display=(value); end

    sig { returns(T::Boolean) }
    def time_display?; end

    sig { returns(T.nilable(::String)) }
    def time_display_before_last_save; end

    sig { returns(T.untyped) }
    def time_display_before_type_cast; end

    sig { returns(T::Boolean) }
    def time_display_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_display_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_display_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def time_display_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_display_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def time_display_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def time_display_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def time_display_previously_was; end

    sig { returns(T.nilable(::String)) }
    def time_display_was; end

    sig { void }
    def time_display_will_change!; end

    sig { returns(T.nilable(::String)) }
    def timezone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def timezone=(value); end

    sig { returns(T::Boolean) }
    def timezone?; end

    sig { returns(T.nilable(::String)) }
    def timezone_before_last_save; end

    sig { returns(T.untyped) }
    def timezone_before_type_cast; end

    sig { returns(T::Boolean) }
    def timezone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def timezone_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def timezone_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def timezone_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def timezone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def timezone_was; end

    sig { void }
    def timezone_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def tos_version; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def tos_version=(value); end

    sig { returns(T::Boolean) }
    def tos_version?; end

    sig { returns(T.nilable(::Integer)) }
    def tos_version_before_last_save; end

    sig { returns(T.untyped) }
    def tos_version_before_type_cast; end

    sig { returns(T::Boolean) }
    def tos_version_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tos_version_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tos_version_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def tos_version_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def tos_version_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def tos_version_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def tos_version_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def tos_version_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def tos_version_was; end

    sig { void }
    def tos_version_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def unread_opened; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def unread_opened=(value); end

    sig { returns(T::Boolean) }
    def unread_opened?; end

    sig { returns(T.nilable(T::Boolean)) }
    def unread_opened_before_last_save; end

    sig { returns(T.untyped) }
    def unread_opened_before_type_cast; end

    sig { returns(T::Boolean) }
    def unread_opened_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def unread_opened_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def unread_opened_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def unread_opened_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def unread_opened_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def unread_opened_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def unread_opened_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def unread_opened_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def unread_opened_was; end

    sig { void }
    def unread_opened_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::String) }
    def username; end

    sig { params(value: ::String).returns(::String) }
    def username=(value); end

    sig { returns(T::Boolean) }
    def username?; end

    sig { returns(T.nilable(::String)) }
    def username_before_last_save; end

    sig { returns(T.untyped) }
    def username_before_type_cast; end

    sig { returns(T::Boolean) }
    def username_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def username_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def username_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def username_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def username_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def username_previously_was; end

    sig { returns(T.nilable(::String)) }
    def username_was; end

    sig { void }
    def username_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_unread; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def visible_unread=(value); end

    sig { returns(T::Boolean) }
    def visible_unread?; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_unread_before_last_save; end

    sig { returns(T.untyped) }
    def visible_unread_before_type_cast; end

    sig { returns(T::Boolean) }
    def visible_unread_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_unread_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_unread_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def visible_unread_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_unread_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def visible_unread_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def visible_unread_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_unread_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def visible_unread_was; end

    sig { void }
    def visible_unread_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active_character_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_avatar_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_crypted?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_character_split?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_editor?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_hide_retired_characters?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_view?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_notifications?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_favorite_notifications?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hide_hiatused_tags_owed?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hide_warnings?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_icon_picker_grouping?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_ignore_unread_daily_report?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_layout?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_moiety?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_moiety_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_per_page?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_role_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_salt_uuid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_show_user_in_switcher?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_time_display?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_timezone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tos_version?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unread_opened?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_username?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_visible_unread?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def full(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])
      ).returns(T::Array[::User])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User } }

    sig { returns(T::Array[::User]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::User } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
