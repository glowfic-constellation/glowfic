# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Post`.
# Please instead update this file by running `bin/tapioca dsl Post`.

class Post
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def privacies; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Post]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Post)) }
    def fifth; end

    sig { returns(::Post) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Post)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Post) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Post).void)
      ).returns(T.nilable(T::Enumerator[::Post]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Post]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Post]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Post)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Post) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Post) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Post) }
    def first!; end

    sig { returns(T.nilable(::Post)) }
    def forty_two; end

    sig { returns(::Post) }
    def forty_two!; end

    sig { returns(T.nilable(::Post)) }
    def fourth; end

    sig { returns(::Post) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Post) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Post).void)).returns(::Post) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Post).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Post)) }
    def second; end

    sig { returns(::Post) }
    def second!; end

    sig { returns(T.nilable(::Post)) }
    def second_to_last; end

    sig { returns(::Post) }
    def second_to_last!; end

    sig { returns(::Post) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Post) }
    def take!; end

    sig { returns(T.nilable(::Post)) }
    def third; end

    sig { returns(::Post) }
    def third!; end

    sig { returns(T.nilable(::Post)) }
    def third_to_last; end

    sig { returns(::Post) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def abandoned!; end

    sig { returns(T::Boolean) }
    def abandoned?; end

    sig { void }
    def active!; end

    sig { returns(T::Boolean) }
    def active?; end

    sig { void }
    def complete!; end

    sig { returns(T::Boolean) }
    def complete?; end

    sig { void }
    def hiatus!; end

    sig { returns(T::Boolean) }
    def hiatus?; end

    sig { void }
    def privacy_access_list!; end

    sig { returns(T::Boolean) }
    def privacy_access_list?; end

    sig { void }
    def privacy_full_accounts!; end

    sig { returns(T::Boolean) }
    def privacy_full_accounts?; end

    sig { void }
    def privacy_private!; end

    sig { returns(T::Boolean) }
    def privacy_private?; end

    sig { void }
    def privacy_public!; end

    sig { returns(T::Boolean) }
    def privacy_public?; end

    sig { void }
    def privacy_registered!; end

    sig { returns(T::Boolean) }
    def privacy_registered?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def associated_audit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def associated_audit_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :associated_audits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Audited::Audit::PrivateCollectionProxy) }
    def associated_audits; end

    sig { params(value: T::Enumerable[::Audited::Audit]).void }
    def associated_audits=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :audits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Audited::Audit::PrivateCollectionProxy) }
    def audits; end

    sig { params(value: T::Enumerable[::Audited::Audit]).void }
    def audits=(value); end

    sig { returns(T::Array[T.untyped]) }
    def author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :authors, through: :post_authors`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def authors; end

    sig { params(value: T::Enumerable[::User]).void }
    def authors=(value); end

    sig { returns(T.nilable(::Board)) }
    def board; end

    sig { params(value: T.nilable(::Board)).void }
    def board=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Board) }
    def build_board(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def build_character(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterAlias) }
    def build_character_alias(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FlatPost) }
    def build_flat_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def build_icon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Reply) }
    def build_last_reply(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_last_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BoardSection) }
    def build_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T.nilable(::Character)) }
    def character; end

    sig { params(value: T.nilable(::Character)).void }
    def character=(value); end

    sig { returns(T.nilable(::CharacterAlias)) }
    def character_alias; end

    sig { params(value: T.nilable(::CharacterAlias)).void }
    def character_alias=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def character_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def content_warning_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def content_warning_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :content_warnings, through: :post_tags`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::ContentWarning::PrivateCollectionProxy) }
    def content_warnings; end

    sig { params(value: T::Enumerable[::ContentWarning]).void }
    def content_warnings=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Board) }
    def create_board(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Board) }
    def create_board!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def create_character(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Character) }
    def create_character!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterAlias) }
    def create_character_alias(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterAlias) }
    def create_character_alias!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FlatPost) }
    def create_flat_post(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::FlatPost) }
    def create_flat_post!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_icon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_icon!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Reply) }
    def create_last_reply(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Reply) }
    def create_last_reply!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_last_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_last_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BoardSection) }
    def create_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BoardSection) }
    def create_section!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :favorites`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Favorite::PrivateCollectionProxy) }
    def favorites; end

    sig { params(value: T::Enumerable[::Favorite]).void }
    def favorites=(value); end

    sig { returns(T.nilable(::FlatPost)) }
    def flat_post; end

    sig { params(value: T.nilable(::FlatPost)).void }
    def flat_post=(value); end

    sig { returns(T.nilable(::Icon)) }
    def icon; end

    sig { params(value: T.nilable(::Icon)).void }
    def icon=(value); end

    sig { returns(T::Array[T.untyped]) }
    def index_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def index_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def index_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def index_post_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :index_posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::IndexPost::PrivateCollectionProxy) }
    def index_posts; end

    sig { params(value: T::Enumerable[::IndexPost]).void }
    def index_posts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def index_section_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def index_section_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :index_sections, through: :index_posts`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::IndexSection::PrivateCollectionProxy) }
    def index_sections; end

    sig { params(value: T::Enumerable[::IndexSection]).void }
    def index_sections=(value); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :indexes, through: :index_posts`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Index::PrivateCollectionProxy) }
    def indexes; end

    sig { params(value: T::Enumerable[::Index]).void }
    def indexes=(value); end

    sig { returns(T::Array[T.untyped]) }
    def joined_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def joined_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :joined_authors, through: :joined_post_authors`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def joined_authors; end

    sig { params(value: T::Enumerable[::User]).void }
    def joined_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def joined_post_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def joined_post_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :joined_post_authors`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::Author::PrivateCollectionProxy) }
    def joined_post_authors; end

    sig { params(value: T::Enumerable[::Post::Author]).void }
    def joined_post_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def label_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def label_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :labels, through: :post_tags`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Label::PrivateCollectionProxy) }
    def labels; end

    sig { params(value: T::Enumerable[::Label]).void }
    def labels=(value); end

    sig { returns(T.nilable(::Reply)) }
    def last_reply; end

    sig { params(value: T.nilable(::Reply)).void }
    def last_reply=(value); end

    sig { returns(T.nilable(::User)) }
    def last_user; end

    sig { params(value: T.nilable(::User)).void }
    def last_user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def post_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def post_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :post_authors`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::Author::PrivateCollectionProxy) }
    def post_authors; end

    sig { params(value: T::Enumerable[::Post::Author]).void }
    def post_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def post_tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def post_tag_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :post_tags`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostTag::PrivateCollectionProxy) }
    def post_tags; end

    sig { params(value: T::Enumerable[::PostTag]).void }
    def post_tags=(value); end

    sig { returns(T::Array[T.untyped]) }
    def post_viewer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def post_viewer_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :post_viewers`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::PostViewer::PrivateCollectionProxy) }
    def post_viewers; end

    sig { params(value: T::Enumerable[::PostViewer]).void }
    def post_viewers=(value); end

    sig { returns(T.nilable(::Board)) }
    def reload_board; end

    sig { returns(T.nilable(::Character)) }
    def reload_character; end

    sig { returns(T.nilable(::CharacterAlias)) }
    def reload_character_alias; end

    sig { returns(T.nilable(::FlatPost)) }
    def reload_flat_post; end

    sig { returns(T.nilable(::Icon)) }
    def reload_icon; end

    sig { returns(T.nilable(::Reply)) }
    def reload_last_reply; end

    sig { returns(T.nilable(::User)) }
    def reload_last_user; end

    sig { returns(T.nilable(::BoardSection)) }
    def reload_section; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :replies`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reply::PrivateCollectionProxy) }
    def replies; end

    sig { params(value: T::Enumerable[::Reply]).void }
    def replies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reply_draft_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_draft_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :reply_drafts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReplyDraft::PrivateCollectionProxy) }
    def reply_drafts; end

    sig { params(value: T::Enumerable[::ReplyDraft]).void }
    def reply_drafts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reply_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_ids=(ids); end

    sig { returns(T.nilable(::BoardSection)) }
    def section; end

    sig { params(value: T.nilable(::BoardSection)).void }
    def section=(value); end

    sig { returns(T::Array[T.untyped]) }
    def setting_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def setting_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :settings, through: :post_tags`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Setting::PrivateCollectionProxy) }
    def settings; end

    sig { params(value: T::Enumerable[::Setting]).void }
    def settings=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tagging_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tagging_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :tagging_authors, through: :tagging_post_authors`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def tagging_authors; end

    sig { params(value: T::Enumerable[::User]).void }
    def tagging_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def tagging_post_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def tagging_post_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :tagging_post_authors`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::Author::PrivateCollectionProxy) }
    def tagging_post_authors; end

    sig { params(value: T::Enumerable[::Post::Author]).void }
    def tagging_post_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def unjoined_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def unjoined_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :unjoined_authors, through: :unjoined_post_authors`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def unjoined_authors; end

    sig { params(value: T::Enumerable[::User]).void }
    def unjoined_authors=(value); end

    sig { returns(T::Array[T.untyped]) }
    def unjoined_post_author_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def unjoined_post_author_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :unjoined_post_authors`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::Author::PrivateCollectionProxy) }
    def unjoined_post_authors; end

    sig { params(value: T::Enumerable[::Post::Author]).void }
    def unjoined_post_authors=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def view_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def view_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def viewer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def viewer_ids=(ids); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :viewers, through: :post_viewers`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::User::PrivateCollectionProxy) }
    def viewers; end

    sig { params(value: T::Enumerable[::User]).void }
    def viewers=(value); end

    # This method is created by ActiveRecord on the `Post` class because it declared `has_many :views`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::View::PrivateCollectionProxy) }
    def views; end

    sig { params(value: T::Enumerable[::Post::View]).void }
    def views=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def abandoned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def hiatus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def no_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_abandoned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_hiatus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_access_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_full_accounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_privacy_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_by_index(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_in_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered_manually(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_access_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_full_accounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def privacy_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_has_content_warnings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_reply_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def authors_locked; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def authors_locked=(value); end

    sig { returns(T::Boolean) }
    def authors_locked?; end

    sig { returns(T.nilable(T::Boolean)) }
    def authors_locked_before_last_save; end

    sig { returns(T.untyped) }
    def authors_locked_before_type_cast; end

    sig { returns(T::Boolean) }
    def authors_locked_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def authors_locked_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def authors_locked_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def authors_locked_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authors_locked_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def authors_locked_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def authors_locked_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def authors_locked_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def authors_locked_was; end

    sig { void }
    def authors_locked_will_change!; end

    sig { returns(::Integer) }
    def board_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def board_id=(value); end

    sig { returns(T::Boolean) }
    def board_id?; end

    sig { returns(T.nilable(::Integer)) }
    def board_id_before_last_save; end

    sig { returns(T.untyped) }
    def board_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def board_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def board_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def board_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def board_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def board_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def board_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def board_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def board_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def board_id_was; end

    sig { void }
    def board_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def character_alias_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def character_alias_id=(value); end

    sig { returns(T::Boolean) }
    def character_alias_id?; end

    sig { returns(T.nilable(::Integer)) }
    def character_alias_id_before_last_save; end

    sig { returns(T.untyped) }
    def character_alias_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def character_alias_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_alias_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_alias_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_alias_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_alias_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_alias_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_alias_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_alias_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def character_alias_id_was; end

    sig { void }
    def character_alias_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def character_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def character_id=(value); end

    sig { returns(T::Boolean) }
    def character_id?; end

    sig { returns(T.nilable(::Integer)) }
    def character_id_before_last_save; end

    sig { returns(T.untyped) }
    def character_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def character_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def character_id_was; end

    sig { void }
    def character_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def content; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def content=(value); end

    sig { returns(T::Boolean) }
    def content?; end

    sig { returns(T.nilable(::String)) }
    def content_before_last_save; end

    sig { returns(T.untyped) }
    def content_before_type_cast; end

    sig { returns(T::Boolean) }
    def content_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def content_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def content_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def content_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def content_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def content_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def content_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def content_previously_was; end

    sig { returns(T.nilable(::String)) }
    def content_was; end

    sig { void }
    def content_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at=(value); end

    sig { returns(T::Boolean) }
    def edited_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at_before_last_save; end

    sig { returns(T.untyped) }
    def edited_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def edited_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def edited_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def edited_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def edited_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def edited_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def edited_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def edited_at_was; end

    sig { void }
    def edited_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def editor_mode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def editor_mode=(value); end

    sig { returns(T::Boolean) }
    def editor_mode?; end

    sig { returns(T.nilable(::String)) }
    def editor_mode_before_last_save; end

    sig { returns(T.untyped) }
    def editor_mode_before_type_cast; end

    sig { returns(T::Boolean) }
    def editor_mode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def editor_mode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def editor_mode_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def editor_mode_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def editor_mode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def editor_mode_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def editor_mode_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def editor_mode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def editor_mode_was; end

    sig { void }
    def editor_mode_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def icon_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def icon_id=(value); end

    sig { returns(T::Boolean) }
    def icon_id?; end

    sig { returns(T.nilable(::Integer)) }
    def icon_id_before_last_save; end

    sig { returns(T.untyped) }
    def icon_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def icon_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def icon_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def icon_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def icon_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def icon_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def icon_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def icon_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def icon_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def icon_id_was; end

    sig { void }
    def icon_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_reply_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_reply_id=(value); end

    sig { returns(T::Boolean) }
    def last_reply_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_reply_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_reply_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_reply_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_reply_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_reply_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_reply_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_reply_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_reply_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_reply_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_reply_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_reply_id_was; end

    sig { void }
    def last_reply_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def last_user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def last_user_id=(value); end

    sig { returns(T::Boolean) }
    def last_user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def last_user_id_before_last_save; end

    sig { returns(T.untyped) }
    def last_user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_user_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def last_user_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def last_user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def last_user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def last_user_id_was; end

    sig { void }
    def last_user_id_will_change!; end

    sig { returns(::String) }
    def privacy; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def privacy=(value); end

    sig { returns(T::Boolean) }
    def privacy?; end

    sig { returns(T.nilable(::String)) }
    def privacy_before_last_save; end

    sig { returns(T.untyped) }
    def privacy_before_type_cast; end

    sig { returns(T::Boolean) }
    def privacy_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def privacy_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def privacy_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def privacy_previously_was; end

    sig { returns(T.nilable(::String)) }
    def privacy_was; end

    sig { void }
    def privacy_will_change!; end

    sig { void }
    def restore_authors_locked!; end

    sig { void }
    def restore_board_id!; end

    sig { void }
    def restore_character_alias_id!; end

    sig { void }
    def restore_character_id!; end

    sig { void }
    def restore_content!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_edited_at!; end

    sig { void }
    def restore_editor_mode!; end

    sig { void }
    def restore_icon_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_reply_id!; end

    sig { void }
    def restore_last_user_id!; end

    sig { void }
    def restore_privacy!; end

    sig { void }
    def restore_section_id!; end

    sig { void }
    def restore_section_order!; end

    sig { void }
    def restore_status!; end

    sig { void }
    def restore_subject!; end

    sig { void }
    def restore_tagged_at!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_authors_locked; end

    sig { returns(T::Boolean) }
    def saved_change_to_authors_locked?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_board_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_board_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_character_alias_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_character_alias_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_character_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_character_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_content; end

    sig { returns(T::Boolean) }
    def saved_change_to_content?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_edited_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_edited_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_editor_mode; end

    sig { returns(T::Boolean) }
    def saved_change_to_editor_mode?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_icon_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_icon_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_reply_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_reply_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_last_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_user_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_privacy; end

    sig { returns(T::Boolean) }
    def saved_change_to_privacy?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_section_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_section_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_section_order; end

    sig { returns(T::Boolean) }
    def saved_change_to_section_order?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_status?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_subject; end

    sig { returns(T::Boolean) }
    def saved_change_to_subject?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_tagged_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_tagged_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def section_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def section_id=(value); end

    sig { returns(T::Boolean) }
    def section_id?; end

    sig { returns(T.nilable(::Integer)) }
    def section_id_before_last_save; end

    sig { returns(T.untyped) }
    def section_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def section_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def section_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def section_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def section_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def section_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def section_id_was; end

    sig { void }
    def section_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def section_order; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def section_order=(value); end

    sig { returns(T::Boolean) }
    def section_order?; end

    sig { returns(T.nilable(::Integer)) }
    def section_order_before_last_save; end

    sig { returns(T.untyped) }
    def section_order_before_type_cast; end

    sig { returns(T::Boolean) }
    def section_order_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_order_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_order_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def section_order_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def section_order_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def section_order_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def section_order_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def section_order_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def section_order_was; end

    sig { void }
    def section_order_will_change!; end

    sig { returns(T.nilable(::String)) }
    def status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def status=(value); end

    sig { returns(T::Boolean) }
    def status?; end

    sig { returns(T.nilable(::String)) }
    def status_before_last_save; end

    sig { returns(T.untyped) }
    def status_before_type_cast; end

    sig { returns(T::Boolean) }
    def status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def status_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def status_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def status_was; end

    sig { void }
    def status_will_change!; end

    sig { returns(::String) }
    def subject; end

    sig { params(value: ::String).returns(::String) }
    def subject=(value); end

    sig { returns(T::Boolean) }
    def subject?; end

    sig { returns(T.nilable(::String)) }
    def subject_before_last_save; end

    sig { returns(T.untyped) }
    def subject_before_type_cast; end

    sig { returns(T::Boolean) }
    def subject_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def subject_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def subject_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def subject_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subject_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def subject_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def subject_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def subject_previously_was; end

    sig { returns(T.nilable(::String)) }
    def subject_was; end

    sig { void }
    def subject_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at=(value); end

    sig { returns(T::Boolean) }
    def tagged_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at_before_last_save; end

    sig { returns(T.untyped) }
    def tagged_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def tagged_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def tagged_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def tagged_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def tagged_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def tagged_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def tagged_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def tagged_at_was; end

    sig { void }
    def tagged_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_authors_locked?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_board_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_character_alias_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_character_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_content?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_edited_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_editor_mode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_icon_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_reply_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_user_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_privacy?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_section_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_section_order?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_subject?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tagged_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def abandoned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def hiatus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def no_tests(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_abandoned(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_complete(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_hiatus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_access_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_full_accounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_privacy_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_by_index(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_in_section(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered_manually(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_access_list(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_full_accounts(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_private(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_public(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def privacy_registered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def visible_to(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_has_content_warnings(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_reply_count(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Post } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Post, Integer, String, T::Enumerable[T.any(::Post, Integer, String, T::Enumerable[::Post])])
      ).returns(T::Array[::Post])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Post, Integer, String, T::Enumerable[T.any(::Post, Integer, String, T::Enumerable[::Post])])
      ).returns(T::Array[::Post])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Post]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Post, T::Enumerable[T.any(::Post, T::Enumerable[::Post])])
      ).returns(T::Array[::Post])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Post]) }
    def target; end

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Post } }

    sig { returns(T::Array[::Post]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Post } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
