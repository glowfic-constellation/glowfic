# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Character`.
# Please instead update this file by running `bin/tapioca dsl Character`.

class Character
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Character).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Character]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Character)) }
    def fifth; end

    sig { returns(::Character) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Character)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Character) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(T.nilable(T::Enumerator[::Character]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Character]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Character]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Character)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Character) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Character) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Character) }
    def first!; end

    sig { returns(T.nilable(::Character)) }
    def forty_two; end

    sig { returns(::Character) }
    def forty_two!; end

    sig { returns(T.nilable(::Character)) }
    def fourth; end

    sig { returns(::Character) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Character) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Character).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Character).void)
      ).returns(::Character)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Character).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Character).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(options: T::Hash[T.untyped, T.untyped]).returns(PrivateRelation) }
    def paginate(options); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Character)) }
    def second; end

    sig { returns(::Character) }
    def second!; end

    sig { returns(T.nilable(::Character)) }
    def second_to_last; end

    sig { returns(::Character) }
    def second_to_last!; end

    sig { returns(::Character) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Character) }
    def take!; end

    sig { returns(T.nilable(::Character)) }
    def third; end

    sig { returns(::Character) }
    def third!; end

    sig { returns(T.nilable(::Character)) }
    def third_to_last; end

    sig { returns(::Character) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::User)) }
    def active_user; end

    sig { params(value: T.nilable(::User)).void }
    def active_user=(value); end

    sig { returns(T::Array[T.untyped]) }
    def alias_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def alias_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :aliases`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CharacterAlias::PrivateCollectionProxy) }
    def aliases; end

    sig { params(value: T::Enumerable[::CharacterAlias]).void }
    def aliases=(value); end

    sig { returns(T::Array[T.untyped]) }
    def audit_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def audit_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :audits`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Audited::Audit::PrivateCollectionProxy) }
    def audits; end

    sig { params(value: T::Enumerable[::Audited::Audit]).void }
    def audits=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_active_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterGroup) }
    def build_character_group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def build_default_icon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Template) }
    def build_template(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { returns(T.nilable(::CharacterGroup)) }
    def character_group; end

    sig { params(value: T.nilable(::CharacterGroup)).void }
    def character_group=(value); end

    sig { returns(T::Array[T.untyped]) }
    def character_tag_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def character_tag_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :character_tags`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CharacterTag::PrivateCollectionProxy) }
    def character_tags; end

    sig { params(value: T::Enumerable[::CharacterTag]).void }
    def character_tags=(value); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :characters_galleries`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::CharactersGallery::PrivateCollectionProxy) }
    def characters_galleries; end

    sig { params(value: T::Enumerable[::CharactersGallery]).void }
    def characters_galleries=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def characters_galleries_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def characters_gallery_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def characters_gallery_ids=(ids); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_active_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_active_user!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterGroup) }
    def create_character_group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::CharacterGroup) }
    def create_character_group!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_default_icon(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Icon) }
    def create_default_icon!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Template) }
    def create_template(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Template) }
    def create_template!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::Icon)) }
    def default_icon; end

    sig { params(value: T.nilable(::Icon)).void }
    def default_icon=(value); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :galleries, through: :characters_galleries`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Gallery::PrivateCollectionProxy) }
    def galleries; end

    sig { params(value: T::Enumerable[::Gallery]).void }
    def galleries=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gallery_group_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gallery_group_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :gallery_groups, through: :character_tags`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::GalleryGroup::PrivateCollectionProxy) }
    def gallery_groups; end

    sig { params(value: T::Enumerable[::GalleryGroup]).void }
    def gallery_groups=(value); end

    sig { returns(T::Array[T.untyped]) }
    def gallery_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def gallery_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def icon_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def icon_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :icons, through: :galleries`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Icon::PrivateCollectionProxy) }
    def icons; end

    sig { params(value: T::Enumerable[::Icon]).void }
    def icons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def post_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :posts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Post::PrivateCollectionProxy) }
    def posts; end

    sig { params(value: T::Enumerable[::Post]).void }
    def posts=(value); end

    sig { returns(T.nilable(::User)) }
    def reload_active_user; end

    sig { returns(T.nilable(::CharacterGroup)) }
    def reload_character_group; end

    sig { returns(T.nilable(::Icon)) }
    def reload_default_icon; end

    sig { returns(T.nilable(::Template)) }
    def reload_template; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :replies`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Reply::PrivateCollectionProxy) }
    def replies; end

    sig { params(value: T::Enumerable[::Reply]).void }
    def replies=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reply_draft_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_draft_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :reply_drafts`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::ReplyDraft::PrivateCollectionProxy) }
    def reply_drafts; end

    sig { params(value: T::Enumerable[::ReplyDraft]).void }
    def reply_drafts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def reply_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def reply_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def setting_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def setting_ids=(ids); end

    # This method is created by ActiveRecord on the `Character` class because it declared `has_many :settings, through: :character_tags`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Setting::PrivateCollectionProxy) }
    def settings; end

    sig { params(value: T::Enumerable[::Setting]).void }
    def settings=(value); end

    sig { returns(T.nilable(::Template)) }
    def template; end

    sig { params(value: T.nilable(::Template)).void }
    def template=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def template_attributes=(attributes); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def non_npcs(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def npcs(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def character_group_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def character_group_id=(value); end

    sig { returns(T::Boolean) }
    def character_group_id?; end

    sig { returns(T.nilable(::Integer)) }
    def character_group_id_before_last_save; end

    sig { returns(T.untyped) }
    def character_group_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def character_group_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_group_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_group_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_group_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_group_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def character_group_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def character_group_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def character_group_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def character_group_id_was; end

    sig { void }
    def character_group_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def cluster; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def cluster=(value); end

    sig { returns(T::Boolean) }
    def cluster?; end

    sig { returns(T.nilable(::String)) }
    def cluster_before_last_save; end

    sig { returns(T.untyped) }
    def cluster_before_type_cast; end

    sig { returns(T::Boolean) }
    def cluster_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cluster_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cluster_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cluster_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cluster_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cluster_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def cluster_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def cluster_previously_was; end

    sig { returns(T.nilable(::String)) }
    def cluster_was; end

    sig { void }
    def cluster_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def default_icon_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def default_icon_id=(value); end

    sig { returns(T::Boolean) }
    def default_icon_id?; end

    sig { returns(T.nilable(::Integer)) }
    def default_icon_id_before_last_save; end

    sig { returns(T.untyped) }
    def default_icon_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def default_icon_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_icon_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_icon_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def default_icon_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def default_icon_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def default_icon_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def default_icon_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def default_icon_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def default_icon_id_was; end

    sig { void }
    def default_icon_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def description; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def description_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def description_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def nickname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def nickname=(value); end

    sig { returns(T::Boolean) }
    def nickname?; end

    sig { returns(T.nilable(::String)) }
    def nickname_before_last_save; end

    sig { returns(T.untyped) }
    def nickname_before_type_cast; end

    sig { returns(T::Boolean) }
    def nickname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def nickname_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def nickname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def nickname_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def nickname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def nickname_was; end

    sig { void }
    def nickname_will_change!; end

    sig { returns(T::Boolean) }
    def npc; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def npc=(value); end

    sig { returns(T::Boolean) }
    def npc?; end

    sig { returns(T.nilable(T::Boolean)) }
    def npc_before_last_save; end

    sig { returns(T.untyped) }
    def npc_before_type_cast; end

    sig { returns(T::Boolean) }
    def npc_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def npc_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def npc_change_to_be_saved; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def npc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def npc_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def npc_previous_change; end

    sig { params(from: T::Boolean, to: T::Boolean).returns(T::Boolean) }
    def npc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def npc_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def npc_was; end

    sig { void }
    def npc_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pb; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pb=(value); end

    sig { returns(T::Boolean) }
    def pb?; end

    sig { returns(T.nilable(::String)) }
    def pb_before_last_save; end

    sig { returns(T.untyped) }
    def pb_before_type_cast; end

    sig { returns(T::Boolean) }
    def pb_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pb_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pb_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pb_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pb_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pb_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def pb_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def pb_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pb_was; end

    sig { void }
    def pb_will_change!; end

    sig { void }
    def restore_character_group_id!; end

    sig { void }
    def restore_cluster!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_default_icon_id!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_nickname!; end

    sig { void }
    def restore_npc!; end

    sig { void }
    def restore_pb!; end

    sig { void }
    def restore_retired!; end

    sig { void }
    def restore_screenname!; end

    sig { void }
    def restore_template_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable(T::Boolean)) }
    def retired; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def retired=(value); end

    sig { returns(T::Boolean) }
    def retired?; end

    sig { returns(T.nilable(T::Boolean)) }
    def retired_before_last_save; end

    sig { returns(T.untyped) }
    def retired_before_type_cast; end

    sig { returns(T::Boolean) }
    def retired_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def retired_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def retired_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def retired_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def retired_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def retired_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def retired_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def retired_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def retired_was; end

    sig { void }
    def retired_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_character_group_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_character_group_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_cluster; end

    sig { returns(T::Boolean) }
    def saved_change_to_cluster?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_default_icon_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_default_icon_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_nickname; end

    sig { returns(T::Boolean) }
    def saved_change_to_nickname?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_npc; end

    sig { returns(T::Boolean) }
    def saved_change_to_npc?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pb; end

    sig { returns(T::Boolean) }
    def saved_change_to_pb?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_retired; end

    sig { returns(T::Boolean) }
    def saved_change_to_retired?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_screenname; end

    sig { returns(T::Boolean) }
    def saved_change_to_screenname?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_template_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_template_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::String)) }
    def screenname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def screenname=(value); end

    sig { returns(T::Boolean) }
    def screenname?; end

    sig { returns(T.nilable(::String)) }
    def screenname_before_last_save; end

    sig { returns(T.untyped) }
    def screenname_before_type_cast; end

    sig { returns(T::Boolean) }
    def screenname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def screenname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def screenname_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def screenname_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def screenname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def screenname_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def screenname_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def screenname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def screenname_was; end

    sig { void }
    def screenname_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def template_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def template_id=(value); end

    sig { returns(T::Boolean) }
    def template_id?; end

    sig { returns(T.nilable(::Integer)) }
    def template_id_before_last_save; end

    sig { returns(T.untyped) }
    def template_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def template_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def template_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def template_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def template_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def template_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def template_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def template_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def template_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def template_id_was; end

    sig { void }
    def template_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def user_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_character_group_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cluster?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_default_icon_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nickname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_npc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_retired?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_screenname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_template_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def non_npcs(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def npcs(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_name(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Character } }

    sig { returns(T::Array[::Character]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Character } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Character } }

    sig do
      params(
        records: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Character, Integer, String, T::Enumerable[T.any(::Character, Integer, String, T::Enumerable[::Character])])
      ).returns(T::Array[::Character])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Character, Integer, String, T::Enumerable[T.any(::Character, Integer, String, T::Enumerable[::Character])])
      ).returns(T::Array[::Character])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Character]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Character, T::Enumerable[T.any(::Character, T::Enumerable[::Character])])
      ).returns(T::Array[::Character])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Character]) }
    def target; end

    sig { returns(T::Array[::Character]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Character } }

    sig { returns(T::Array[::Character]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Character } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
